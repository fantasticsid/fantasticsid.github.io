<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>fantasticsid</title>
        <link>http://blog.fantasticsid.com</link>
        <description><![CDATA[mathematics, computer science, haskell, clojure, scala, erlang, C++, python, music]]></description>
        <atom:link href="http://blog.fantasticsid.com/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 11 Jun 2018 00:00:00 UT</lastBuildDate>
        <item>
    <title>Everything’s more exciting when it’s a party..</title>
    <link>http://blog.fantasticsid.com/posts/2018-06-11-party.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Everything’s more exciting when it’s a party..</h1>
                    
                    <span class="meta">
		    
			June 11, 2018
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>“Everything’s more exciting when it’s a party..”</p>
<p>在看&lt;&lt;Deep Work&gt;&gt;中..</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 11 Jun 2018 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2018-06-11-party.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>总算懂了点Paxos</title>
    <link>http://blog.fantasticsid.com/posts/2018-04-05-paxos.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>总算懂了点Paxos</h1>
                    
                    <span class="meta">
		    
			April  5, 2018
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>目前还没有看&lt;&lt;Paxos Made Simple&gt;&gt;, 但是看了几篇知乎的文章, 感觉懂了一点..</p>
<p>Leslie Lamport说: 分布式共识这样的难问题, 从需要的性质出发, 逆向推理, 最终就能得出Paxos这样的算法. (滚, 我是推不出的)</p>
<p>首先, 要在一群节点之间形成一个共识, 我们会进行若干论的提议/投票, 每轮投票试图在所有节点间形成共识. 我们可以分两步走, 或者说, 把分布式共识这个目标分解成以下两个性质:</p>
<ul>
<li>每轮投票, 只有一个值被提议.</li>
<li>一旦一个提议A被接受, 形成共识, 那么轮数更大的投票, 提议的值都将是和A相同.</li>
</ul>
<p>其中第二点是比较神奇巧妙的, 也是理解Paxos正确性的关键! 但是我们先来看看第一条~</p>
<p>要满足第一个条件, 我们只要做到, 只有一个节点进行提议就行. 为了达到这点, 每轮投票首先进行Promise-Prepare阶段. 这个阶段, 每个节点只同意(Promise)有一个Proposer. 如果已经有Promise过相同轮别的节点, 则拒绝Prepare请求. 而进行提议的节点只有在收到半数以上节点的Promise回答, 才可以提议(Propose). 容易看到, 只有最多一个节点会收到半数以上的Promise回应, 于是性质得到证明.</p>
<p>为了要做到第二点, 我们需要加几个条件:</p>
<ul>
<li>如果a &lt; b, 而且节点已经Promise了轮数b, 就不Accept/Promise a的Propose请求. (1)</li>
<li>每次回应Promise的时候, 返回Accept过的请求中, 轮数最大的那个. (2)</li>
<li>Proposer在Prepare阶段如果有节点回复中包含已经Accept的Proposal, 那么Proposer只能Propose其中轮数最大的那个的值. (3)</li>
</ul>
<p>首先我们想想, 一个提议被接受是什么意思: 只有当过半数节点Accept一个提议, 那么Proposer才可以认为提议被接受.</p>
<p>我们不妨设提议a是接受了的提议中, 轮数最小的, 提议b被超过半数节点Promise了, a &lt; b.</p>
<p>在a的Propose阶段, Proposer收到了半数节点的Accept答复, 把这些节点的集合记为Ma.</p>
<p>在b的Prepare阶段, Proposer收到了半数节点的Promise答复, 把这些节点的集合记为Mb.</p>
<p>Ma, Mb至少有一个共同节点k. 而k一定是先Accept a的Proposal, 然后再Promise b的Prepare. 反证法: 如果先Promise b, 那么因为a &lt; b, 根据(1), 节点k是不会Accept a的.</p>
<p>根据(2), 在所有节点对b的Promise回复中, 包含的轮数最大值c, 有c &gt;= a, 这是因为k节点的返回结果也至少是a (c不一定是k的返回结果, 不妨设是p的返回结果). 而且既然b得到了节点p的Promise结果, 那么根据(1)必然有b &gt;= c, 然而由于此时b还在Prepare-Promise阶段, 不可能有节点已经accept了b, 所以b != c. 所以b &gt; c.</p>
<p>由于(3)知道, b轮的Proposal值和c是一样的. 这样我们就把对轮数b的证明规约到了对轮数c的证明, 注意到c是严格小于b的, 所以可以不断类推直到c = a, 此时我们发现Proposer只能提议和a轮相同的值.</p>
<p>所以我们就证明了, 一旦提议A在a轮被接受, 之后的紧接着的Proposal都会提议A的值.</p>
<p>好像还蛮难说服自己的..</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 05 Apr 2018 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2018-04-05-paxos.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>标签不是好东西</title>
    <link>http://blog.fantasticsid.com/posts/2018-02-12-tags.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>标签不是好东西</h1>
                    
                    <span class="meta">
		    
			February 12, 2018
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>我们用的工具很直接地影响到我们能做什么事情, 能做多好, 甚至是会影响我们能够想像我们自己能做到的事情.</p>
<p>我们又常常对自己的工具有太多执着, 比如标榜自己是Emacs/Vim党, 自己是Mac/PC粉.</p>
<p>Paul Graham写过的一篇文章说标签是对自己的一种限制, 那篇文章叫Keep your identity small.</p>
<p>冷酷无情地淘汰不适合的工具, 拒绝标签, 减少自我.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 12 Feb 2018 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2018-02-12-tags.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>为了游戏</title>
    <link>http://blog.fantasticsid.com/posts/2018-02-02-sketching.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>为了游戏</h1>
                    
                    <span class="meta">
		    
			February  2, 2018
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<div>
<div class="figure">
<img src="/images/sketching.jpg" title="sketching" />

</div>
</div>
<p>想做一个原画, 音乐, 逻辑, 后台都自己来的游戏. 为了这个我也是抛弃了几十年不会画画的标签, 在youtube上找视频学画画.</p>
<p>这可比以前画的好太多了… 虽然离自己画出满意的游戏素材还有一些距离, 说不定年底…可以吧..</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 02 Feb 2018 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2018-02-02-sketching.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>博客十年</title>
    <link>http://blog.fantasticsid.com/posts/2017-11-30-ten-years.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>博客十年</h1>
                    
                    <span class="meta">
		    
			November 30, 2017
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>感觉有点厉害..</p>
<p>虽然一年只写半篇, 而且当年一起写博客的同学们都已经大多不再写了.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 30 Nov 2017 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2017-11-30-ten-years.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>polished, focused, and move fast</title>
    <link>http://blog.fantasticsid.com/posts/2017-02-18-notes.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>polished, focused, and move fast</h1>
                    
                    <span class="meta">
		    
			February 18, 2017
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>新的关键词</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 18 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2017-02-18-notes.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>老虎棒子鸡虫</title>
    <link>http://blog.fantasticsid.com/posts/2016-04-23-games.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>老虎棒子鸡虫</h1>
                    
                    <span class="meta">
		    
			April 23, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>老虎棒子鸡虫不两两可比, 偏序关系也不具有传递性.. 剪刀石头布两两可比, 但没有传递性..</p>
<p>听郭德纲相声中..</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 23 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-04-23-games.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>摇.滚</title>
    <link>http://blog.fantasticsid.com/posts/2016-03-26-dog.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>摇.滚</h1>
                    
                    <span class="meta">
		    
			March 26, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>以后再养狗名字都想好了, 就叫“摇.滚”</p>
<p>现在就缺一条狗了.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 26 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-03-26-dog.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>部分放弃Haskell</title>
    <link>http://blog.fantasticsid.com/posts/2016-03-12-haskell.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>部分放弃Haskell</h1>
                    
                    <span class="meta">
		    
			March 12, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>研究Haskell也有些时间了, 今天突然醒悟了. 以后做实用项目, 除非是编译器之类的东西, 就不考虑Haskell了. 主要原因是</p>
<ol style="list-style-type: decimal">
<li>智商不够, 没法在生产环境下调bug, 调性能. 毕竟调bug之类的活是需要拆开抽象往下层走的. 而Haskell语言/运行时的复杂度已经足够在我找到bug之前彻底碾压我了.</li>
<li>抽象太多学不完(智商不够). 懂了Monad又有Transformer, Arrow, Lense .. 等学完人家都月活跃用户过百万了</li>
<li>从来没见过哪个人用得好Haskell还能做出好看好用的设计的.</li>
</ol>
<p>所以?</p>
<p>Haskell的各种抽象需要了解, 之后可以在其他地方使用. Ocaml可以试一下, 无数编译器最初版本都是Ocaml写的. 最近对Incremental这个库比较感兴趣. 然后, 多余的时间还不如写写Javascript, CSS, 设计了. 说实话正经干事还不如用C++了.</p>
<p>Haskell只是适合某些特定领域, 特定人群和公司吧. FB的垃圾过滤系统看似是Haskell生产环境的一个好例子, 但是它背后是写GHC的大牛以及各种其他神牛在搞, 况且FB也有足够资源. 其实我感觉同样的这些神牛, 用同样的资源, 无论啥语言基本都会做得很好.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 12 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-03-12-haskell.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gradients</title>
    <link>http://blog.fantasticsid.com/posts/2016-02-06-gradients.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gradients</h1>
                    
                    <span class="meta">
		    
			February  6, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Colour gradients are awesome.</p>
<p><a href="http://uigradients.com/">uigradients</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 06 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-02-06-gradients.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>React, Zipper, Incremental</title>
    <link>http://blog.fantasticsid.com/posts/2016-01-31-react-incremental-computation-zipper.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>React, Zipper, Incremental</h1>
                    
                    <span class="meta">
		    
			January 31, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>最近用React比较多, 前段时间在Twitter上Janestreet的Yaron Minsky说到他们写了一个叫Incremental的库, 然后又重新接触到一些functional data structure之zipper~. 感觉这三者并不是风马牛不相及的事情, 应该需要扯一下.</p>
<p>虽然对Incremental没有太多了解, 但是感觉是跟FRP有点沾边, 据我不靠谱的猜测, 应该是某种让计算’reify’以达到记录数据结构之间依赖关系的编程方法. 具体来讲, 举个栗子:</p>
<p>比如你要计算一个数组的最小元素, 你的算法是从头到尾巴遍历一边. 其中你读取到了数组中的每一个元素. 那么你的这个算法/函数就对这个数组本身, 以及数组中的每一个元素都有依赖. 现在, 假设数组变了, 那你的这个求最小值的函数怎么再算这个新的数组的最小元素呢?</p>
<p>当然你可以重复重复再重复地遍历一遍, 但是更方便的方法是你就拿新的元素和旧的最小值比一下就好了嘛. 这种按照源头数据变化进行增量更新的方法, 我估摸着就是Incremental的想法. 如果有不靠谱的地方… 我前面已经说了我是在不靠谱地猜测.</p>
<p>继续瞎扯淡.</p>
<p>好了现在有同学要问了, 你要是数组要去掉一个元素咋办? 万一去掉的就是你最小的元素你还搞屁啊?</p>
<p>Too young.</p>
<p>Incremental这种方法我感觉只是减少计算量但不一定能始终做到最优, 而对于你的问题, 我无可奉告!</p>
<p>Just kidding.</p>
<p>你可以用类似线段树的结构来表示一个数组嘛. 于是跟新一个元素, 增加/删除一个元素的时候, 只要log次更新就可以得到新的最小/最大值..</p>
<p>当然针对不同的函数, 优化Incremental computation需要的数据结构是不同的, 但是我们先不要在意这些细节好吗? 后面还有很多蛋需要扯..</p>
<p>好了, 这是我们的栗子.</p>
<p>现在假设我们有这样一些神奇海螺, 哦不, 神奇的支持Incremental computation的数据结构/算法/库/API/哒哒哒, 我们再来看React..</p>
<p>我们也用最小元素这个栗子..</p>
<p>你有一个React component, 然后state是一坨数字, 它render粗来一个&lt;p&gt;{min}&lt;/p&gt;.. (啊好简洁, 不禁让我想起一句高中数学老师的话: 好的反例只要一个. 不过这又不是个反例&gt;&lt;’)</p>
<p>那你原来是咋实现的?</p>
<p>可能你会有个函数, 计算所有元素最小值, 每次有元素更新, 你就重来一次更新这个最小值, 然后setState, 重新render, 得到新的&lt;p&gt;{min}&lt;/p&gt;</p>
<p>现在有了incremental computation, 你在计算新的最小值min的时候可以变得更快更聪明~</p>
<p>但是仅仅是这个, 说到这里没有Exciting的感觉有没有? 我也没有!</p>
<p>Too young!</p>
<p>我们把蛋壳扯掉了, 现在要往蛋黄里扯.</p>
<p>React内部是用virtual dom来连接你的application state和下面的browser dom的一致性的, 给你的赶脚是一个纯函数, 从app state -&gt; browser dom.</p>
<p>那它是怎么做到的呢? 每次把旧的和新的virtual dom遍历一遍, 就知道了是啥变化了.</p>
<p>举个栗子, 你要render一个朋友列表, 你的app state是[小蜗, 派大星, 珊迪, 蟹老板]. 然后这时候新来一个章鱼哥, 你把它塞到最后. (好惨..) 你的app state变成了[小蜗, 派大星, 珊迪, 蟹老板, 章鱼哥]. 然后你给React的东西是啥?</p>
<p>前后两次分别是</p>
<ul>
<li>小蜗</li>
<li>派大星</li>
<li>珊迪</li>
<li>蟹老板</li>
</ul>
<p>以及</p>
<ul>
<li>小蜗</li>
<li>派大星</li>
<li>珊迪</li>
<li>蟹老板</li>
<li>章鱼哥</li>
</ul>
<p>然后你其实是知道的, 我只是在数组最后加了一个元素. 然而你并没有告诉React这个信息, React需要从头到尾看一遍, 检查哪个是新来的, 哪个是旧来的, 然后再下去跟新browser dom..</p>
<p>这里可能有人要说了, 你是在金坷垃官网看的React文档吧? 对于列表, React都是提供key这个prop给你做优化的..</p>
<p>不错! 资源的确你发达!</p>
<p>我们暂且不要在意React的这些herusitcs, 假设它没, 我们能不能用别的方法, 做得更好更有逼格.</p>
<p>我觉得是有的, 就是Incremental computation. (我擦, 没想到吧..)</p>
<p>现在假设某种方法, 我们和React之间的接口是Incremental computation/Incremental data structure, 那对app state的更新就包含了到底大爷的啥更新了(别就给我个优良中差, 有种的拼解题步骤!)</p>
<p>那兴许React就不用每次都重新算一下virtual dom diff了? 因为这个virtual dom就是个incremental data structure它知道啥变了, 啥没变..</p>
<p>写到这里好虚, 这部分没想好到底该咋组织接口, 哪部分该是incremental data structure, 怎么实现, 怎么搞.. 好虚好naive..</p>
<p>不管了, 继续把下面的扯掉就去看电影.</p>
<p>上面说的这些我感觉是和FRP有关的. FRP维护的是计算节点之间的关系, 然后也有增量更新的想法. 啊好虚, 没真正用过FRP, 好虚..</p>
<p>下面再说说zipper跟这些是怎么扯上的..</p>
<p>我们还是用上面那个朋友列表的栗子.</p>
<p>我们原来有这样一个结构:</p>
<ul>
<li>小蜗</li>
<li>派大星</li>
<li>珊迪</li>
<li>蟹老板</li>
</ul>
<p>这是一个普通列表, 如果是一个文艺一点的列表, 它可能是这样的:</p>
<ul>
<li>小蜗</li>
<li>派大星</li>
<li>珊迪</li>
<li>蟹老板 &lt;- 蟹老板我看着你呢, 因为章鱼哥马上就要粗线在你后边了</li>
</ul>
<p>对, zipper就是对一个普通数据结构的某一部分, 紧盯不放(不一定是zipper那不要想过了=.=)</p>
<p>另外zipper这种方法在编辑器的实现中早有存在, 叫gap buffer, 是一种zipper特例, 有兴趣可以wiki查阅(装逼完成).</p>
<p>现在我们不是要加一个章鱼哥吗?</p>
<p>“我们只要在我们盯住的蟹老板后边, 加上一个章鱼哥, 就好了.”</p>
<p>那同学又要说了, 跟普通的array append有个毛区别啊, 你这算是哪门子凑字数技巧啊? 只有审稿人做梦的时候才能蒙混过去好不好! 还能不能在主席的关怀下茁壮成长了?</p>
<p>你继续听我扯.</p>
<p>其实这个数组啊, 它是个树(我擦, 树你妹!)</p>
<p>对, 现在我们的列表, 其实是用一个树的结构来实现的(我勒个去啥东西? 我要去喝高乐高了..)</p>
<p>你可以想象成.. 我们的列表是这样的:</p>
<p>[小蜗, 派大星, 珊迪, 蟹老板 &lt;- 蟹老板我看着你呢, 因为章鱼哥马上就要粗线在你后边了] ^ [章鱼哥驾到]</p>
<p>嗯所以, 我们的新列表, 是带有比一个普通列表更多的额外信息的, 这部分信息, 使得它不再普通, 你可以理解为逼格源力(bigger source) (我擦寒气逼人)</p>
<p>那说了这么多, 有个毛线用处啊?</p>
<p>并没有, 大家洗洗睡了..</p>
<p>Just kidding.</p>
<p>前面说到React的diff, 各种heuristics. 现在一种比较流行(是吗?我很不靠谱地在猜)的做法是用functional data structure的reference equality来进行value equality的检查从而得到巨大的性能优化.</p>
<p>我们可以想象(“经观察容易得到”), 如果React内部用的是类似zipper数据结构, 然后算diff的时候, 看到蟹老板那里就发现其实之前的一坨都是没变(想象有一个从functional data structure reference -&gt; dom的hash table), 那就啥都不用做了直接跳过. 然后再看到章鱼哥的时候, 在dom相应的蟹老板节点出, 新增一个章鱼哥节点.. (啊好费劲, 我写的费劲你估计看的也费劲我扯不下去了..)</p>
<p>嗯我觉得其实上面说的各种优化很可能React里面已经有了, 但是我还是觉得用zipper会使得diff算法更加聪明, 里面的优化更加普适 (去屎扯淡君)</p>
<p>嗯, 差不多快结束了.</p>
<p>有几个由于文采关系没法组织到上面的想法:</p>
<ol style="list-style-type: decimal">
<li><p>zipper的那部分和incremental computation可能是正交的(我擦能不能不用这么装逼的词语..)</p></li>
<li><p>我最初的想法是, (还是用朋友列表那个栗子), 如果你在蟹老板后面, 鼠标点选, 添加一个章鱼哥, 这个操作的信息量不仅仅是章鱼哥, 而是“章鱼哥来到了蟹老板后面”这样. 而这个信息现在没法儿好好表达. 但赶脚, 这个信息如果React能利用起来, 说不定能亩产一千八, 不, 提高virtual dom diff计算的效率.</p></li>
</ol>
<p>写着写着越来越虚, 一方面很多东西只是听说过, 根本没有用过. 另一方面也是有很多没想透. 但求不是想太多..(其实是的对吗? 但是我不管怎样扯了这么多字~)</p>
<p>待了个续..</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 31 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-01-31-react-incremental-computation-zipper.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>为什么自然界美景如此普遍，美丽的声音却不常"见"？</title>
    <link>http://blog.fantasticsid.com/posts/2016-01-28-q.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>为什么自然界美景如此普遍，美丽的声音却不常"见"？</h1>
                    
                    <span class="meta">
		    
			January 28, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>为什么自然界美景如此普遍，美丽的声音却不常“见”？</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 28 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-01-28-q.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>所以type family和C++的template class specialization是差不多的意思咯?</title>
    <link>http://blog.fantasticsid.com/posts/2016-01-28-a.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>所以type family和C++的template class specialization是差不多的意思咯?</h1>
                    
                    <span class="meta">
		    
			January 28, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>所以type family和C++的template class specialization是差不多的意思咯?</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 28 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-01-28-a.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>要成为一个牛逼的前端工程师</title>
    <link>http://blog.fantasticsid.com/posts/2016-01-07-a.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>要成为一个牛逼的前端工程师</h1>
                    
                    <span class="meta">
		    
			January  7, 2016
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>要成为一个牛逼的前端工程师</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 07 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2016-01-07-a.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>限制创造新事物的是不够好的创造工具？</title>
    <link>http://blog.fantasticsid.com/posts/2015-12-28-q.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>限制创造新事物的是不够好的创造工具？</h1>
                    
                    <span class="meta">
		    
			December 28, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>限制创造新事物的是不够好的创造工具？</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 28 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-12-28-q.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>试下把garage band连到电脑</title>
    <link>http://blog.fantasticsid.com/posts/2015-12-28-improv.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>试下把garage band连到电脑</h1>
                    
                    <span class="meta">
		    
			December 28, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<iframe width="100%" height="600" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/238091604&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true">
</iframe>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 28 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-12-28-improv.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>瞎弹第二弹</title>
    <link>http://blog.fantasticsid.com/posts/2015-12-25-improv.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>瞎弹第二弹</h1>
                    
                    <span class="meta">
		    
			December 25, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<iframe width="100%" height="600" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/237058839&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true">
</iframe>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 25 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-12-25-improv.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>瞎弹</title>
    <link>http://blog.fantasticsid.com/posts/2015-12-23-improv.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>瞎弹</h1>
                    
                    <span class="meta">
		    
			December 23, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<iframe width="100%" height="600" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/235196456&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true">
</iframe>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Wed, 23 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-12-23-improv.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>一个喜欢的故事</title>
    <link>http://blog.fantasticsid.com/posts/2015-11-21-story.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>一个喜欢的故事</h1>
                    
                    <span class="meta">
		    
			November 21, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>一个喜欢的故事:</p>
<p>On March 23, 1994, a medical examiner viewed the body of Ronald Opus and concluded that he died from a gunshot wound of the head caused by a shotgun. Investigation to that point had revealed that the decedent had jumped from the top of a ten-story building with the intent to commit suicide. (He left a note indicating his despondency.) As he passed the 9th floor on the way down, his life was interrupted by a shotgun blast through a window, killing him instantly. Neither the shooter nor the decedent was aware that a safety net had been erected at the 8th floor level to protect some window washers, and that the decedent would most likely not have been able to complete his intent to commit suicide because of this.Ordinarily, a person who starts into motion the events with a suicide intent ultimately commits suicide even though the mechanism might be not what they intended. That he was shot on the way to certain death nine stories below probably would not change his mode of death from suicide to homicide, but the fact that his suicide intent would not have been achieved under any circumstance caused the medical examiner to feel that he had homicide on his hands.Further investigation led to the discovery that the room on the 9th floor from whence the shotgun blast emanated was occupied by an elderly man and his wife. He was threatening her with the shotgun because of an interspousal spat and became so upset that he could not hold the shotgun straight. Therefore, when he pulled the trigger, he completely missed his wife, and the pellets went through the window, striking the decedent.When one intends to kill subject A but kills subject B in the attempt, one is guilty of the murder of subject B. The old man was confronted with this conclusion, but both he and his wife were adamant in stating that neither knew that the shotgun was loaded. It was the longtime habit of the old man to threaten his wife with an unloaded shotgun. He had no intent to murder her; therefore, the killing of the decedent appeared then to be accident. That is, the gun had been accidentally loaded.But further investigation turned up a witness that their son was seen loading the shotgun approximately six weeks prior to the fatal accident. That investigation showed that the mother (the old lady) had cut off her son’s financial support, and her son, knowing the propensity of his father to use the shotgun threateningly, loaded the gun with the expectation that the father would shoot his mother. The case now becomes one of murder on the part of the son for the death of Ronald Opus.Now comes the exquisite twist. Further investigation revealed that the son, Ronald Opus himself, had become increasingly despondent over the failure of his attempt to get his mother murdered. This led him to jump off the ten-story building on March 23, only to be killed by a shotgun blast through a 9th story window.The medical examiner closed the case as a suicide.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 21 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-11-21-story.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>一个喜欢的故事</title>
    <link>http://blog.fantasticsid.com/posts/2015-11-20-story.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>一个喜欢的故事</h1>
                    
                    <span class="meta">
		    
			November 20, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>一个喜欢的故事:</p>
<p>There is an island upon which a tribe resides. The tribe consists of 1000 people, with various eye colours. Yet, their religion forbids them to know their own eye color, or even to discuss the topic; thus, each resident can (and does) see the eye colors of all other residents, but has no way of discovering his or her own (there are no reflective surfaces). If a tribesperson does discover his or her own eye color, then their religion compels them to commit ritual suicide at noon the following day in the village square for all to witness. All the tribespeople are highly logical and devout, and they all know that each other is also highly logical and devout (and they all know that they all know that each other is highly logical and devout, and so forth). [Added, Feb 15: for the purposes of this logic puzzle, “highly logical” means that any conclusion that can logically deduced from the information and observations available to an islander, will automatically be known to that islander.] Of the 1000 islanders, it turns out that 100 of them have blue eyes and 900 of them have brown eyes, although the islanders are not initially aware of these statistics (each of them can of course only see 999 of the 1000 tribespeople). One day, a blue-eyed foreigner visits to the island and wins the complete trust of the tribe. One evening, he addresses the entire tribe to thank them for their hospitality. However, not knowing the customs, the foreigner makes the mistake of mentioning eye color in his address, remarking “how unusual it is to see another blue-eyed person like myself in this region of the world”. What effect, if anything, does this faux pas have on the tribe?</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 20 Nov 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-11-20-story.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>无处安放的手掌..</title>
    <link>http://blog.fantasticsid.com/posts/2015-09-12-keyboard.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>无处安放的手掌..</h1>
                    
                    <span class="meta">
		    
			September 12, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>搞了个新的键盘, 在Mac上长期手掌按Control也累啊, 这键盘太平了..</p>
<p>ikbc poker II</p>
<p>有人推荐hhkb. 但是看到Control键被挖掉了就知道我们没法做朋友! hhkb你只能给我无处安放的手掌..</p>
<div>
<div class="figure">
<img src="/images/keyboard.jpg" title="keyboard" />

</div>
</div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 12 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-09-12-keyboard.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Composable Memory Transaction</title>
    <link>http://blog.fantasticsid.com/posts/2015-09-12-composable-memory-transaction.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Composable Memory Transaction</h1>
                    
                    <span class="meta">
		    
			September 12, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>在看Composable Memory Transaction, 其中讲到了Haskell的实现.</p>
<p>有个问题是关于异常的. 比如一个STM transaction里面, 用户抛出了一个异常, 这时RTS是不是要抛出这个异常呢? (假设异常已经传播到了开始STM处)</p>
<p>文章里说到, RTS会检查这个STM transaction里面已经读过的TVar是否被修改过(STMIsValid). 如果没有, 则抛出. 否则假装没看到这个异常然后重启STM transaction.</p>
<p>原因是, 用户代码可能是因为看到了不一致的TVar然后决定抛出异常的. 比如用户检查TVar a, TVar b必须相等, 否则抛出异常. 假设代码读到a = 2, 并且把它写到transaction log里面. 这时另外一个transaction commit并把a, b都更新为3. 然后代码继续读b就发现b = 3了. 于是抛出异常. 然而另外一个transaction是遵循了a, b必须相等这个不变量的(它并没有错╮(╯▽╰)╭). 错在之前的那个transaction并没有看到“整个世界停下来的样子”.</p>
<p>所以说在异常跑出时, 如果STMIsValid检查到读过的TVar有过更新, 则异常不抛出, 重新启动transaction.</p>
<p>这也遵循了“如果看到的世界已经变过了, 那么我就全部重新来一遍整个STM”的直观理解.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 12 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-09-12-composable-memory-transaction.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>其他的编辑器(IDE)</title>
    <link>http://blog.fantasticsid.com/posts/2015-09-11-editors.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>其他的编辑器(IDE)</h1>
                    
                    <span class="meta">
		    
			September 11, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>不够给力啊老师们. 今天用Nuclide来试着写了下react native, 并没有传说中, 想象中, 的那种精气神呐, 回去再用某编辑器, js2-mode + ternjs瞬间就超越Nuclide的体验了. 但是按照F8视频上的样子来看, 应该是我打开的方式也不太对..</p>
<p>反正目前为止, 能够对Haskell, Scala, Ruby, C++还有Javascript都提供良好体验的编辑器, 就只有某编辑器了..</p>
<p>唉我又开始扯这些毫无用处的东西了..</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 11 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-09-11-editors.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>要个App</title>
    <link>http://blog.fantasticsid.com/posts/2015-09-11-app-idea.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>要个App</h1>
                    
                    <span class="meta">
		    
			September 11, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>想要一个App方便我和小伙伴分轨自制音乐</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 11 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-09-11-app-idea.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>要个App</title>
    <link>http://blog.fantasticsid.com/posts/2015-09-06-app-idea.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>要个App</h1>
                    
                    <span class="meta">
		    
			September  6, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>想要一个App可以方便我和人约会时确定时间(地点)</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 06 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-09-06-app-idea.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>2015新年计划</title>
    <link>http://blog.fantasticsid.com/posts/2015-02-19-2015-resolution.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>2015新年计划</h1>
                    
                    <span class="meta">
		    
			February 19, 2015
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<pre><code>好好工作

写关于音乐的App</code></pre>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 19 Feb 2015 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2015-02-19-2015-resolution.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Real World Haskell 笔记</title>
    <link>http://blog.fantasticsid.com/posts/2014-01-31-real-world-haskell.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Real World Haskell 笔记</h1>
                    
                    <span class="meta">
		    
			January 31, 2014
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<ol style="list-style-type: decimal">
<li>Getting Started</li>
</ol>
<p>介绍了Haskell的REPL: ghci. Haskell是强类型语言, 类型扮演了非常重要的角色.</p>
<ol start="2" style="list-style-type: decimal">
<li>Types and Functions</li>
</ol>
<p>类型推导. Haskell的一些基本类型: Char, Bool, Int, Integer, Double.</p>
<p>函数: Haskell函数几乎都是纯的, 即不带有副作用. 所谓副作用, 是指的函数的行为依赖于一些全局的状态.</p>
<p>Lazy Evaluation: Haskell的求值是惰性的. 表达式在需要其值的时候才会被真正求值, 在此之前, 它们以thunk的形式出现.</p>
<p>Curry and Partial Application</p>
<ol start="3" style="list-style-type: decimal">
<li>Defining Types, Streamlining Functions</li>
</ol>
<p>介绍了Haskell的Algebraic Data Types, Pattern Matching. Pattern Matching当中要注意pattern里面不能用同一个pattern变量代表2个值相等这样的限制.</p>
<p>Parameterized types, 类似于C++里的模板.</p>
<p>表达式缩进规则: 所有顶层定义的开始都要有一样的缩进, 如果下一行的开始缩进更大, 则被认为是当前表达式的延续. 如果是同一层, 则认为是同一个代码块的一个新项目. Structured Haskell Mode是一个Emacs Haskell的编辑模式, 通过parse haskell代码来推断缩进应该在哪里. Haskell里也可以用“{}”来组合代码, 并且用分号分割.</p>
<ol start="4" style="list-style-type: decimal">
<li>Functional Programming</li>
</ol>
<p>FP中递归是很重要的思想, 很多循环可以用尾递归的方式实现. 本章介绍了FP中很多List的函数, 比如map, foldl, foldr, head, init, inits, tail, tails等等.</p>
<p>As patterns.</p>
<p>Function composition with ‘.’ operator</p>
<p>seq能够对一个thunk进行严格求值(到head normal form).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">foldl&#39; _ zero [] <span class="fu">=</span> zero
foldl&#39; step zero (x<span class="fu">:</span>xs) <span class="fu">=</span>
       <span class="kw">let</span> new <span class="fu">=</span> step zero x
              <span class="kw">in</span> new <span class="ot">`seq`</span> foldl&#39; step new xs</code></pre></div>
<ol start="5" style="list-style-type: decimal">
<li>Writing a Library: Working with JSON Data</li>
</ol>
<p>用Haskell的ADT表示JSON:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">JValue</span> <span class="fu">=</span> <span class="dt">JString</span> <span class="dt">String</span>
              <span class="fu">|</span> <span class="dt">JNumber</span> <span class="dt">Double</span>
              <span class="fu">|</span> <span class="dt">JBool</span> <span class="dt">Bool</span>
              <span class="fu">|</span> <span class="dt">JNull</span>
              <span class="fu">|</span> <span class="dt">JObject</span> [(<span class="dt">String</span>, <span class="dt">JValue</span>)]
              <span class="fu">|</span> <span class="dt">JArray</span> [<span class="dt">JValue</span>]
                <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>, <span class="dt">Show</span>)</code></pre></div>
<p>Haskell代码一个文件通常代表一个Haskell Module</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Module</span> <span class="dt">SimpleJSON</span>
  (
  <span class="dt">JValue</span>(<span class="fu">..</span>)
  , getString
  , getInt
  ) <span class="kw">where</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Module</span> <span class="dt">ExportNothing</span> () <span class="kw">where</span></code></pre></div>
<p>通用的PrettyPrinter</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Doc</span> <span class="fu">=</span> <span class="dt">Empty</span>
         <span class="fu">|</span> <span class="dt">Char</span> <span class="dt">Char</span>
         <span class="fu">|</span> <span class="dt">Text</span> <span class="dt">String</span>
         <span class="fu">|</span> <span class="dt">Line</span>
         <span class="fu">|</span> <span class="dt">Concat</span> <span class="dt">Doc</span> <span class="dt">Doc</span>
         <span class="fu">|</span> <span class="dt">Union</span> <span class="dt">Doc</span> <span class="dt">Doc</span>
           <span class="kw">deriving</span> (<span class="dt">Show</span>,<span class="dt">Eq</span>)</code></pre></div>
<p>有了这个定义, 定义一些基本的combinator, 我们就可以对一个Doc进行渲染:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">compact ::</span> <span class="dt">Doc</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
compact x <span class="fu">=</span> transform [x]
    <span class="kw">where</span> transform [] <span class="fu">=</span> <span class="st">&quot;&quot;</span>
          transform (d<span class="fu">:</span>ds) <span class="fu">=</span>
              <span class="kw">case</span> d <span class="kw">of</span>
                <span class="dt">Empty</span>        <span class="ot">-&gt;</span> transform ds
                <span class="dt">Char</span> c       <span class="ot">-&gt;</span> c <span class="fu">:</span> transform ds
                <span class="dt">Text</span> s       <span class="ot">-&gt;</span> s <span class="fu">++</span> transform ds
                <span class="dt">Line</span>         <span class="ot">-&gt;</span> <span class="ch">&#39;\n&#39;</span> <span class="fu">:</span> transform ds
                a <span class="ot">`Concat`</span> b <span class="ot">-&gt;</span> transform (a<span class="fu">:</span>b<span class="fu">:</span>ds)
                _ <span class="ot">`Union`</span> b  <span class="ot">-&gt;</span> transform (b<span class="fu">:</span>ds)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">pretty ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Doc</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
pretty width x <span class="fu">=</span> best <span class="dv">0</span> [x]
    <span class="kw">where</span> best col (d<span class="fu">:</span>ds) <span class="fu">=</span>
              <span class="kw">case</span> d <span class="kw">of</span>
                <span class="dt">Empty</span>        <span class="ot">-&gt;</span> best col ds
                <span class="dt">Char</span> c       <span class="ot">-&gt;</span> c <span class="fu">:</span>  best (col <span class="fu">+</span> <span class="dv">1</span>) ds
                <span class="dt">Text</span> s       <span class="ot">-&gt;</span> s <span class="fu">++</span> best (col <span class="fu">+</span> length s) ds
                <span class="dt">Line</span>         <span class="ot">-&gt;</span> <span class="ch">&#39;\n&#39;</span> <span class="fu">:</span> best <span class="dv">0</span> ds
                a <span class="ot">`Concat`</span> b <span class="ot">-&gt;</span> best col (a<span class="fu">:</span>b<span class="fu">:</span>ds)
                a <span class="ot">`Union`</span> b  <span class="ot">-&gt;</span> nicest col (best col (a<span class="fu">:</span>ds))
                                           (best col (b<span class="fu">:</span>ds))
          best _ _ <span class="fu">=</span> <span class="st">&quot;&quot;</span>

          nicest col a b <span class="fu">|</span> (width <span class="fu">-</span> least) <span class="ot">`fits`</span> a <span class="fu">=</span> a
                         <span class="fu">|</span> otherwise                <span class="fu">=</span> b
                         <span class="kw">where</span> least <span class="fu">=</span> min width col</code></pre></div>
<ol start="6" style="list-style-type: decimal">
<li>Using Typeclasses</li>
</ol>
<p>其实typeclass和C++的模板特列化(concept)有点相似. 但是typeclass有运行的额外开销.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Eq</span> a <span class="kw">where</span>
  (<span class="fu">==</span>),<span class="ot"> (/=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>
  x <span class="fu">/=</span> y <span class="fu">=</span> not (x <span class="fu">==</span> y)
  x <span class="fu">==</span> y <span class="fu">=</span> not (x <span class="fu">/=</span> y)</code></pre></div>
<p>Overlapping instances</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Borked</span> a <span class="kw">where</span>
<span class="ot">  bork ::</span> a <span class="ot">-&gt;</span> <span class="dt">String</span>
  
<span class="kw">instance</span> <span class="dt">Borked</span> <span class="dt">Int</span> <span class="kw">where</span>
  bork <span class="fu">=</span> show
  
<span class="kw">instance</span> <span class="dt">Borked</span> (<span class="dt">Int</span>, <span class="dt">Int</span>) <span class="kw">where</span>
  bork (a, b) <span class="fu">=</span> bork a <span class="fu">++</span> <span class="st">&quot;, &quot;</span> <span class="fu">++</span> bork b
  
<span class="kw">instance</span> (<span class="dt">Borked</span> a, <span class="dt">Borked</span> b) <span class="ot">=&gt;</span> <span class="dt">Borked</span> (a, b) <span class="kw">where</span>
 bork (a, b) <span class="fu">=</span> <span class="st">&quot;&gt;&gt;&quot;</span> <span class="fu">++</span> bork a <span class="fu">++</span> <span class="st">&quot; &quot;</span> <span class="fu">++</span> bork b <span class="fu">++</span> <span class="st">&quot;&lt;&lt;&quot;</span></code></pre></div>
<p>这个有点像C++的template specialization. 当然C++当中会使用最specific的template定义. 而Haskell则默认会拒绝自动选择一个定义, 除非使用了OverlappingInstances, TypeSynonymInstances这两个language extension.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE TypeSynonymInstances, OverlappingInstances #-}</span>

<span class="kw">import </span><span class="dt">Data.List</span>

<span class="kw">class</span> <span class="dt">Foo</span> a <span class="kw">where</span>
<span class="ot">  foo ::</span> a <span class="ot">-&gt;</span> <span class="dt">String</span>
  
<span class="kw">instance</span> <span class="dt">Foo</span> a <span class="ot">=&gt;</span> <span class="dt">Foo</span> [a] <span class="kw">where</span>
  foo <span class="fu">=</span> concat <span class="fu">.</span> intersperse <span class="st">&quot;, &quot;</span> <span class="fu">.</span> map foo
  
<span class="kw">instance</span> <span class="dt">Foo</span> <span class="dt">Char</span> <span class="kw">where</span>
  foo c <span class="fu">=</span> [c]
  
<span class="kw">instance</span> <span class="dt">Foo</span> <span class="dt">String</span> <span class="kw">where</span>
  foo <span class="fu">=</span> id</code></pre></div>
<p>Monomorphism restriction的原因是Haskell当中typeclass参数其实在运行时是需要有一个参数来代表具体instance的实现. (虚表?) 于是如果没有这个Monomorphism, 有的计算就有可能不得不进行2次, 因为编译器在编译一段代码的时候不能做出只算一次的决定.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f xs <span class="fu">=</span> (len, len)
  <span class="kw">where</span> len <span class="fu">=</span> genericLength xs</code></pre></div>
<p>这段代码当中, f的类型应该是</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Num</span> t <span class="ot">=&gt;</span> [b] <span class="ot">-&gt;</span> (t, t)</code></pre></div>
<p>如果我们想要使得f的类型中t代表不同的类型:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> (<span class="dt">Num</span> b, <span class="dt">Num</span> c) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> (b, c)
f xs <span class="fu">=</span> (len, len)
  <span class="kw">where</span> len <span class="fu">=</span> genericLength xs</code></pre></div>
<p>则会出现编译错误, 因为编译器觉得这里要进行两次对len的计算, 而这是Hughes认为不对的, 至少不能是默认的行为.</p>
<p>解决这个错误的方法有几个:</p>
<ul>
<li>给函数参数显式binding</li>
<li>给函数加上适当的类型签名</li>
<li>加上{-# LANGUAGE NoMonomorphismRestriction #-}</li>
</ul>
<ol start="7" style="list-style-type: decimal">
<li>I/O</li>
</ol>
<p>I/O在Haskell里是比较神奇的东西:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> writefoo <span class="fu">=</span> putStrLn <span class="st">&quot;foo&quot;</span></code></pre></div>
<p>这段代码不会输出“foo”, 而是把putStrLn “foo”这个I/O computation绑定到writefoo. 所以这里的代码就像数据一样. “Code is data, data is code”.</p>
<p>但是这段代码放在另外一个I/O action里就会被执行.</p>
<p>同样, 在ghci里也会被执行, 原因是ghci其实是在I/O monad中执行.</p>
<p>openFile, hPutStrLn, hPrint, putStrLn, hClose</p>
<p>hSeek, hTell, AbsoluteSeek, RelativeSeek, hIsSeekable</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
  inh <span class="ot">&lt;-</span> openFile <span class="st">&quot;input.txt&quot;</span> <span class="dt">ReadMode</span>
  seekable <span class="ot">&lt;-</span> hIsSeekable inh
  hSeek inh <span class="dt">RelativeSeek</span> <span class="dv">1</span>
  line <span class="ot">&lt;-</span> hGetLine inh
  putStrLn line
  hClose inh</code></pre></div>
<p>System.Directory</p>
<p>removeFile, renameFile</p>
<p>openTempFile, openBinaryTempFile</p>
<p>System.Directory.getTemporaryDirectory</p>
<p>hGetContents因为lazy evaluation所以在读大文件的时候不会有内存不够的问题(视情况)</p>
<p>readFile, writeFile</p>
<p>interact :: (String -&gt; String) -&gt; IO ()</p>
<p>System.Environment.getArgs System.Environment.getProgName System.Environment.genEnv</p>
<ol start="8" style="list-style-type: decimal">
<li>Efficient File Processing, Regular Expressions, and Filename Matching</li>
</ol>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">L</span>

<span class="ot">hasElfMagic ::</span>  <span class="dt">L.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
hasElfMagic content <span class="fu">=</span> L.take <span class="dv">4</span> content <span class="fu">==</span> elfMagic
  <span class="kw">where</span> elfMagic <span class="fu">=</span> L.pack [<span class="bn">0x7f</span>, <span class="bn">0x45</span>, <span class="bn">0x4c</span>, <span class="bn">0x46</span>]

<span class="ot">isElfFile ::</span>  FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Bool</span>
isElfFile path <span class="fu">=</span> <span class="kw">do</span>
  content <span class="ot">&lt;-</span> L.readFile path
  return (hasElfMagic content)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.IO</span>
<span class="kw">import </span><span class="dt">Control.Applicative</span>
<span class="kw">import </span><span class="dt">Data.List</span>

<span class="kw">import qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">B</span>
<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">C</span>

main <span class="fu">=</span> <span class="kw">do</span> inh <span class="ot">&lt;-</span> openFile <span class="st">&quot;data.txt&quot;</span> <span class="dt">ReadMode</span>
          content <span class="ot">&lt;-</span> B.hGetContents inh
          putStrLn <span class="fu">$</span> (show <span class="fu">.</span> foldl (liftA2 (<span class="fu">+</span>)) (<span class="dt">Just</span> <span class="dv">0</span>) <span class="fu">.</span> (map (fmap fst <span class="fu">.</span> C.readInt)) <span class="fu">.</span> C.lines) content</code></pre></div>
<p>为何以上程序在解释模式下, 比python更慢?</p>
<p>Regular Expressions</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Text.Regex.Posix.Wrap</span>
<span class="fu">:</span>t (<span class="fu">=~</span>)
(<span class="fu">=~</span>)
<span class="ot">  ::</span> (<span class="dt">Text.Regex.Base.RegexLike.RegexContext</span> <span class="dt">Regex</span> source1 target,
      <span class="dt">Text.Regex.Base.RegexLike.RegexMaker</span>
        <span class="dt">Regex</span> <span class="dt">CompOption</span> <span class="dt">ExecOption</span> source) <span class="ot">=&gt;</span>
     source1 <span class="ot">-&gt;</span> source <span class="ot">-&gt;</span> target</code></pre></div>
<ol start="9" style="list-style-type: decimal">
<li>I/O Case Study: A Library for Searching the Filesystem</li>
</ol>
<p>Control.Exception</p>
<p>bracket :: IO a -&gt; (a -&gt; IO b) -&gt; (a -&gt; IO c) -&gt; IO c</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">getFileSize path <span class="fu">=</span> handle (\_ <span class="ot">-&gt;</span> return <span class="dt">Nothing</span>) <span class="fu">$</span>
  bracket (openFile path <span class="dt">ReadMode</span>) hClose <span class="fu">$</span> \h <span class="ot">-&gt;</span> <span class="kw">do</span>
    size <span class="ot">&lt;-</span> hFileSize h
    return (<span class="dt">Just</span> size)</code></pre></div>
<p>eDSL</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">InfoP</span> a <span class="fu">=</span> FilePath
            <span class="ot">-&gt;</span> <span class="dt">Permissions</span>
            <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Integer</span>
            <span class="ot">-&gt;</span> <span class="dt">ClockTime</span>
            <span class="ot">-&gt;</span> a
<span class="ot">pathP ::</span> <span class="dt">InfoP</span> FilePath</code></pre></div>
<p>这样我们就能构造各种类型的Predicate/Extractor</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">sizeP ::</span> <span class="dt">InfoP</span> <span class="dt">Integer</span> <span class="co">-- 输入FilePath的信息, 返回Integer的函数类型</span>
sizeP _ _ (<span class="dt">Just</span> size) _ <span class="fu">=</span> size
sizeP _ _ <span class="dt">Nothing</span> _ <span class="fu">=</span> <span class="fu">-</span><span class="dv">1</span></code></pre></div>
<p>这是一个Extractor</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">equalP ::</span> (<span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">InfoP</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">InfoP</span> <span class="dt">Bool</span>
equalP f k <span class="fu">=</span> \w x y z <span class="ot">-&gt;</span> f w x y z <span class="fu">==</span> k</code></pre></div>
<p>这是一个Predicate</p>
<p>当然也可以写成</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">equalP&#39; ::</span> (<span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">InfoP</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">InfoP</span> <span class="dt">Bool</span>
equalP&#39; f k w x y z <span class="fu">=</span> f w x y z <span class="fu">==</span> k</code></pre></div>
<p>我们还可以继续抽象:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">liftP ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> <span class="dt">InfoP</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">InfoP</span> c
liftP q f k w x y z <span class="fu">=</span> f w x y z <span class="ot">`q`</span> k

greaterP,<span class="ot"> lesserP ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> <span class="dt">InfoP</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">InfoP</span> <span class="dt">Bool</span>
greaterP <span class="fu">=</span> liftP (<span class="fu">&gt;</span>)
lesserP <span class="fu">=</span> liftP (<span class="fu">&lt;</span>)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">liftPath ::</span> (FilePath <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">InfoP</span> a
liftPath f w _ _ _ <span class="fu">=</span> f w</code></pre></div>
<ol start="28" style="list-style-type: decimal">
<li>Software Transactional Memory</li>
</ol>
<p>传统的并发是基于锁和条件变量的, 而使用过程中会有各种问题:</p>
<ul>
<li>忘了锁的释放</li>
<li>加锁顺序的问题导致思索</li>
<li>异常处理</li>
<li>忘了唤醒等待线程</li>
</ul>
<p>STM代表一个事务, 他们之间可以组合, 并且最终通过atomically在IO monad中执行, 而STM之间的执行是相互分离的.</p>
<p>一个STM完成时, 会发生这几件事之一:</p>
<ul>
<li><p>如果其他线程没有对STM修改的数据进行修改, 则STM的修改同时生效</p></li>
<li><p>否则, STM会重启</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Item</span> <span class="fu">=</span> <span class="dt">Scroll</span>
          <span class="fu">|</span> <span class="dt">Wand</span>
          <span class="fu">|</span> <span class="dt">Banjo</span>
            <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>, <span class="dt">Show</span>)

<span class="kw">newtype</span> <span class="dt">Gold</span> <span class="fu">=</span> <span class="dt">Gold</span> <span class="dt">Int</span>
    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>, <span class="dt">Show</span>, <span class="dt">Num</span>)

<span class="kw">newtype</span> <span class="dt">HitPoint</span> <span class="fu">=</span> <span class="dt">HitPoint</span> <span class="dt">Int</span>
    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>, <span class="dt">Show</span>, <span class="dt">Num</span>)

<span class="kw">type</span> <span class="dt">Inventory</span> <span class="fu">=</span> <span class="dt">TVar</span> [<span class="dt">Item</span>]
<span class="kw">type</span> <span class="dt">Health</span> <span class="fu">=</span> <span class="dt">TVar</span> <span class="dt">HitPoint</span>
<span class="kw">type</span> <span class="dt">Balance</span> <span class="fu">=</span> <span class="dt">TVar</span> <span class="dt">Gold</span>

<span class="kw">data</span> <span class="dt">Player</span> <span class="fu">=</span> <span class="dt">Player</span> {
<span class="ot">    balance ::</span> <span class="dt">Balance</span>,
<span class="ot">    health ::</span> <span class="dt">Health</span>,
<span class="ot">    inventory ::</span> <span class="dt">Inventory</span>
}</code></pre></div>
<p>一些API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">atomically ::</span> <span class="dt">STM</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a

<span class="ot">newTVar ::</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> (<span class="dt">TVar</span> a)

<span class="ot">readTVar ::</span> <span class="dt">TVar</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> a

<span class="ot">writeTVar ::</span> <span class="dt">TVar</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> ()

<span class="ot">retry ::</span> <span class="dt">STM</span> a</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">transfer ::</span> <span class="dt">Gold</span> <span class="ot">-&gt;</span> <span class="dt">Balance</span> <span class="ot">-&gt;</span> <span class="dt">Balance</span> <span class="ot">-&gt;</span> <span class="dt">STM</span> ()

transfer qty fromBal toBal <span class="fu">=</span> <span class="kw">do</span>
  fromQty <span class="ot">&lt;-</span> readTVar fromBal
  when (qty <span class="fu">&gt;</span> fromQty) <span class="fu">$</span>
    retry
  writeTVar fromBal (fromQty <span class="fu">-</span> qty)
  readTVar toBal <span class="fu">&gt;&gt;=</span> writeTVar toBal <span class="fu">.</span> (qty <span class="fu">+</span>)</code></pre></div>
<p>retry在重启一个STM的时候, 会阻塞在之前改变的TVar上, 直到其中一个有改变.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">orElse ::</span> <span class="dt">STM</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> a</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">someAction ::</span> <span class="dt">IO</span> a

<span class="ot">stmTransaction ::</span> <span class="dt">STM</span> (<span class="dt">IO</span> a)
stmTransaction <span class="fu">=</span> return someAction

<span class="ot">doSomething ::</span> <span class="dt">IO</span> a
doSomething <span class="fu">=</span> join (atomically stmTransaction)</code></pre></div>
<p>也可以在STM中进行IO操作</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">unsafeIOToSTM ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> a</code></pre></div>
<p>但是用了它STM存在的意义就少了一半了.</p>
<p>Pattern guards</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE PatternGuards #-}</span>
testme x xs <span class="fu">|</span> <span class="dt">Just</span> y <span class="ot">&lt;-</span> lookup x xs, y <span class="fu">&gt;</span> <span class="dv">3</span> <span class="fu">=</span> y <span class="fu">|</span> otherwise <span class="fu">=</span><span class="dv">0</span></code></pre></div>
<p>Invariant</p>
<p>STM存在的意义在于, 我们能够更容易地写出保持invariant的代码.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">alwaysSucceeds ::</span> <span class="dt">STM</span> a <span class="ot">-&gt;</span> <span class="dt">STM</span> ()</code></pre></div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 31 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2014-01-31-real-world-haskell.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>2014新年计划</title>
    <link>http://blog.fantasticsid.com/posts/2014-01-01-2014-resolutions.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>2014新年计划</h1>
                    
                    <span class="meta">
		    
			January  1, 2014
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>今年还是要继续C++, Haskell, Algorithms, Distributed Systems, High Throughput, Low Latency, Compiler, Type Systems</p>
<pre><code>Fritz: Haskell实现的简单pubsub server

Persist: C++的persistent data structure

RapLisp: 基于LLVM的lisp编译器

Filter: C++实现的基于Cap&#39;n Proto的Query matching library

Topcoder的rating上1500
</code></pre>
<p>去年的完成情况, 还是不太好, 按照0-5打分:</p>
<pre><code>深入研究Haskell, wiki上的页面基本都要有个了解, 能用Haskell写高效后台应用. 3 (写了LilyLisp)

深入研究C++, 熟练应用模版, C++ 11的高级特性. 3
(由于是工作语言, 所以这一年进步还是有的.
对模板了解了不少 - type level purely functional programming.
但是对C++11还是不了解.)

看CLRS, PFDS刷一下各种OJ, interviewstreet什么的. 5
</code></pre>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Wed, 01 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2014-01-01-2014-resolutions.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Parallel and Concurrent Programming in Haskell 笔记</title>
    <link>http://blog.fantasticsid.com/posts/2013-10-06-parallel-concurrent-haskell.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Parallel and Concurrent Programming in Haskell 笔记</h1>
                    
                    <span class="meta">
		    
			October  6, 2013
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<ol style="list-style-type: decimal">
<li>Introduction</li>
</ol>
<p>介绍了并行计算和多线程计算的概念和区别. Haskell里面并行计算是有确定执行结果的(deterministic), 并且提供了Eval Monad, Par Monad, 以及如repa和accelerate等库. 而多线程计算则有MVar, STM, actor等的支持.</p>
<ol start="2" style="list-style-type: decimal">
<li>Basic Parallelism: The Eval Monad</li>
</ol>
<p>Eval Monad. 既然是Monad, 那么从计算的角度看, 应该是应该是包含了对一个普通计算如何并行的一个Context. 所以构造Eval Monad实例的过程就可以看成是构造并行Context的过程.</p>
<p>Haskell中的表达式都是惰性求值的, 程序当中的表达式运行时的表示也是通过thunk实现的. 即使是1 + 2这样简单的表达式, 也是惰性的.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> <span class="dv">1</span> <span class="fu">+</span> <span class="dv">2</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>sprint x
x <span class="fu">=</span> _
<span class="dt">Prelude</span><span class="fu">&gt;</span></code></pre></div>
<p>Haskell的seq函数将一个表达式求值到WHNF (weak head normal form), 而WHNF粗略地讲, 就是一个数据结构的constructor.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> swap (x, y) <span class="fu">=</span> (y, x)
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> <span class="dv">1</span> <span class="fu">+</span> <span class="dv">2</span>
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> z <span class="fu">=</span> swap(x, x <span class="fu">+</span> <span class="dv">1</span>)
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>sprint z
z <span class="fu">=</span> _
<span class="dt">Prelude</span><span class="fu">&gt;</span> seq z ()
()
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>sprint z
z <span class="fu">=</span> (_,_)
<span class="dt">Prelude</span><span class="fu">&gt;</span></code></pre></div>
<p>这里表达式z在seq之后, 被evaluate到第一个constructor, 也就是(,)</p>
<p>一个更复杂的例子, 考虑map函数:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">map<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]
map f [] <span class="fu">=</span> []
map f (x<span class="fu">:</span>xs) <span class="fu">=</span> f x <span class="fu">:</span> map f xs</code></pre></div>
<p>这里如果有表达式:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="kw">let</span> xs <span class="fu">=</span> map (<span class="fu">+</span> <span class="dv">1</span>) [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>sprint xs
xs <span class="fu">=</span> _
<span class="dt">Prelude</span><span class="fu">&gt;</span> seq xs ()
()
<span class="dt">Prelude</span><span class="fu">&gt;</span> <span class="fu">:</span>sprint xs
xs <span class="fu">=</span> _ <span class="fu">:</span> _
<span class="dt">Prelude</span><span class="fu">&gt;</span></code></pre></div>
<p>这里表达式xs进行seq求值之后, 只求值到第一个constructor, 也就是(:)</p>
<p>Eval Monad</p>
<p>和State Monad等类似, Eval Monad有一些基本的combinator</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">runEval ::</span> <span class="dt">Eval</span> a <span class="ot">-&gt;</span> a

<span class="ot">rpar ::</span> a <span class="ot">-&gt;</span> <span class="dt">Eval</span> a
<span class="ot">rseq ::</span> a <span class="ot">-&gt;</span> <span class="dt">Eval</span> a</code></pre></div>
<p>关于rpar, rseq有一些管用用法, 可以精准控制是否等待表达式求值完成后返回. (rpar表示可以并行, 而rseq等待表达式完成后才返回.) 而最常用的一个用法是:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">runEval <span class="fu">$</span> <span class="kw">do</span>
  a <span class="ot">&lt;-</span> rpar (f x)
  b <span class="ot">&lt;-</span> rpar (f y)
  rseq a
  rseq b
  return (a, b)</code></pre></div>
<p>这种用法中, f x和f y并行求值, 但是整个表达式(a, b)在这两个运算完成后才返回.</p>
<p>并行数独, 这个例子演示了如何用Eval Monad并行计算若干个数独问题的解.</p>
<p>值得注意的是, 代码中:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">solutions <span class="fu">=</span> runEval <span class="fu">$</span> <span class="kw">do</span>
              as&#39; <span class="ot">&lt;-</span> rpar (force (map solve as))
              bs&#39; <span class="ot">&lt;-</span> rpar (force (map solve bs))
              rseq as&#39;
              rseq bs&#39;
              return (as&#39; <span class="fu">++</span> bs&#39;)</code></pre></div>
<p>这里如果省略掉了force, 那么map solve as只会求值到WHNF, 也就是第一个(:)就结束了.</p>
<p>这事实上会导致返回的表达式在最终计算数独解法个数的时候:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">print (length (filter isJust solutions))</code></pre></div>
<p>才被真正的计算出来. 这样就失去了用Eval Monad进行并行化的意义了.</p>
<p>而force将一个表达式求值为NF (normal form).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">force ::</span> <span class="dt">NFData</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</code></pre></div>
<p>parMap: 为了增加并行的粒度</p>
<p>它的定义十分直接:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">parMap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Eval</span> [b]
parMap f [] <span class="fu">=</span> return
parMap f (a<span class="fu">:</span>as) <span class="fu">=</span> <span class="kw">do</span>
  b <span class="ot">&lt;-</span> rpar (f a)
  bs <span class="ot">&lt;-</span> parMap f as
  return (b<span class="fu">:</span>bs)</code></pre></div>
<p>每一次使用rpar的时候, 我们都在创建spark, 这些spark在系统的一个spark池中. 而它们最终可能有多种结果:</p>
<ul>
<li>overflowed</li>
</ul>
<p>spark太多, spark pool放不下</p>
<ul>
<li>dud</li>
</ul>
<p>表达式已经被求值</p>
<ul>
<li>GC’d</li>
</ul>
<p>程序运行的时候并没有用到这个表达式</p>
<ul>
<li>fizzled</li>
</ul>
<p>表达式创建的时候并没有被求值, 但是之后程序的其余部分对其进行了求值. 这些spark也会被清理掉</p>
<p>在sudoku的例子当中, 程序开始时读入数据分割行的部分不能并行化. 这也是并行加速度不能无限制上升的原因之一. (Amdahl’s law) 另一方面, Haskell的惰性求值使得数据一旦部分读入, 就可以开始处理, 而不必等到整个列表都生成以后才开始计算.</p>
<p>Deepseq</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">force ::</span> <span class="dt">NFData</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</code></pre></div>
<p>force函数使得一个表达式求值为normal form.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">NFData</span> a <span class="kw">where</span>
<span class="ot">  rnf ::</span> a <span class="ot">-&gt;</span> ()
  rnf a <span class="fu">=</span> a <span class="ot">`seq`</span> ()</code></pre></div>
<p>性能上, 对于一个表达式/数据结构, 求值到normal form通常要遍历整个结构, 所以复杂度是O(n)的, n是数据结构的大小. 而如果是seq, 则是常数复杂度的操作.</p>
<ol start="7" style="list-style-type: decimal">
<li>Basic Concurrency: Threads and MVars</li>
</ol>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">forkIO ::</span> <span class="dt">IO</span> () <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ThreadId</span></code></pre></div>
<p>这个API产生的是一个lightweight thread. 如果要系统线程, 则要用forkOS.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Concurrent</span>
<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">System.IO</span>

main <span class="fu">=</span> <span class="kw">do</span>
  hSetBuffering stdout <span class="dt">NoBuffering</span>
  forkIO (replicateM_ <span class="dv">10</span> (putChar <span class="ch">&#39;A&#39;</span> <span class="fu">&gt;&gt;</span> threadDelay <span class="dv">1000000</span>))
  replicateM_ <span class="dv">10</span> (putChar <span class="ch">&#39;B&#39;</span> <span class="fu">&gt;&gt;</span> threadDelay <span class="dv">1000000</span>)</code></pre></div>
<p>这里使用threadDelay的原因是threaDelay是合适Haskell lightweight thread的API. 如果使用sleep, 因为GHC的内部时钟是使用操作系统的signal的, 会导致sleep的系统调用立刻返回. 而且即使禁止了RTS timer, 也必须在OS thread中调用sleep, 否则会阻塞其他的线程. threadDelay就不会有这些限制. 我的理解是, 只有和原生的库互操作时, 才可能需要用到sleep.</p>
<p>Haskell的线程默认情况下, main返回的时候就会结束. 也就是说他们默认都是daemon thread, 除了main所在的线程.</p>
<p>Haskell线程之间通讯可以用MVar</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">MVar</span> a
<span class="ot">newEmptyMVar ::</span> <span class="dt">IO</span> (<span class="dt">MVar</span> a)
<span class="ot">newMVar ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">MVar</span> a)
<span class="ot">takeMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
<span class="ot">putMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div>
<p>这里MVar的API设计与后面的STM TVar的设计很像, 但是不能像TVar那样进行组合.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  forkIO <span class="fu">$</span> putMVar m <span class="ch">&#39;x&#39;</span>
  r <span class="ot">&lt;-</span> takeMVar m
  print r</code></pre></div>
<p>MVar可以作为线程之间通讯的一种方法. 奇妙的是, 如果发生死锁, Haskell的runtime会检测到并且抛出异常.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Concurrent</span>

main <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  takeMVar m</code></pre></div>
<p>所以总结下来, MVar可以看做是一个容量为1的channel, 可以用作线程间通讯, Haskell里面多个线程需要操作一个状态的时候, 可以把这个状态放在MVar里面, 这样takeMVar的时候就获得了状态并且对其加锁. putMVar的时候就更新了状态并且解锁, 当然, 也可以用MVar ()来代表一个锁.</p>
<p>MVar是Haskell里面并发数据结构的基本构件.</p>
<p>用MVar可以构建出一个logging service:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Logger</span> <span class="fu">=</span> <span class="dt">Logger</span> (<span class="dt">MVar</span> <span class="dt">LogCommand</span>)
<span class="kw">data</span> <span class="dt">LogCommand</span> <span class="fu">=</span> <span class="dt">Message</span> <span class="dt">String</span> <span class="fu">|</span> <span class="dt">Stop</span> (<span class="dt">MVar</span> ())

<span class="ot">initLogger ::</span> <span class="dt">IO</span> <span class="dt">Logger</span>
initLogger <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  <span class="kw">let</span> l <span class="fu">=</span> <span class="dt">Logger</span> m
  forkIO (logger l)
  return l

<span class="ot">logger ::</span> <span class="dt">Logger</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
logger (<span class="dt">Logger</span> m) <span class="fu">=</span> loop
  <span class="kw">where</span>
    loop <span class="fu">=</span> <span class="kw">do</span>
    <span class="kw">case</span> cmd <span class="kw">of</span>
      <span class="dt">Message</span> msg <span class="ot">-&gt;</span> <span class="kw">do</span>
        putStrLn msg
        loop
      <span class="dt">Stop</span> s <span class="ot">-&gt;</span> <span class="kw">do</span>
        putStrLn <span class="st">&quot;logger: stop&quot;</span>
        putMVar s ()

<span class="ot">logMessage ::</span> <span class="dt">Logger</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
logMessage (<span class="dt">Logger</span> m) s <span class="fu">=</span> putMVar m (<span class="dt">Message</span> s)

<span class="ot">logStop ::</span> <span class="dt">Logger</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
logStop (<span class="dt">Logger</span> m) <span class="fu">=</span> <span class="kw">do</span>
  s <span class="ot">&lt;-</span> newEmptyMVar
  putMVar m (<span class="dt">Stop</span> s)
  takeMVar s</code></pre></div>
<p>如果不用MVar, 以上的logging service用C++实现要用到Lock, Condition Variable. MVar可以作为Lock(takeMVar, putMVar), 也可以作为Condition Variable(takeMVar阻塞直到有线程putMVar).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Name</span> <span class="fu">=</span> <span class="dt">String</span>
<span class="kw">type</span> <span class="dt">PhoneNumber</span> <span class="fu">=</span> <span class="dt">String</span>
<span class="kw">type</span> <span class="dt">PhoneBook</span> <span class="fu">=</span> <span class="dt">Map</span> <span class="dt">Name</span> <span class="dt">PhoneNumber</span>

<span class="kw">newtype</span> <span class="dt">PhoneBookState</span> <span class="fu">=</span> <span class="dt">PhoneBookState</span> (<span class="dt">MVar</span> <span class="dt">PhoneBook</span>)</code></pre></div>
<p>这里PhoneBookState可以在export的时候以抽象的形式出现.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">insert ::</span> <span class="dt">PhoneBookState</span> <span class="ot">-&gt;</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> <span class="dt">Phone</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
insert (<span class="dt">PhoneBookState</span> m) name number <span class="fu">=</span> <span class="kw">do</span>
  book <span class="ot">&lt;-</span> takeMVar m
  putMVar m (Map.insert name number book)

lookup<span class="ot"> ::</span> <span class="dt">PhoneBookState</span> <span class="ot">-&gt;</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">PhoneNumber</span>)
lookup (<span class="dt">PhoneBookState</span> m) name <span class="fu">=</span> <span class="kw">do</span>
  book <span class="ot">&lt;-</span> takeMVar m
  putMVar m book
  return (Map.lookup name book)</code></pre></div>
<p>这里注意, 我们的查找事实上是在takeMVar, putMVar之后发生. 这对于提高并发是一件好事. 当然, 这得益于Map是immutable data structure这一事实, 否则我们就必须在持有锁期间进行查找.</p>
<p>另外一点值得注意点是, putMVar m (Map.insert name number book)之后, m里面是一个thunk. 如果我们要减少space leak, 需要:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">putMVar m <span class="fu">$!</span> Map.insert name number book</code></pre></div>
<p>但是这样, Map.insert就要在putMVar之前执行完. 如果我们既要减少space leak, 又要使得持有锁的时间尽量短, 可以这样做:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> book&#39; <span class="fu">=</span> Map.insert name number book
putMVar m book&#39;
seq book&#39; (return ())</code></pre></div>
<p>这里我感觉, 在极端情况下, putMVar之后, 在seq之前, 如果有其他线程获得这个MVar, 那么一致性就要依靠下面的thunk如何保持一致性了.</p>
<p>Unbounded Channels</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Chan</span> a

<span class="ot">newChan ::</span> <span class="dt">IO</span> (<span class="dt">Chan</span> a)
<span class="ot">readChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
<span class="ot">writeChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div>
<p>这里再次注意这个API和MVar, TVar的API之间的相似性.</p>
<p>Channel有相对复杂的结构:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Stream</span> a <span class="fu">=</span> <span class="dt">MVar</span> (<span class="dt">Item</span> a)
<span class="kw">data</span> <span class="dt">Item</span> a <span class="fu">=</span> <span class="dt">Item</span> a (<span class="dt">Stream</span> a)

<span class="kw">data</span> <span class="dt">Chan</span> a <span class="fu">=</span> <span class="dt">Chan</span> (<span class="dt">MVar</span> (<span class="dt">Stream</span> a)) (<span class="dt">MVar</span> (<span class="dt">Stream</span> a))</code></pre></div>
<p>Chan有两个MVar包含有两个Stream, 分别用作read pointer和write pointer.</p>
<p>创建一个新的Channel时, 只需要创建一个新的空Stream:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">newChan ::</span> <span class="dt">IO</span> (<span class="dt">Chan</span> a)
newChan <span class="fu">=</span> <span class="kw">do</span>
  hole <span class="ot">&lt;-</span> newEmptyMVar
  readVar <span class="ot">&lt;-</span> newMVar hole
  writeVar <span class="ot">&lt;-</span> newMVar hole
  return (<span class="dt">Chan</span> readVar writeVar)</code></pre></div>
<p>加入一个新元素, 我们需要构建一个新的Item, 然后让其后继结点指向当前write pointer, 然后调整write pointer. 这里和链表头插入新元素一样, 但是要注意concurrent safety:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">writeChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
writeChan (<span class="dt">Chan</span> _ writeVar) val <span class="fu">=</span> <span class="kw">do</span>
  newHole <span class="ot">&lt;-</span> newEmptyMVar
  oldHole <span class="ot">&lt;-</span> takeMVar writeVar
  putMVar oldHole (<span class="dt">Item</span> val newHole)
  putMVar writeVar newHole</code></pre></div>
<p>而拿出一个元素的代码:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readChan (<span class="dt">Chan</span> readVar _) <span class="fu">=</span> <span class="kw">do</span>
  stream <span class="ot">&lt;-</span> takeMVar readVar
  <span class="dt">Item</span> val tail <span class="ot">&lt;-</span> takeMVar stream
  putMVar readVar tail
  return val</code></pre></div>
<p>就writeChan, readChan来说, 代码并不复杂. 但是我们写的是concurrent code, 所以要注意是否线程安全.</p>
<p>当Channel是空的时候, readChan的第二个takeMVar会block, 直到有其他线程writeChan. 这里由于是空Channel, 所以read pointer和write pointer指向的是同一个MVar. 第一个线程阻塞时, 第二个线程可以putMVar, 从而第一个线程得以继续. 这里的极端情况, 即使是writeChan刚写入空Channel的第一个元素时, readChan读出第一个元素, 也是正确的. read pointer, write pointer保证了同时只有一个read, write操作(这里其实2个操作都是read write, 而不是read only, write only), 但是read, write可以同时存在.</p>
<p>对以上实现稍加修改, 可以得到multicast channel:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">dupChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Chan</span> a)
dupChan (<span class="dt">Chan</span> _ writeVar) <span class="fu">=</span> <span class="kw">do</span>
  hole <span class="ot">&lt;-</span> readMVar writeVar
  newReadVar <span class="ot">&lt;-</span> newMVar hole
  return (<span class="dt">Chan</span> newReadVar writeVar)

<span class="ot">readMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readMVar m <span class="fu">=</span> <span class="kw">do</span>
  a <span class="ot">&lt;-</span> takeMVar m
  putMVar m a
  return a</code></pre></div>
<p>也就是, 新的channel和以前的channel共用了同一个write pointer, 但是read pointer仍然是分开的. 但是, 这里的一个问题是, 我们在实现readChan的时候使用了takeMVar stream. 这样, 指向这个Item的MVar就是空的了. 所以我们应该要做如下更改:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readChan (<span class="dt">Chan</span> readVar _) <span class="fu">=</span> <span class="kw">do</span>
  stream <span class="ot">&lt;-</span> takeMVar readVar
  <span class="dt">Item</span> val tail <span class="ot">&lt;-</span> readMVar stream
  putMVar readVar tail
  return val</code></pre></div>
<p>我们还可以继续丰富channel的API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">unGetChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
unGetChan (<span class="dt">Chan</span> readVar _) val <span class="fu">=</span> <span class="kw">do</span>
  newReadEnd <span class="ot">&lt;-</span> newEmptyMvar
  readEnd <span class="ot">&lt;-</span> takeMVar readVar
  putMVar newReadEnd (<span class="dt">Item</span> val readEnd)
  putMVar readVar newReadEnd</code></pre></div>
<p>但是这个函数与readChan, 在channel为空的时候会死锁: readChan得到了readVar, 然后阻塞在stream上. 而unGetChan阻塞在readVar上. 理想情况下, 应该是unGetChan成功返回然后readChan也返回.</p>
<p>到这里, 我们发现, 使用MVar构建跟更高层的并发数据结构时需要考虑的情况变得越来越多了.</p>
<p>GHC保证, 只要没有线程一直获取一个MVar不释放, 那么在一个MVar上等待的线程不会永远阻塞. GHC会用一个queue保存一个MVar上等待的线程, 无论是putMVar还是takeMVar. 这里书上还提到了实现里的一个注意点: 当MVar上有值之后, 仅仅唤醒一个FIFO队列的第一个线程是不够的, 因为这时可能有另外一个线程正在运行从而获得这个MVar的控制权. 正确的做法是, 原子性地唤醒第一个等待的线程并且完成这个线程阻塞的MVar操作.</p>
<p>线程公平性</p>
<p>stdout这个文件描述符是用一个MVar表示的. 所以开始时, 两个不断输出字符的线程会交替输出, 原因是这两个线程交替在FIFO队列的队末进行等待.</p>
<p>这个实现的好处是: 多个线程阻塞在同一个MVar上时, 如果有一个putMVar/takeMVar使得这些线程能够继续, 则只有一个线程被unblock. 而MVar的公平性, 以及这个单个线程唤醒的特性是使得MVar没有被STM完全取代的原因.</p>
<ol start="8" style="list-style-type: decimal">
<li>Overlapping Input/Output</li>
</ol>
<p>我们可以用MVar来进行线程间同步:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
  m1 <span class="ot">&lt;-</span> newEmptyMVar
  m2 <span class="ot">&lt;-</span> newEmptyMVar

  forkIO <span class="fu">$</span> <span class="kw">do</span>
    r <span class="ot">&lt;-</span> getURL <span class="st">&quot;http://www.google.com&quot;</span>
    putMVar m1 r

  forkIO <span class="fu">$</span> <span class="kw">do</span>
    r <span class="ot">&lt;-</span> getURL <span class="st">&quot;http://zhenchao.li&quot;</span>
    putMVar m2 r

  r1 <span class="ot">&lt;-</span> takeMVar m1
  r2 <span class="ot">&lt;-</span> takeMVar m2
  print (B.length r1, B.length r2)</code></pre></div>
<p>对其进行抽象, 我们需要异步执行一个计算, 并且得到计算的结果:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Async</span> a <span class="fu">=</span> <span class="dt">Async</span> (<span class="dt">MVar</span> a)

<span class="ot">async ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Async</span> a)
async action <span class="fu">=</span> <span class="kw">do</span>
  var <span class="ot">&lt;-</span> newEmptyMVar
  forkIO (<span class="kw">do</span> r <span class="ot">&lt;-</span> action; putMVar var r)
  return (<span class="dt">Async</span> var)

<span class="ot">wait ::</span> <span class="dt">Async</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
wait (<span class="dt">Async</span> var) <span class="fu">=</span> readMVar var</code></pre></div>
<p>要注意, 这里使用readMVar的原因是使得多个线程wait一个结果成为可能.</p>
<p>这样我们的程序就简化为:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
  a1 <span class="ot">&lt;-</span> async (getURL <span class="st">&quot;http://www.google.com&quot;</span>)
  a2 <span class="ot">&lt;-</span> async (getURL <span class="st">&quot;http://zhenchao.li&quot;</span>)
  r1 <span class="ot">&lt;-</span> wait a1
  r2 <span class="ot">&lt;-</span> wait a2
  print (B.length r1, B.length r2)</code></pre></div>
<p>Exceptions in Haskell</p>
<p>GHC对纯函数抛出的异常进行了一些拓展. 但是总的来说Haskell异常处理还不是十分一致的.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">throw ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> a</code></pre></div>
<p>Exception这个typeclass的定义:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> (<span class="dt">Typeable</span> e, <span class="dt">Show</span> e) <span class="ot">=&gt;</span> <span class="dt">Exception</span> e <span class="kw">where</span></code></pre></div>
<p>Typeable是:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Typeable</span> a <span class="kw">where</span>
<span class="ot">  typeOf ::</span> a <span class="ot">-&gt;</span> <span class="dt">TypeRep</span></code></pre></div>
<p>对于任何类型, 如果实现了Typeable的instance, 就能够得到一个TypeRep. 注意这里文档里说instance的实现需要忽略a的具体值, 以使得我们可以传undefined. (make sense啊make sense)..</p>
<p>ErrorCall是一个常用的Exception</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">ErrorCall</span> <span class="fu">=</span> <span class="dt">ErrorCall</span> <span class="dt">String</span>
  <span class="kw">deriving</span> (<span class="dt">Typeable</span>)

throw (<span class="dt">ErrorCall</span> <span class="st">&quot;oops!&quot;</span>)

<span class="co">-- 事实上, error的定义:</span>

error<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a
error s <span class="fu">=</span> throw (<span class="dt">ErrorCall</span> s)</code></pre></div>
<p>除此之外还有IOException.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">catch<span class="ot"> ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (e <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</code></pre></div>
<p>这里catch只捕获固定类型的Exception, 但是Exception是有层次关系的, 最顶层的是SomeException</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">throw (<span class="dt">ErrorCall</span> <span class="st">&quot;oops&quot;</span>) <span class="ot">`catch`</span> \e <span class="ot">-&gt;</span> print (<span class="ot">e ::</span> <span class="dt">SomeException</span>)</code></pre></div>
<p>这里需要说明, 捕获所有异常只有在调试, 以及做清理工作然后重新抛出异常这两种情况下是提倡做的, 不要吞掉异常.</p>
<p>另外常用的异常处理API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">try ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> e a)

<span class="ot">handle ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> (e <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a

<span class="ot">onException ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> a

<span class="co">-- 资源清理, 重新抛出异常</span>
onException io what <span class="fu">=</span>
 io <span class="ot">`catch`</span> \e <span class="ot">-&gt;</span> <span class="kw">do</span> _ <span class="ot">&lt;-</span> what
                     throwIO (<span class="ot">e ::</span> <span class="dt">SomeException</span>)

<span class="ot">throwIO ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> <span class="dt">IO</span> a</code></pre></div>
<p>在IO monad中, throwIO保证相对其他IO的顺序, 而throw则没有这个保证.</p>
<p>最后还有两个有用的API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bracket ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> c) <span class="ot">-&gt;</span> <span class="dt">IO</span> c
bracket before after during <span class="fu">=</span> <span class="kw">do</span>
  a <span class="ot">&lt;-</span> before
  c <span class="ot">&lt;-</span> during a <span class="ot">`onException`</span> after a <span class="co">-- 如果发生异常, 资源清理, 然后重新抛出</span>
  after a
  return c

<span class="ot">finally ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> a
finally io after <span class="fu">=</span> <span class="kw">do</span>
  io <span class="ot">`onException`</span> after
  after</code></pre></div>
<p>每一个forkIO都有一个默认异常处理handler, 它会输出这个异常然后退出线程. 如果我们希望能够在Async API当中得到另外一个线程的计算结果, 并且知道是否发生了异常, 我们需要进行修改:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Async</span> a <span class="fu">=</span> <span class="dt">Async</span> (<span class="dt">MVar</span> (<span class="dt">Either</span> <span class="dt">SomeException</span> a))

<span class="ot">async ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Async</span> a)
async action <span class="fu">=</span> <span class="kw">do</span>
  var <span class="ot">&lt;-</span> newEmptyMVar
  forkIO (<span class="kw">do</span> r <span class="ot">&lt;-</span> try action; putMVar var r)
  return (<span class="dt">Async</span> var)

<span class="ot">waitCatch ::</span> <span class="dt">Async</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">SomeException</span> a)
waitCatch (<span class="dt">Async</span> var) <span class="fu">=</span> readMVar var

<span class="ot">wait ::</span> <span class="dt">Async</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
wait a <span class="fu">=</span> <span class="kw">do</span>
  r <span class="ot">&lt;-</span> waitCatch a
  <span class="kw">case</span> r <span class="kw">of</span>
    <span class="dt">Left</span> e <span class="ot">-&gt;</span> throwIO e
    right a <span class="ot">-&gt;</span> return a</code></pre></div>
<p>等待最早的一个线程返回:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">waitAny ::</span> [<span class="dt">Async</span> a] <span class="ot">-&gt;</span> <span class="dt">IO</span> a
waitAny as <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  <span class="kw">let</span> forkwait a <span class="fu">=</span> forkIO <span class="fu">$</span> <span class="kw">do</span> r <span class="ot">&lt;-</span> try (wait a); putMVar m r
  mapM_ forwait as
  <span class="co">-- race condition?</span>
  <span class="co">-- readMVar is not atomic, could end up taking MVar and blocked at putting it back</span>
  wait (<span class="dt">Async</span> m)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="kw">let</span>
    download url <span class="fu">=</span> <span class="kw">do</span>
      r <span class="ot">&lt;-</span> getURL url
      return (url, r)

  as <span class="ot">&lt;-</span> mapM (async <span class="fu">.</span> download) sites

  (url, r) <span class="ot">&lt;-</span> waitAny as
  printf <span class="st">&quot;%s was first (%d bytes)\n&quot;</span> url (B.length r)
  mapM_ wait as</code></pre></div>
<p>值得注意的是, 这里的waitAny是可能发生死锁的, 原因是readMVar并不是原子操作. 这个结论在irc #haskell上得到了验证, 而且这里还有ticket要去实现原子的readMVar:</p>
<p><a href="https://ghc.haskell.org/trac/ghc/ticket/4001">Implement an atomic readMVar</a></p>
<ol start="9" style="list-style-type: decimal">
<li>Cancellation and Timeouts</li>
</ol>
<p>在考虑如何中断一个线程时, 需要解决的问题是应该让被中断的线程不断轮询还是被直接终止. 轮询不是一个好方法, 而直接终止意味着我们必须对一些状态进行保护. Haskell的好处是多数计算是纯的, 对于不纯的计算我们额外进行保护就可以.</p>
<p>Asynchronous Exception</p>
<p>一个例子是, 使用bracket进行资源获取 - 资源使用 - 资源释放这个模式. 这里bracket捕获的打开文件异常以及从其他线程的Cancellation导致的异常是不同的. 前者是Synchronous Exception, 使用throw, throwIO抛出. 后者是Asynchronous Exception, 使用throwTo.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">throwTo ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">ThreadId</span> <span class="ot">-&gt;</span> e <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div>
<p>这里ThreadId代表的线程可能处于running, blocked, finished之一的状态. 如果是finished, 则throwTo什么也不做.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Async</span> a <span class="fu">=</span> <span class="dt">Async</span> <span class="dt">ThreadId</span> (<span class="dt">MVar</span> (<span class="dt">Either</span> <span class="dt">SomeException</span> a))

<span class="ot">cancel ::</span> <span class="dt">Async</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
cancel (<span class="dt">Async</span> t var) <span class="fu">=</span> throwTo t <span class="dt">ThreadKilled</span>

<span class="ot">async ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Async</span> a)
async action <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  t <span class="ot">&lt;-</span> forkIO (<span class="kw">do</span> r <span class="ot">&lt;-</span> try action; putMVar m r)
  return (<span class="dt">Async</span> t m)

main <span class="fu">=</span> <span class="kw">do</span>
  as <span class="ot">&lt;-</span> mapM (async <span class="fu">.</span> timeDownload) sites
  
  forkIO <span class="fu">$</span> <span class="kw">do</span>
    hSetBuffering stdin <span class="dt">NoBuffering</span>
    forever <span class="fu">$</span> <span class="kw">do</span>
      c <span class="ot">&lt;-</span> getChar
      when (c <span class="fu">==</span> <span class="ch">&#39;q&#39;</span>) <span class="fu">$</span> mapM_ cancel as
  
  rs <span class="ot">&lt;-</span> mapM waitCatch as
  printf <span class="st">&quot;%d/%d succeeded\n&quot;</span> (length (rights rs)) (length rs)</code></pre></div>
<p>这里cancel的是一个线程, 但是在forkIO里面, 如果这个ThreadKilled的异常在try action里面发生, 则m这个MVar会被putMVar, 但是如果异常在putMVar m r之前发生, 又在try之后发生, 则会发生死锁, 这个问题书中进行了详细讨论:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">problem ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
problem m f <span class="fu">=</span> <span class="kw">do</span>
  a <span class="ot">&lt;-</span> takeMVar m
  r <span class="fu">&lt;</span> f a <span class="ot">`catch`</span> \e <span class="ot">-&gt;</span> <span class="kw">do</span> putMVar m a; throw e
  putMVar m r</code></pre></div>
<p>这里在takeMVar之后, putMVar之前, 都有可能发生asynchronous exception, 这个exception不会被当中的那个catch捕获.</p>
<p>Haskell提供了这样一个API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">mask ::</span> ((<span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> b) <span class="ot">-&gt;</span> <span class="dt">IO</span> b</code></pre></div>
<p>这样上面的代码就可以写成: <sub>~</sub> {.haskell} problem :: MVar a -&gt; (a -&gt; IO a) -&gt; IO () problem m f = mask $ -&gt; do a &lt;- takeMVar m r &lt;- restore (f a) <code>catch</code> -&gt; do putMVar m a; throw e putMVar m r <sub>~</sub></p>
<p>mask类型比较复杂. 我们是要把我们的一个IO b变成一个带额外参数(类型为(IO a -&gt; IO a)的函数)的IO b. 这样我们就可以在原来的IO b中, 调用这个额外参数来把我们不需要屏蔽asynchronous exception的IO恢复到没有屏蔽的状态.</p>
<p>注意Haskell(GHC)的实现里, takeMVar, putMVar都是可以被打断的(这里有比较复杂的细节).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">uninterruptibleMask ::</span> ((<span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> b) <span class="ot">-&gt;</span> <span class="dt">IO</span> b

<span class="ot">getMaskingState ::</span> <span class="dt">IO</span> <span class="dt">MaskingState</span>

<span class="kw">data</span> <span class="dt">MaskingState</span>
  <span class="fu">=</span> <span class="dt">Unmasked</span>
  <span class="fu">|</span> <span class="dt">MaskedInterruptible</span>
  <span class="fu">|</span> <span class="dt">MaskedUninterruptible</span></code></pre></div>
<p>我们对MVar的操作进行一下抽象, 有如下的API:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">modifyMVar_ ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
modifyMVar_ m io <span class="fu">=</span>
  mask <span class="fu">$</span> \restore <span class="ot">-&gt;</span> <span class="kw">do</span>
    a <span class="ot">&lt;-</span> takeMVar m
    a&#39; <span class="ot">&lt;-</span> restore (io a) <span class="ot">`onException`</span> putMVar m a
    putMVar m a&#39;

<span class="ot">modifyMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> (a,b)) <span class="ot">-&gt;</span> <span class="dt">IO</span> b
modifyMVar m io <span class="fu">=</span>
  mask <span class="fu">$</span> \restore <span class="ot">-&gt;</span> <span class="kw">do</span>
    a <span class="ot">&lt;-</span> takeMVar m
    (a&#39;,b) <span class="ot">&lt;-</span> restore (io a) <span class="ot">`onException`</span> putMVar m a
    putMVar m a&#39;
    return b
                  
<span class="ot">casMVar ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Bool</span>
casMVar m old new <span class="fu">=</span>
  modifyMVar m <span class="fu">$</span> \cur
    <span class="kw">if</span> cur <span class="fu">==</span> old
      <span class="kw">then</span> return (new, <span class="dt">True</span>)
      <span class="kw">else</span> return (cur, <span class="dt">False</span>)</code></pre></div>
<p>我们之前提到的bracket函数, 也应该有asynchronous exception的保护:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bracket ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> c) <span class="ot">-&gt;</span> <span class="dt">IO</span> c
bracket before after thing <span class="fu">=</span>
  mask <span class="fu">$</span> \restore <span class="ot">-&gt;</span> <span class="kw">do</span>
    a <span class="ot">&lt;-</span> before
    r <span class="ot">&lt;-</span> restore (thing a) <span class="ot">`onException`</span> after a
    _ <span class="ot">&lt;-</span> after a
    return r</code></pre></div>
<p>回顾我们之前定义的readChan</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readChan (<span class="dt">Chan</span> readVar _) <span class="fu">=</span> <span class="kw">do</span>
  stream <span class="ot">&lt;-</span> takeMVar readVar
  <span class="dt">Item</span> val new <span class="ot">&lt;-</span> readMVar stream
  putMVar readVar new
  return val</code></pre></div>
<p>第一个takeMVar之后如果发生了异步异常, 则readVar就会永远是空, 造成死锁, 可以用modifyMVar:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readChan (<span class="dt">Chan</span> readVar _) <span class="fu">=</span> <span class="kw">do</span>
  modifyMVar readVar <span class="fu">$</span> \stream <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="dt">Item</span> val tail <span class="ot">&lt;-</span> readMVar stream
    return (tail, val)</code></pre></div>
<p>还有个问题, 就是readMVar其实也不是异步异常安全的:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readMVar m <span class="fu">=</span> <span class="kw">do</span>
  a <span class="ot">&lt;-</span> takeMVar m
  putMVar m a
  return a</code></pre></div>
<p>我们仍然可以用modifyMVar, 也可以用withMVar:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">withMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> b) <span class="ot">-&gt;</span> <span class="dt">IO</span> b</code></pre></div>
<p>而Control.Concurrent.MVar是这么定义的:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readMVar ::</span> <span class="dt">MVar</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
readMVar m <span class="fu">=</span>
  mask_ <span class="fu">$</span> <span class="kw">do</span>
    a <span class="ot">&lt;-</span> takeMVar m
    putMVar m a
    return a</code></pre></div>
<p>我们之前顶一个的writeChan的异步异常安全的实现是:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">writeChan ::</span> <span class="dt">Chan</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
writeChan (<span class="dt">Chan</span> _ writeVar) val <span class="fu">=</span> <span class="kw">do</span>
  newHole <span class="ot">&lt;-</span> newEmptyMVar
  mask_ <span class="fu">$</span> <span class="kw">do</span>
    oldHole <span class="ot">&lt;-</span> takeMVar writeVar
    putMVar oldHole (<span class="dt">Item</span> val newHole)
    putMVar writeVar newHole</code></pre></div>
<p>超时: 我们希望能够让一个IO运算在一定时间内完成:</p>
<p>如果IO a在一定时间内没有完成, 那么我们会给他抛出一个Timeout u的异步异常, 并且timeout返回Nothing. timeout的实现是forkIO出另外一个线程, 这个线程在一定时间之后, 会向自己抛异步异常. 但是如果本线程在超时之前完成, 则会抛出异步异常给这个创建出来的线程以结束它. 我们不能在另外一个线程里执行IO a的原因是: 1. IO a可能调用myThreadId, 而这个调用应该期望返回调用timeout的线程的id. 2. 如果调用timeout的线程被异步线程中断, 这个IO a也应该被中断.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">timeout ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> a)
timeout t m
  <span class="fu">|</span> t <span class="fu">&lt;</span> <span class="dv">0</span> <span class="fu">=</span> fmap <span class="dt">Just</span> m
  <span class="fu">|</span> t <span class="fu">==</span> <span class="dv">0</span> <span class="fu">=</span> return <span class="dt">Nothing</span>
  <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="kw">do</span>
    pid <span class="ot">&lt;-</span> myThreadId
    u <span class="ot">&lt;-</span> newUnique
    <span class="kw">let</span> ex <span class="fu">=</span> <span class="dt">Timeout</span> u
    handleJust
      (\e <span class="ot">-&gt;</span> <span class="kw">if</span> e <span class="fu">==</span> ex <span class="kw">then</span> <span class="dt">Just</span> () <span class="kw">else</span> <span class="dt">Nothing</span>)
      (\_ <span class="ot">-&gt;</span> return <span class="dt">Nothing</span>)
      (bracket (forkIO <span class="fu">$</span> <span class="kw">do</span> threadDelay t
                            throwTo pid ex)
               (\tid <span class="ot">-&gt;</span> throwTo tid <span class="dt">ThreadKilled</span>)
               (\_ <span class="ot">-&gt;</span> fmap <span class="dt">Just</span> m))

<span class="ot">handleJust ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> (e <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a</code></pre></div>
<p>handleJust只会处理Timeout u这个exception, 其他情况(Nothing)会重新抛出异常. 而如果是Timeout异常, 在下面return Nothing.</p>
<p>里面的IO a比较复杂, 用到了bracket保证forkIO出来的线程一定会被回收掉. 而这个线程做的事情就是等待t, 然后向原来的线程抛出Timeout. 这里要不就是原来的线程在t时间内结束, 然后给子线程抛出ThreadKilled, 要不就是超时后, 子线程抛出Timeout异步异常.</p>
<p>当然还有感觉会是race的情况: 如果两个线程同时给对方抛出异步异常会发生什么? 答案在于, throwTo是同步的, 也就是异常在目标线程上触发以后才会返回, 这样就不会发生一个线程已经给另外一个线程抛出异常, 然后自己又接收到这个线程抛过来的异常. 而且, throwTo在目标线程mask的时候会block, 而这个过程中又恰巧能够被异步异常打断. 这个就能保证, 无论如何, 只有一个线程能够成功把异步异常抛给对方.</p>
<p>如果在异常handler里面接受到异步异常怎么办? 我们可以把异常处理放在mask里面.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">mask <span class="fu">$</span> \restore <span class="ot">-&gt;</span>
  restore action <span class="ot">`catch`</span> handler</code></pre></div>
<p>为了处理异步异常, 之前的Async函数也要重新写过:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">async ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Async</span> a)
async action <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  t <span class="ot">&lt;-</span> mask <span class="fu">$</span> \restore <span class="ot">-&gt;</span>
    forkIO (<span class="kw">do</span> r <span class="ot">&lt;-</span> try (restore action); putMVar m r)
  return (<span class="dt">Async</span> t m)</code></pre></div>
<p>这里, forkIO出来的线程会继承父线程的mask状态, 也就是它刚刚被创建就是异步异常被mask状态. 这是把mask放到子线程做不到的.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">forkFinally ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (<span class="dt">Either</span> <span class="dt">SomeException</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ThreadId</span>
forkFinally action fun <span class="fu">=</span>
  mask <span class="fu">$</span> \restore <span class="ot">-&gt;</span>
    forkIO (<span class="kw">do</span> r <span class="ot">&lt;-</span> try (restore action); fun r)

<span class="ot">async ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Async</span> a)
async action <span class="fu">=</span> <span class="kw">do</span>
  m <span class="ot">&lt;-</span> newEmptyMVar
  t <span class="ot">&lt;-</span> forkFinally action (putMVar m)
  return (<span class="dt">Async</span> t m)</code></pre></div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 06 Oct 2013 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2013-10-06-parallel-concurrent-haskell.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>理解Arrows</title>
    <link>http://blog.fantasticsid.com/posts/2013-07-02-arrows.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>理解Arrows</h1>
                    
                    <span class="meta">
		    
			July  2, 2013
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Haskell的一些library用到了Arrow这个概念. 如果能够理解Monad那么相信理解Arrow也并不是非常难, 至少从类型层面上来说并不难理解. 而难点可能正是理解各种combinators以及具体的instance实现的语义. 由于我也刚刚开始接触Arrow, 所以这里的描述都尽量简化了.</p>
<p>要理解Arrow, 我们首先引入Kleisli这个type synonym:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Kleisli</span> m a b <span class="fu">=</span> a <span class="ot">-&gt;</span> mb</code></pre></div>
<p>这里可以看到, Kleisli这个高阶类型需要三个参数, 其中, 第二个参数m也是一个高阶类型, 可以是Maybe, [], IO等等. 而这个类型代表的是一个函数, 输入类型为a, 输出类型为m b.</p>
<p>这里多提一句, 我们其实可以把右端改写成:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Kleisli</span> m a b <span class="fu">=</span> (<span class="ot">-&gt;</span>) a (m b)</code></pre></div>
<p>这样是不是就根本没啥神奇了, Kleisli就是对(-&gt;)这个高阶类型的一个别名. 而它本身代表了一个计算, 一个输入类型为a, 输出类型为b的计算. 我们对这种计算进行抽象, 得到Arrow的定义:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Arrow</span> arr <span class="kw">where</span>
<span class="ot">  arr ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> arr a b
<span class="ot">  (&gt;&gt;&gt;) ::</span> arr a b <span class="ot">-&gt;</span> arr b c <span class="ot">-&gt;</span> arr a c</code></pre></div>
<p>看起来类型比较复杂, 但其实也很好理解. arr(Arrow arr这里)代表一个计算, 那么arr(typeclass function)代表了如何把一个函数lift到Arrow中, 这个和Monad的return类似. 而&gt;&gt;&gt;这个运算是对计算进行组合, 这个和Monad的&gt;&gt;=有点类似(这里并不严格, 只是希望能有一些类比).</p>
<p>既然Arrow代表计算, 那么普通函数也当然是一个计算, 我们来看看普通函数的typeclass instance是如何实现的:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Arrow</span> (<span class="ot">-&gt;</span>) <span class="kw">where</span>
  arr <span class="fu">=</span> id
  (<span class="fu">&gt;&gt;&gt;</span>) <span class="fu">=</span> flip (<span class="fu">.</span>)</code></pre></div>
<p>这里有一些规律可以帮助我们理解: 1. 注意到(-&gt;)的kind是* -&gt; * -&gt; *, 即需要两个类型参数的高阶类型. 我们把(-&gt;)带入Arrow的typeclass定义发现, 需要定义的函数的类型:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">arr ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (<span class="ot">-&gt;</span>) a b
<span class="ot">(&gt;&gt;&gt;) ::</span> (<span class="ot">-&gt;</span>) a b <span class="ot">-&gt;</span> (<span class="ot">-&gt;</span>) b c <span class="ot">-&gt;</span> (<span class="ot">-&gt;</span>) a c</code></pre></div>
<p>如果我们把(-&gt;)写成Infix notation, 那么就得到了:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">arr ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b)
<span class="ot">(&gt;&gt;&gt;) ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> c)</code></pre></div>
<p>容易看到, (&gt;&gt;&gt;)和function composition(.)的类型是差不多的, 只是两个函数的顺序调换了一下.</p>
<p>现在我们来看一下Kleisli的Arrow instance定义:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Kleisli</span> m a b <span class="fu">=</span> <span class="dt">Kleisli</span> {<span class="ot">runKleisli ::</span> a <span class="ot">-&gt;</span> m b}
<span class="kw">instance</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Arrow</span> (<span class="dt">Kleisli</span> m) <span class="kw">where</span>
  arr f <span class="fu">=</span> <span class="dt">Kleisli</span> <span class="fu">$</span> return <span class="fu">.</span> f
  (runKleisli f) (<span class="fu">&gt;&gt;&gt;</span>) (runKleisli g) <span class="fu">=</span> <span class="dt">Kleisli</span> (\a <span class="ot">-&gt;</span> <span class="kw">do</span> r <span class="ot">&lt;-</span> f a
                                                          return <span class="fu">$</span> g r)</code></pre></div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 02 Jul 2013 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2013-07-02-arrows.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>C++ Templates The Complete Guide 笔记</title>
    <link>http://blog.fantasticsid.com/posts/2013-04-05-cpp-template.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>C++ Templates The Complete Guide 笔记</h1>
                    
                    <span class="meta">
		    
			April  5, 2013
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<ol style="list-style-type: decimal">
<li>这里解释了作者认为const放在类型之后的好处: 比如</li>
</ol>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">typedef</span> <span class="dt">char</span>* CHARS;
<span class="kw">typedef</span> CHARS <span class="at">const</span> CPTR;</code></pre></div>
<p>这样声明的CPTR就是一个“constant pointer to chars”, 因为展开之后就是</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">typedef</span> <span class="dt">char</span>* <span class="at">const</span> CPTR;</code></pre></div>
<p>相反</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">typedef</span> <span class="dt">char</span> * CHARS;
<span class="kw">typedef</span> <span class="at">const</span> CHARS CPTR;</code></pre></div>
<p>展开之后为:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">typedef</span> <span class="at">const</span> <span class="dt">char</span> * CPTR;
<span class="dt">int</span> main();</code></pre></div>
<p>这里const修饰的就不是CPTR了.</p>
<p>另外, 推荐的引用和指针参数的空格放置位置</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="dt">void</span> foo(<span class="dt">int</span> <span class="at">const</span>&amp; x);</code></pre></div>
<p>倒也是和工作时C++代码的风格一样的.</p>
<ol start="2" style="list-style-type: decimal">
<li>函数模板</li>
</ol>
<ul>
<li>template声明中使用typename较常用</li>
<li>对于一个类型, 如果实例化函数模板后使用到了不支持的操作符, 会产生编译错误</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
T lt(T <span class="at">const</span>&amp; a, T <span class="at">const</span>&amp; b)
{
  <span class="cf">return</span> a * b;
}

lt(<span class="st">&quot;hi&quot;</span>, <span class="st">&quot;ya&quot;</span>); <span class="co">// error</span></code></pre></div>
<ul>
<li>函数模板的编译经过至少2层, 模板本身的语法, 以及实例化之后的语义检查</li>
<li>模板函数参数的自动推导中不允许类型转化, 类型必须完全匹配. 解决的方法是转化实参的类型或者显示实例化模板参数</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
T lt(T <span class="at">const</span>&amp; a, T <span class="at">const</span>&amp; b)
{
  <span class="cf">return</span> a &lt; b;
}

lt(<span class="dv">4</span>, <span class="fl">5.0</span>); <span class="co">// error</span>
lt&lt;<span class="dt">float</span>&gt;(<span class="dv">4</span>, <span class="fl">5.0</span>); <span class="co">// correct</span></code></pre></div>
<ul>
<li>函数模板不能有默认参数</li>
<li>函数模板可以重载(参数个数不同), 可以进行特例化, 可以与非函数模板共存. 后者在选择时有更高的优先权</li>
</ul>
<ol start="3" style="list-style-type: decimal">
<li>类模板</li>
</ol>
<ul>
<li>类模板的成员函数的实例化是惰性的</li>
<li>类模板特例化, 可以部分特例化</li>
<li>类模板参数可以有默认值, 并且可以引用之前的模板参数</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt; <span class="kw">typename</span> T, <span class="kw">typename</span> CONT = vector&lt;T&gt; &gt;
<span class="kw">class</span> A;</code></pre></div>
<ol start="4" style="list-style-type: decimal">
<li>非类型的模板参数 (dependent types)</li>
</ol>
<ul>
<li>模板参数不必要是一个类型, 还可以是整形值</li>
<li>不同整型值构造出来的类型是不一样的, 比如长度为10的List, 和长度为20的List是不同的</li>
<li>模板类和模板函数都可以用整型值来实例化</li>
<li>甚至外部链接的字符串常量也可以作为模板参数</li>
</ul>
<ol start="5" style="list-style-type: decimal">
<li>一些细节</li>
</ol>
<ul>
<li>通常类内的typedef在别处使用时要用typename作修饰, 以免被编译器认为是静态类成员变量</li>
<li>模板成员函数使用时如果进行了显示的特例化, 需要在“.”, “-&gt;”之后加上template以免编译器把“&lt;”认为是小于操作符</li>
<li>模板类继承之后, 调用成员函数需要用“this-&gt;memfn()”</li>
<li>模板本身也可以成为模板的实参 (template template arguments), 使用时不能利用默认参数</li>
</ul>
<ol start="6" style="list-style-type: decimal">
<li>模板文件包含模式</li>
</ol>
<ul>
<li>由于模板的实例化发生在编译期, 所以如果使用的模板定义在另外一个编译单元中, 则需要确保有恰当的实例化发生</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// template.hpp</span>
<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="dt">void</span> print(T <span class="at">const</span>&amp;);

<span class="co">// template.cpp</span>
<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="dt">void</span> print(T <span class="at">const</span>&amp; x)
{
<span class="co">// implementation</span>
}

<span class="co">// prog.cpp</span>
<span class="pp">#include </span><span class="im">&quot;template.hpp&quot;</span>
<span class="dt">int</span> main()
{
<span class="dt">double</span> v = <span class="fl">1.0</span>;
print(v);
<span class="cf">return</span> <span class="dv">0</span>;
}</code></pre></div>
<p>这里由于模板定义在另外一个编译单元(template.cpp), 而在其中并没有对double类型进行实例化的需要, 因此编译结果中并没有 print<double>(double const&amp; x) 这个函数. 而对prog.cpp的编译能够通过是因为其中包含了template.hpp中的print模板函数的声明. 这样就导致了编译能够通过, 但是链接阶段会发生错误.</p>
<p>解决方法:</p>
<ol style="list-style-type: decimal">
<li><p>把模板实现放在模板声明中 (Inclusion model)</p></li>
<li><p>显示实例化</p></li>
</ol>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// template.cpp</span>
<span class="kw">template</span> <span class="dt">void</span> print&lt;<span class="dt">double</span>&gt;(<span class="dt">double</span> <span class="at">const</span> &amp;);</code></pre></div>
<p>这样template.cpp编译单元中就会实例化相应的函数, 缺点是难以管理</p>
<ol start="3" style="list-style-type: decimal">
<li>结合上面两种方法, 提供额外的编译单元专门提供特例化声明</li>
</ol>
<ul>
<li>使用export (Separation model)</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">export</span>
<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="dt">void</span> print(T <span class="at">const</span>&amp;);</code></pre></div>
<p>缺点是编译器实现支持较少</p>
<ul>
<li><p>预编译头文件 - 编译器的优化可以保存前n行代码编译之后的状态, 这使得开头一样的编译单元(都包含了相同的头文件)的编译速度得以提高.</p></li>
<li><p>模板编译错误的找错: 找到模板实例化处</p></li>
<li><p>Archetypes: 模板库编写者提供的满足模板最小要求的类示例</p></li>
</ul>
<ol start="7" style="list-style-type: decimal">
<li>模板术语</li>
</ol>
<ul>
<li><p>Class template</p></li>
<li><p>Instantiation and specialization</p></li>
<li><p>Declaration vs definition</p></li>
<li><p>Template arguments vs template parameters</p></li>
</ul>
<ol start="8" style="list-style-type: decimal">
<li>模板参数限制</li>
</ol>
<ul>
<li><p>模板定义分为类模板和函数模板, 其中还包括了类模板的成员函数, 类模板的嵌套类(nested class)定义和成员定义, 模板类的静态变量的模板定义</p></li>
<li><p>模板成员函数不能被定义为虚函数, 因为虚表通常是用固定大小的表实现的. 而“模板虚函数”的个数只有到最后整个程序构建玩才能确定, 所以实现这个特性需要编译器, 连接器的支持</p></li>
<li><p>主模板定义</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// primary template</span>
<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Box;

<span class="co">// non-primary template</span>
<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Box&lt;T&gt;;</code></pre></div>
<ul>
<li><p>模板参数分为: 类型参数, 非类型参数(non-type parameters), 模板参数</p></li>
<li><p>非类型参数包括整形/枚举, 指针, 引用</p></li>
<li><p>模板参中的默认值可以在模板定义内使用, 但是模板显式实例化时模板类参数的参数个数(kind)必须与形参声明一样</p></li>
<li>模板实参
<ul>
<li>只有模板类声明时可以有默认参数</li>
<li>template-id: 显式模板参数T&lt;P1, P2, P3&gt;</li>
<li>模板类定义作用域之内, 对类名的引用相当于tempate-id</li>
<li>默认模板参数可省略, 但是“&lt;&gt;”仍然是必要的</li>
<li>模板函数参数类型推导</li>
</ul></li>
<li><p>substitution-failure-is-not-an-error (SFINAE)</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
RT1 test(<span class="kw">typename</span> T::X <span class="at">const</span>*);

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
RT2 test(...);

<span class="kw">typedef</span> <span class="dt">char</span> RT1;
<span class="kw">typedef</span> <span class="kw">struct</span> { <span class="dt">char</span> a[<span class="dv">2</span>]; } RT2;

<span class="pp">#define type_has_member_type_X(T) (sizeof(test&lt;T&gt;(0)) == 1)</span></code></pre></div>
<p>对没有定义成员X的类来说, 第一个模板函数定义应该产生编译错误, 但是因为SFINAE原则编译器选择继续从下一个模板定义来实例化test这个函数的调用</p>
<p>SFINAE只能处理产生非法类型的错误, 别的错误(除零错误等)则不适用.</p>
<ul>
<li><p>局部类定义不能用作模板参数, 无名类型/枚举也不行(除非用typedef指定一个名字)</p></li>
<li><p>成员函数模板的实例化不重载虚函数</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span>

<span class="kw">class</span> A
{
<span class="kw">public</span>:
  <span class="kw">virtual</span> <span class="dt">void</span> fun(<span class="dt">int</span> a)
  {
    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;A &quot;</span> &lt;&lt; a &lt;&lt; <span class="bu">std::</span>endl;
  }

  <span class="kw">virtual</span> ~A() {}
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> B: <span class="kw">public</span> A
{
<span class="kw">public</span>:
  <span class="kw">template</span> &lt;<span class="kw">typename</span> T2&gt;
  <span class="dt">void</span> fun(T2 a)
  {
    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;B &quot;</span> &lt;&lt; a &lt;&lt; <span class="bu">std::</span>endl;
  }

  <span class="kw">virtual</span> ~B() {}
};

<span class="kw">class</span> C: <span class="kw">public</span> A
{
<span class="kw">public</span>:
  <span class="dt">void</span> fun(<span class="dt">int</span> a)
  {
    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;C &quot;</span> &lt;&lt; a &lt;&lt; <span class="bu">std::</span>endl;
  }
};

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> *argv[])
{
  A *pa = <span class="kw">new</span> B&lt;<span class="dt">int</span>&gt;();
  pa-&gt;fun(<span class="dv">2</span>);
  <span class="kw">delete</span> pa;

  B&lt;<span class="dt">int</span>&gt; b;
  b.fun(<span class="dv">2</span>);

  pa = <span class="kw">new</span> C();
  pa-&gt;fun(<span class="dv">2</span>);
  <span class="kw">delete</span> pa;

  <span class="cf">return</span> <span class="dv">0</span>;
}
</code></pre></div>
<p>输出为:</p>
<pre><code>A 2
B 2
C 2</code></pre>
<ul>
<li><p>模板友类的声明处必须可见友类本身的定义, 一般类没有这个限制</p></li>
<li><p>友函数声明可以是定义, 因此如果实例化若干模板类, 会重复定义此函数, 解决办法是让函数依赖于模板参数</p></li>
<li><p>友模板: 声明一个模板的所有实例化都是友函数/类</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">class</span> Manager {
  <span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
    <span class="kw">friend</span> <span class="kw">class</span> Task;

  <span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
    <span class="kw">friend</span> <span class="dt">void</span> Schedule&lt;T&gt;::dispatch(Task&lt;T&gt;*);

  <span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
    <span class="kw">friend</span> <span class="dt">int</span> ticket() {
      <span class="cf">return</span> ++Manager::counter;
    }

  <span class="at">static</span> <span class="dt">int</span> counter;
};</code></pre></div>
<ol start="8" style="list-style-type: decimal">
<li>模板中的命名</li>
</ol>
<ul>
<li>C++语法并不是上下文无关的</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp">
x * y;</code></pre></div>
<p>以上代码可以是一个乘法表达式, 也可能是一个指针声明. 这要视x的定义而定.</p>
<ul>
<li><p>Template-id: 模板与模板参数的组合, 如List<T, int, 0></p></li>
<li><p>qualifed name的查找, unqualified name的查找(类作用域, 基类作用域, … , 嵌套的外层作用域), 这种查找是最普通的. C++中还有一个规则: Argument dependent lookup, 又称koenig lookup</p></li>
<li><p>对于一个class, ADL规则会检查类本身, 包含类定义的外层类, 基类这些类声明处的namespace.</p></li>
<li><p>对于函数调用, 函数参数以及返回值的类型关联的名称空间是ADL的查找范围.</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span>

<span class="kw">namespace</span> X {
  <span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt; <span class="dt">void</span> f(T);
}

<span class="kw">namespace</span> N {
  <span class="kw">using</span> <span class="kw">namespace</span> X; <span class="co">// ADL查找时, 此处没有引入X::f</span>
  <span class="kw">enum</span> E{ e };
  <span class="dt">void</span> f(E) {
    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;N::f&quot;</span> &lt;&lt; <span class="bu">std::</span>endl;
  }
}

<span class="dt">void</span> f(<span class="dt">int</span>)
{
  <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;::f&quot;</span> &lt;&lt; <span class="bu">std::</span>endl;
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> *argv[])
{
  ::f(N::e); <span class="co">// ::f</span>
  f(N::e); <span class="co">// N::f</span>
}</code></pre></div>
<ul>
<li>类定义内可以引用类名本身, 模板类中可以引用模板类名并加上模板参数. 但是如果只用模板类名, 则代表着和当前instantiation相对应的template-id, 而不是一个类模板</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">template</span>&lt;<span class="kw">typename</span>&gt; <span class="kw">class</span> TT&gt;
<span class="kw">class</span> X
{
}

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> C
{
  C a; <span class="co">// 代表C&lt;T&gt; a;</span>
  C&lt;<span class="dt">void</span>&gt; b;
  X&lt;C&gt; c; <span class="co">// 这里不行, C不代表一个模板类的名称</span>
  X&lt;::C&gt; d; <span class="co">// &lt;: 是特殊字符序列, 代表 [</span>
  X&lt; ::C&gt; e; <span class="co">// 总算行了这里</span>
}</code></pre></div>
<ul>
<li><p>为了处理C++这样的上下文相关文法, 编译器有一个符号表记录各种声明. 这样就能区分比如x*究竟是一个声明还是乘法表达式的一部分了. 类似的例子还有X&lt;1&gt;(0)等(视X是否为模板类)</p></li>
<li><p>Tokenizer也会有类似问题, 最常见的问题是模板实例作为模板参数: List&lt;List&lt;int&gt;&gt;, 这里&gt;&gt;会被解释为一个右移运算符. 有的编译器为这个问题作了特殊处理, 并給予警告.</p></li>
<li><p>Dependent names: 模板定义中对另外一个模板类定义的名称引用是不合适的, 因为很可能显示模板化会改变这个名称的定义</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Trap {
<span class="kw">public</span>:
  <span class="kw">enum</span> {x};
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Victim {
<span class="kw">public</span>:
  <span class="dt">int</span> y;
  <span class="dt">void</span> poof() {
    Trap&lt;T&gt;::x * y; <span class="co">// 这里是声明还是乘法表达式?</span>
  }
};

<span class="kw">template</span> &lt;&gt;
<span class="kw">class</span> Trap&lt;<span class="dt">void</span>&gt; {
<span class="kw">public</span>:
  <span class="kw">typedef</span> <span class="dt">int</span> x;
}

<span class="dt">void</span> <span class="dt">bool</span>(Victim&lt;<span class="dt">void</span>&gt;&amp; bomb) <span class="co">// 书上这里是Trap&lt;void&gt;&amp;</span>
{
  bomb.poof()
}</code></pre></div>
<p>如果在Victim模板定义内部查找x的定义, 则认为x是一个enum值, 但是后面Trap对void的显示化却对覆盖了x的定义.</p>
<p>C++的解决方法是: 默认情况下不认为一个dependent name是一个type, 除非用typename作声明.</p>
<p>当一个名称 1. 出现在模板定义内 2. 是被限定的(qualified) 3. 不作为基类声明/成员初始化列表中作为类型 4. 依赖于模板参数</p>
<p>则必须对之进行typename修饰. 看到这里感觉要吐了, 的确C++的template是非常的复杂, 需要知道的细节太多.</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">struct</span> S: <span class="kw">typename</span> X&lt;T&gt;::Base {
  S(): <span class="kw">typename</span> X&lt;T&gt;::Base(<span class="kw">typename</span> X&lt;T&gt;::Base(<span class="dv">0</span>)) {}
  <span class="kw">typename</span> X&lt;T&gt; f() {
    <span class="kw">typename</span> X&lt;T&gt;::C * p; <span class="co">// 声明</span>
    X&lt;T&gt;::D * q; <span class="co">// 乘法表达式</span>
  }
  <span class="kw">typename</span> X&lt;<span class="dt">int</span>&gt;::C * s;
};

<span class="kw">struct</span> U {
  <span class="kw">typename</span> X&lt;<span class="dt">int</span>&gt;::C * pc;
};</code></pre></div>
<pre><code>* 这个例子当中typename X&lt;T&gt;::Base中的typename是多余的, 因为他们不满足第3条规则.
* 但是紧接着的typename X&lt;T&gt;::Base(0)中typename是必须的, 因为这里构造了一个对象.
* 下面的typename X&lt;T&gt;中typename又是多余的, 这里没有限定名称(qualified name).
* typename X&lt;T&gt;::C * p中typename是必须的, 否则就如下一行编译器认为其是一个乘法表达式.
* 最后的typename X&lt;int&gt;::C * s说明了即使不满足第4条规则, 依然可以加上typename修饰, 反过来说, 前三条对typename的使用也是必要的.</code></pre>
<ul>
<li>类似的, 如果一个template定义也是有依赖的, 则必须告诉编译器.</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Shell {
<span class="kw">public</span>:
  <span class="kw">template</span> &lt;<span class="dt">int</span> N&gt;
  <span class="kw">class</span> In {
  <span class="kw">public</span>:
    <span class="kw">template</span> &lt;<span class="dt">int</span> M&gt;
    <span class="kw">class</span> Deep {
    <span class="kw">public</span>:
      <span class="kw">virtual</span> <span class="dt">void</span> f();
    };
  };
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T, <span class="dt">int</span> N&gt;
<span class="kw">class</span> Weird {
<span class="kw">public</span>:
  <span class="dt">void</span> case1(Shell&lt;T&gt;::<span class="kw">template</span> In&lt;N&gt;::<span class="kw">template</span> Deep&lt;N&gt; * p) {
    p-&gt;<span class="kw">template</span> Deep&lt;N&gt;::f();
  }
  <span class="dt">void</span> case2(Shell&lt;T&gt;::<span class="kw">template</span> In&lt;T&gt;::<span class="kw">template</span> Deep&lt;T&gt;&amp; p) {
    p.<span class="kw">template</span> Deep&lt;N&gt;::f();
  }
};</code></pre></div>
<ol start="14" style="list-style-type: decimal">
<li>模板多态</li>
</ol>
<ul>
<li><p>C++中的多态不单单指OO的virtual function, 模板也是实现多态的一种手段(一种表达, 多种行为)</p></li>
<li><p>virtual function的多态处理比如异构(heterogeneous)集合中元素的多态行为比较适合. 模板有更好的类型安全性.</p></li>
<li><p>模板是非侵入式的. 就是说OO的多态行为通常需要一个类继承一个基类, 而模板没有这样的要求. 只要类实现了对应的方法即可, 并且如果有些方法如果实例化过程中没有用到, 则不必实现.</p></li>
<li><p>模板的多态运行时开销小很多, 但是可能生成的代码更大, 编译更久.</p></li>
<li><p>C++的标准库中的iterator就是一个很好的模板设计. 容器通过定义各自的iterator来实现与generic算法的交互.</p></li>
<li><p>同样的也可以用OO来实现类似iterator的功能, 但是性能较低(内存开销, 运行时效率). 并且对于内置类型需要wrapper class. (OO侵入式的后遗症). 然而模板多态与OO多态也是能共存的.</p></li>
</ul>
<ol start="15" style="list-style-type: decimal">
<li>Traits, Policy Classes</li>
</ol>
<ul>
<li><p>Traits是一种模板类, 它将类型和类型相关的信息联系起来, 比如int类型的范围, 最大最小值等等. 常用的方法是对要修饰的类型进行特例化.</p></li>
<li><p>Traits中定义类型相关的类型比较容易(typedef), 定义相关常量值时可能遇到非整形量的常量而不能inline定义在类中. 这种情况通常将常量改为返回这个常量的函数.</p></li>
<li><p>Traits模板也可以作为一个模板参数, 使得模板使用者能够重载一些Traits.</p></li>
<li><p>Policy classes: 书上这里举了一个Accumulate的例子:</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt; <span class="kw">typename</span> T,
           <span class="kw">typename</span> Policy = SumPolicy,
           <span class="kw">typename</span> AT = AccumuationTraits&lt;T&gt; &gt;
<span class="kw">class</span> Accum {
  <span class="kw">public</span>:
    <span class="kw">typedef</span> <span class="kw">typename</span> Traits::AccT Acct;
    <span class="at">static</span> AccT accum(T <span class="at">const</span>* beg, T <span class="at">const</span>* end) {
      AccT total = Traits::zero();
      <span class="cf">while</span> (beg != end) {
        Policy::accumulate(total, *beg);
        ++beg;
      }
      <span class="cf">return</span> total;
    }
};

<span class="kw">class</span> SumPolicy {
  <span class="kw">public</span>:
    <span class="kw">template</span>&lt;<span class="kw">typename</span> T1, <span class="kw">typename</span> T2&gt;
    <span class="at">static</span> <span class="dt">void</span> accumulate(T1&amp; total, T2 <span class="at">const</span>&amp; value) {
      total += value;
    }
};</code></pre></div>
<p>当然, 这里为了能够让乘法的例子产生正确的结果, 必须将zero()的定义放入Policy class中. (<a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-Monoid.html">Monoid</a> 中的identity)</p>
<ul>
<li><p>Traits可以实现sizeof类似的功能(type function), 这个想想好像是类型系统中很强大的功能.</p></li>
<li><p>一个用到了SFINAE的判断一个类型是否是class的traits class例子:</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> IsClassT {
  <span class="kw">private</span>:
    <span class="kw">typedef</span> <span class="dt">char</span> One;
    <span class="kw">typedef</span> <span class="kw">struct</span> { <span class="dt">char</span> a[<span class="dv">2</span>]; } Two;
    <span class="kw">template</span> &lt;<span class="kw">typename</span> C&gt; <span class="at">static</span> One test(<span class="dt">int</span> C::*);
    <span class="kw">template</span> &lt;<span class="kw">typename</span> C&gt; <span class="at">static</span> Two test(...);
  <span class="kw">public</span>:
    <span class="kw">enum</span> { Yes = <span class="kw">sizeof</span>(IsClass&lt;T&gt;::test&lt;T&gt;(<span class="dv">0</span>)) == <span class="dv">1</span> };
    <span class="kw">enum</span> { No = !Yes };
};</code></pre></div>
<p>这里用到了class类型可以有pointer to member function的事实来判断一个类型是不是class类型.</p>
<ul>
<li>利用Traits的partial specialisation可以对类型的const, reference进行剥离. (15.2.3)</li>
</ul>
<p>在以下例子中, 实现了一个apply函数的模板. 但是在处理引用的时候, 却会发生将T &amp;&amp;类型传给函数的情况</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="dt">void</span> apply(T&amp; arg, <span class="dt">void</span> (*func)(T))
{
  func(arg);
}

<span class="dt">void</span> incr(<span class="dt">int</span>&amp; a)
{
  ++a;
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> *argv[])
{
  <span class="dt">int</span> x = <span class="dv">1</span>;
  apply(x, incr);
}</code></pre></div>
<p>当然, C++标准中允许将模板参数T&amp;中的T替换为int&amp;时处理为int&amp;, 同样的, 在T const中如果T是int const, 将可以替换为int const.</p>
<p>但是这里的解决方法是, 利用对traits class的partial specialisation进行const以及reference的“剥离”:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> TypeOp {
  <span class="kw">public</span>:
    <span class="kw">typedef</span> T ArgT;
    <span class="kw">typedef</span> T BareT;
    <span class="kw">typedef</span> T <span class="at">const</span> ConstT;
    <span class="kw">typedef</span> T &amp; RefT;
    <span class="kw">typedef</span> T &amp; RefBareT;
    <span class="kw">typedef</span> T <span class="at">const</span> &amp; RefConstT;
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> TypeOp &lt;T <span class="at">const</span>&gt;
{
  <span class="kw">public</span>:
    <span class="kw">typedef</span> T <span class="at">const</span> ArgT;
    <span class="kw">typedef</span> T BareT;
    <span class="kw">typedef</span> T <span class="at">const</span> ConstT;
    <span class="kw">typedef</span> T <span class="at">const</span> &amp; RefT;
    <span class="kw">typedef</span> T &amp; RefBareT;
    <span class="kw">typedef</span> T <span class="at">const</span> &amp; RefConstT;
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> TypeOp &lt;T&amp;&gt;
{
  <span class="kw">public</span>:
    <span class="kw">typedef</span> T &amp; ArgT;
    <span class="kw">typedef</span> <span class="kw">typename</span> TypeOp&lt;T&gt;::BareT BareT; <span class="co">//递归调用</span>
    <span class="kw">typedef</span> T <span class="at">const</span> ConstT;
    <span class="kw">typedef</span> T &amp; RefT;
    <span class="kw">typedef</span> <span class="kw">typename</span> TypeOp&lt;T&gt;::BareT &amp; RefBareT;
    <span class="kw">typedef</span> T <span class="at">const</span> &amp; RefConstT;
};</code></pre></div>
<p>这样, 前面的apply例子就可以重新写成:</p>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="dt">void</span> apply(<span class="kw">typename</span> TypeOp&lt;T&gt;::RefT arg, <span class="dt">void</span> (*func)(T))
{
  func(arg);
}</code></pre></div>
<ul>
<li>类型提升traits将两种类型提升到更加“强大”的类型, 手段还是specialisation</li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="co">// 这里是不是有点像Haskell的declarative定义</span>

<span class="kw">template</span> &lt;<span class="dt">bool</span> C, <span class="kw">typename</span> Ta, <span class="kw">typename</span> Tb&gt;
<span class="kw">class</span> IfThenElse;

<span class="kw">template</span> &lt;<span class="kw">typename</span> Ta, <span class="kw">typename</span> Tb&gt;
<span class="kw">class</span> IfThenElse &lt;<span class="kw">true</span>, Ta, Tb&gt;
{
  <span class="kw">public</span>:
    <span class="kw">typedef</span> Ta ResultT;
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> Ta, <span class="kw">typename</span> Tb&gt;
<span class="kw">class</span> IfThenElse&lt;<span class="kw">false</span>, Ta, Tb&gt;
{
  <span class="kw">public</span>:
    <span class="kw">typedef</span> Tb ResultT;
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T1, <span class="kw">typename</span> T2&gt;
<span class="kw">class</span> Promotion; <span class="co">//没有默认定义</span>

<span class="kw">template</span> &lt;<span class="kw">typename</span> T1, <span class="kw">typename</span> T2&gt;
<span class="kw">class</span> Promotion
{
  <span class="kw">public</span>:
    <span class="kw">typedef</span> <span class="kw">typename</span> IfThenElse&lt;(<span class="kw">sizeof</span>(T1) &gt; <span class="kw">sizeof</span>(T2)),
                                T1,
                                <span class="kw">typename</span> IfThenElse&lt;(<span class="kw">sizeof</span>(T1) &lt; <span class="kw">sizeof</span>(T2)),
                                                    T2,
                                                    <span class="dt">void</span>&gt;::ResultT
                               &gt;::ResultT;
};

<span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt;
<span class="kw">class</span> Promotion &lt;T, T&gt;
{
  <span class="kw">public</span>:
    <span class="kw">typedef</span> T ResultT;
};</code></pre></div>
<ol start="16" style="list-style-type: decimal">
<li>模板以及继承</li>
</ol>
<ul>
<li><p>Empty base class optimisation</p></li>
<li><p>curiously recurring template pattern: 父类的具体类型是一个模板类对子类的实例化. 可以实现诸如某个类型的对象计数器之类的功能, 重点是从此以后父类可以在实现时知道子类的类型了. 因此可以在父类中实现一个返回子类类型的clone方法. 这个见 <a href="http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">维基百科上CRTP的解释</a></p></li>
</ul>
<ol start="17" style="list-style-type: decimal">
<li>元编程</li>
</ol>
<ul>
<li><p>C++模板是图灵完备的, 意味着在编译器能够模拟出任何图灵等价的计算.</p></li>
<li><p>比如计算幂函数</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="dt">int</span> N&gt;
<span class="kw">class</span> Power2 {
 <span class="kw">public</span>:
  <span class="kw">enum</span> { result = <span class="dv">2</span> * Power2&lt;N<span class="dv">-1</span>&gt;::result };
};

<span class="kw">template</span> &lt;&gt;
<span class="kw">class</span> Power2 {
 <span class="kw">public</span>:
  <span class="kw">enum</span> { result = <span class="dv">1</span> };
};</code></pre></div>
<ol start="20" style="list-style-type: decimal">
<li>智能指针</li>
</ol>
<ul>
<li><p>这里只讨论了模板在实现智能指针时的应用, 并没有深入讨论智能指针的实现细节(同步, 原子操作, 效率..)</p></li>
<li><p>C++中以对象管理资源, 利用RAII是很常见的idiom.</p></li>
<li><p>智能指针最少要实现初始化, 释放资源, 重载-&gt;, *操作符.</p></li>
<li><p>引用计数: 话说虽然不能解决循环引用, 并且也需要同步操作以致降低效率, 这些貌似jvm没有. 但是好的是对资源掌控更加细致, 而jvm这方面反过来讲gc会对系统的延时性产生压力, 即使有很多对gc进行调整的途径和机会..</p></li>
<li><p>智能指针也是policy based design. 计数器如何分配如何消亡, 资源如何删除 ( delete vs delete [] ) 都作为模板参数传递.</p></li>
<li><p>智能指针也实现了父类子类转化的特性, 通过模板化的构造函数和conversion operator来实现.</p></li>
</ul>
<ol start="21" style="list-style-type: decimal">
<li>Tuple</li>
</ol>
<ul>
<li>感觉是在编译期用cons cell构建list差不多的性质. 用到了meta programming来实现静态的获取第N个元素的类型和值.</li>
</ul>
<ol start="22" style="list-style-type: decimal">
<li>函数对象</li>
</ol>
<ul>
<li><p>函数调用分为direct call, indirect call. 前者的函数地址是指令的一部分. 后者的函数地址在寄存器或者内存中.</p></li>
<li><p>通常编译器会试图产生direct call, 对于不同编译单元的函数, 只要知道函数名字, 编译器会预留地址, 等待链接器补全地址. 但是对于函数指针, 则只能产生indirect call.</p></li>
<li><p>成员函数指针需要记录相对对象的偏移.</p></li>
<li><p>函数对象的使用, 可以作为模板参数, 也可以作为函数参数传递, 后者可以有状态. 另外一种方式是将两者结合起来:</p></li>
</ul>
<div class="sourceCode"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="kw">template</span> &lt;<span class="kw">typename</span> F&gt;
<span class="dt">void</span> my_sort(..., F cmp = F())
{
  <span class="cf">if</span> (cmp(x, y)) {
  }
}

my_sort&lt;<span class="bu">std::</span>less&lt;..&gt;&gt;(...);
my_sort&lt;..., <span class="bu">std::</span>less&lt;..&gt;());
my_sort(..., mycriterion);</code></pre></div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 05 Apr 2013 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2013-04-05-cpp-template.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>2013新年计划</title>
    <link>http://blog.fantasticsid.com/posts/2013-01-01-2013-resolutions.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>2013新年计划</h1>
                    
                    <span class="meta">
		    
			January  1, 2013
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>今年简单一点</p>
<pre><code>深入研究Haskell, wiki上的页面基本都要有个了解, 能用Haskell写高效后台应用.

深入研究C++, 熟练应用模版, C++ 11的高级特性.

看CLRS, PFDS刷一下各种OJ, interviewstreet什么的.
</code></pre>
<p>去年的完成情况, 按照0-5完成进度打分:</p>
<pre><code>定义新自己 2

发布几个iOS应用 3

看完Haskell的几本书, 写一个解释器/比较大的应用 1

做机器学习的应用 0

概率论, 组合数学, 分析, 线性代数各书习题重新做一遍 0

搞个小提琴学 4

练耳不靠谱 2

要看的书:

&lt;&lt;Learn you a haskell for great good&gt;&gt; 5

&lt;&lt;Real world haskell&gt;&gt; 4

&lt;&lt;Programming in haskell&gt;&gt; 0

&lt;&lt;The Haskell Road to Logic, Math and Programming&gt;&gt; 0

&lt;&lt;Purely functional data structures&gt;&gt; 2

&lt;&lt;Pearls of functional algorithm design&gt;&gt; 0

&lt;&lt;Introduction to algorithms&gt;&gt; 0

&lt;&lt;Algorithms&gt;&gt; 0

&lt;&lt;Structure and interpretation of computer programs&gt;&gt; 1

&lt;&lt;Jazz theory book&gt;&gt; 0

&lt;&lt;Javascript the good parts&gt;&gt; 4

&lt;&lt;Clojure in action&gt;&gt; 0

&lt;&lt;The joy of clojure&gt;&gt; 4

&lt;&lt;Practical clojure&gt;&gt; 1

&lt;&lt;Programming clojure&gt;&gt; 1

&lt;&lt;Godel Escher Bach - an Eternal Golden Braid&gt;&gt; 0
</code></pre>
<p>发现去年又不知道活在哪个次元了.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 01 Jan 2013 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2013-01-01-2013-resolutions.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>App idea - Unitask</title>
    <link>http://blog.fantasticsid.com/posts/2012-04-03-unitask.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>App idea - Unitask</h1>
                    
                    <span class="meta">
		    
			April  3, 2012
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>这个和前面一篇<a href="/posts/2012-02-02-app-idea.html">Motivated App</a>的想法有点类似.</p>
<div>
<div class="figure">
<img src="/images/unitask1.jpeg" title="Unitask" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/unitask2.jpeg" title="Unitask" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/unitask3.jpeg" title="Unitask" />

</div>
</div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 03 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2012-04-03-unitask.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>iPad上的画图软件 paper</title>
    <link>http://blog.fantasticsid.com/posts/2012-04-02-paper-ipad.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>iPad上的画图软件 paper</h1>
                    
                    <span class="meta">
		    
			April  2, 2012
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>我一直对有些blog上的涂鸦很感兴趣. 很多blog如xkcd中的图都是画在纸上然后扫描进电脑里的, 这个对于我来说又显得太麻烦了, 而且画画从来对我就是一件难事, 如何选颜色, 风格都是很难的问题.</p>
<p>其实我对涂鸦的要求很低, 只要能够起到说明问题, 让人一目了然就可以. 昨天发现了这个app: paper by fiftythree</p>
<p>这个app我想了下, 吸引我的原因主要是:</p>
<pre><code>
1. 选择少, 有几种画笔但是画笔不能选择粗细, 颜色只有固定的几种.

2. 这些选择的效果都不错. 不同画笔风格互相弥补, 仅有的几种颜色搭配很协调.
</code></pre>
<p>看来对我这样的业余用户来说, 在简洁性和功能性上选择前者更具有吸引力.</p>
<div>
<div class="figure">
<img src="/images/expopiano.jpg" title="exponential piano" />

</div>
</div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 02 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2012-04-02-paper-ipad.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>App idea - Motivated</title>
    <link>http://blog.fantasticsid.com/posts/2012-02-02-app-idea.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>App idea - Motivated</h1>
                    
                    <span class="meta">
		    
			February  2, 2012
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Admit it, you are simply not as good a multitasker as a computer, and sometimes you’ve got moods that keep you distracted and unable to finish even one task at hand. Your productivity plumets and as soon as you realize this the negative feeling only adds to the problem you already have.</p>
<p>Enter Motivated, an iphone app that reminds you of the most important task you are supposed to finish.</p>
<p>Features:</p>
<ul>
<li>Only one task allowed at a time</li>
<li>Make commitment to your goal publicly</li>
<li>Schedule notifications, useful for example, to get yourself motivated at the start of day</li>
</ul>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 02 Feb 2012 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2012-02-02-app-idea.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>IELTS Quizme</title>
    <link>http://blog.fantasticsid.com/posts/2012-01-08-ielts-quizme.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>IELTS Quizme</h1>
                    
                    <span class="meta">
		    
			January  8, 2012
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>发布了第一个iOS app, IELTS Quizme. 帮助准备考雅思的同学复习词汇, 对希望增加词汇的同学也有帮助.</p>
<p><a href="http://itunes.apple.com/us/app/ielts-quizme/id488641011">IELTS Quizme</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 08 Jan 2012 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2012-01-08-ielts-quizme.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>2012新年计划</title>
    <link>http://blog.fantasticsid.com/posts/2011-12-30-2012-resolutions.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>2012新年计划</h1>
                    
                    <span class="meta">
		    
			December 30, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<pre><code>
定义新自己

发布几个iOS应用

看完Haskell的几本书, 写一个解释器/比较大的应用

做机器学习的应用

概率论, 组合数学, 分析, 线性代数各书习题重新做一遍

搞个小提琴学

练耳不靠谱

要看的书:

&lt;&lt;Learn you a haskell for great good&gt;&gt;

&lt;&lt;Real world haskell&gt;&gt;

&lt;&lt;Programming in haskell&gt;&gt;

&lt;&lt;The Haskell Road to Logic, Math and Programming&gt;&gt;

&lt;&lt;Purely functional data structures&gt;&gt;

&lt;&lt;Pearls of functional algorithm design&gt;&gt;

&lt;&lt;Introduction to algorithms&gt;&gt;

&lt;&lt;Algorithms&gt;&gt;

&lt;&lt;Structure and interpretation of computer programs&gt;&gt;

&lt;&lt;Jazz theory book&gt;&gt;

&lt;&lt;Javascript the good parts&gt;&gt;

&lt;&lt;Clojure in action&gt;&gt;

&lt;&lt;The joy of clojure&gt;&gt;

&lt;&lt;Practical clojure&gt;&gt;

&lt;&lt;Programming clojure&gt;&gt;

&lt;&lt;Godel Escher Bach - an Eternal Golden Braid&gt;&gt;
</code></pre>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 30 Dec 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-12-30-2012-resolutions.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Arrow定理 - 没有合理的选举!</title>
    <link>http://blog.fantasticsid.com/posts/2011-09-04-arrowstheorem.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Arrow定理 - 没有合理的选举!</h1>
                    
                    <span class="meta">
		    
			September  4, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p><a href="http://en.wikipedia.org/wiki/Arrow's_impossibility_theorem">Arrow定理</a>可能是博弈论中最著名的定理之一了, 还记得Rudolf在上课时用了整整1节多课证明了这个定理. 同时它的结论绝对能够吸引任何一个人, 难道现存的所有选举制度都是不合理的吗? 当然, 定理是有条件的, arrow定理也不例外, 但是arrow定理的条件让人觉得再自然不过了:</p>
<p>首先设想, 一个选举中有多于3个候选人, {A, B, C…}, N个选民. 每一个选民对候选人给出一个排名(两两可比, 传递), 例如, B &gt; A &gt; C . 而一个选举制度是一个函数F, 它把N个选民对候选人的排名映射到一个“全社会”的排名.</p>
<p>Arrow定理的条件:</p>
<pre><code> 1.  Unanimity(全票通过),
 就是说, 如果所有选民觉得A &gt; B, 那么对选举的结果也有A &gt; B

 2.  Independence of irrelevant alternatives(IIA, 不相关候选者独立性),
 就是, 选举结果中, A和B的相对次序只和A, B在所有选民的排名中的次序相关, 而和C的排名是无关的

 3.  No dictatorship(没有独裁),
 就是, 不存在一个选民i, 他的排名决定了任何一对候选人A, B在选举结果中的排名.</code></pre>
<p>以上条件我们通常都认为是一个公平选举制度所必须具有的性质, 但是arrow定理告诉我们, 同时满足这3个条件的选举制度是不存在的! 或者说, 如果要满足条件1, 2, 那么这个选举中就存在一个独裁的选民.</p>
<p>首先我们来看一个结论: 如果每一个选民都把候选人B排列在最前, 或者最后面, 那么选举结果也将会把B放在排名最前或者最后, 而不是中间的某一个位置.</p>
<p>其实这个结论就已经让我们觉得这个选举是不公平的, 因为假如有一半的选民认为B是最好的, 另外一半认为B是最差的, 那么理想的选举似乎应该把B放在排名中间某个位置, 而不是放在最好或者最差的排名上.</p>
<p>证明:</p>
<p>假设选举结果中B不是在最好或者最差的位置上, 即存在A, C, 使得A &gt; B &gt; C, 那么假设我们现在在每一个选民的排名中, 将C移动到A之前.</p>
<pre><code> 根据条件Unanimity, 选举结果应该有C &gt; A.

 但是注意在每个选民的排名中, 由于B是在排名两端之一的,
 所以这个移动并不会影响BC, AB之间的排名,

 于是根据条件IIA, 选举结果中BC, AB的排名应该不受影响,
 于是A &gt; B, B &gt; C仍然应该成立. 由于选举结果是两两可比并且传递的, 于是有A &gt; C.</code></pre>
<p>这是个矛盾, 因此就证明了, 选举结果中, B一定也是在排名的最前或者最后, 而不是中间某个位置. 待续…</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 04 Sep 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-09-04-arrowstheorem.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>一点博弈论趣题</title>
    <link>http://blog.fantasticsid.com/posts/2011-08-06-game-theory.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>一点博弈论趣题</h1>
                    
                    <span class="meta">
		    
			August  6, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>回顾快要结束的研究生生活, 发现真正带给我学习快乐的并不是研究. 虽然机器学习, 计算机视觉都是非常有趣的方向, 可是由于自己积累太少, 要想真正体会到研究的快乐还是比较难, 尤其是作学术讲究求新立异, 现在看来一年的确是不够的. 事实上我向来觉得, 如果我们普通人能够掌握到19世纪初左右的数学, 科学知识, 那么也已经相当牛了. 而推进人类认知的任务, 就交给PHD先生/女士们了. 而我本来就没有一颗献身科学的心, 当然如果有的话, 也不会选择计算机科学, 一定是数学或者物理. 所以说学术这条路, 事实上已经在6年前被我亲手斩断了.</p>
<p>总而言之, 自己创新能力还是不够, 更善于接受一些别人做出的成果然后去评判是否有趣有用值得读. 比如说, 研究生阶段80%的课程都是断然的水课. 剩下的不水的课中, 掐指一算, 也就只有Rudolf Fleischer老师的算法博弈论和阚海斌老师的图论课属于有趣的了. 这几天觉得应该把这些内容整理一下积累起来才不算浪费. 这应该是一系列关于博弈论或者图论的文章之一, 记录一些有趣的, 有启示的结论, 证明等等.</p>
<p>相信很多人听说博弈论都是从囚徒困境开始的. 用最简单的话来说, 囚徒A, B分别有承认他们的犯罪或者抵赖两种选择, 而这个“游戏”的设计使得他们中任何一个人, 无论另外一个囚徒的选择是如何的, 对于自己来说, 选择承认犯罪总是更好的选择. 因此这个游戏的最终结果就是, A, B都承认犯罪, 双双入狱坐牢2年, 而如果他们知道合作都不承认犯罪, 那么最好的结果是他们只需坐牢1年.</p>
<pre><code>        A承认    A抵赖


 B承认 都坐牢2年 A坐牢5年


 B抵赖 B坐牢5年 都坐牢1年</code></pre>
<p>事实上, 一种更好的说法是, A,B同时抵赖在这个游戏中并不是一个纳什均衡点, 即在没有合作的情况下, 有参与者会从这个“大家都抵赖”的点选择其他的做法, 因此游戏最终没有停留在这个点上. 而且在囚徒困境中, 每一个参与者都有一个<a href="http://en.wikipedia.org/wiki/Dominant_strategy">“主导策略”</a>, 也就是说无论对手如何选择, 选择抵赖总是最好的策略. 这种情况下游戏很容易就会到达一个纳什均衡点.</p>
<p>关于纳什均衡点有很多有趣的性质准备在后续的文章中详细说说. 我们再来看一些有趣的博弈论例子.</p>
<p>Braess悖论</p>
<p>考虑A, B两座城市之间的高速公路:</p>
<div>
<div class="figure">
<img src="/images/braess.png" title="braess" />

</div>
</div>
<p>假定走A-X以及Y-B这2条路消耗的时间是T/100 , 其中T是路上的车辆数, 而A-Y和X-B上消耗的时间为常数45分钟. 现在如果有4000辆车, 那么容易得到, 在2条路径A-X-B和A-Y-B上分别有2000辆车时, 这个游戏达到了平衡, 大家都会花费65分钟在路上.</p>
<p>现在我们试图建造一条超高速高架, 连接X-Y, 而且从X到Y的时间可以忽略不计.</p>
<div>
<div class="figure">
<img src="/images/braess2.png" title="braess" />

</div>
</div>
<p>这时, 由于司机考虑到, T/100最多为40, 因此他们会毫不犹豫得选择A-X, 而同样的道理, 由于X-Y的时间消耗为0, 他们在到达X之后会选择由超高速高架到达Y, 继而再花40分钟到达B. 因为每一个司机都是如此考虑的, 所以在这种添加了一条超高速公路的情况下, 游戏最终会稳定在所有人都选择A-X-Y-B的路径, 花费80分钟从A到达B. 而我们之前看到, 在没有超高速公路的情况下, 最佳路径花费只需65分钟. 悖论出现了, 额外花钱建造的超高速公路反而使得大家花费在路上的时间增加了!</p>
<p>事实上博弈论出现得比我们想象的更加频繁, 比如google adwords的第二价格竞标, 比如近两年很火的HFT, 股票市场的博弈, 顺便提一下, 计算纳什平衡是非常难的问题(PPAD), 所以这可能也是即使有了计算机, 市场仍然难以把握的原因之一.</p>
<p>关于博弈论的书, &lt;&lt;Algorithmic game theory&gt;&gt;这本书写得的确不错, 内容也适合非数学/经济的同学读.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 06 Aug 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-08-06-game-theory.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>一图胜万言 fibonacci数列的一些结论的有趣证明</title>
    <link>http://blog.fantasticsid.com/posts/2011-07-07-fibonacci.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>一图胜万言 fibonacci数列的一些结论的有趣证明</h1>
                    
                    <span class="meta">
		    
			July  7, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>看到一篇有趣的文章, 作者举了一个简单的出现了fibonacci数列的例子, 然后用这个例子证明了一系列关于fibonacci数列的结论. 这种巧妙的构造总是让人惊叹如果生活中处处都存在这样的“捷径”那该是多么精彩!</p>
<div>
<div class="figure">
<img src="/images/Screen-shot-2011-07-02-at-11.24.18-PM.png" title="蜂巢状路" />

</div>
</div>
<pre><code> 试想有两排蜂巢形状的路径, 假设现在你要从左上S处开始行走到达右下E处,
 每次只能向右走, 或者从上面的一格走到其右下的一格(从下面的一格走到其右上的一格),
 那么一共有多少不同的路径呢?</code></pre>
<p>容易证明, 这个路径数是一个fibonacci数, 作者给出了这个图清楚地表示了从S走到每一个格子不同的路径数.</p>
<div>
<div class="figure">
<img src="/images/Screen-shot-2011-07-02-at-11.32.48-PM.png" title="到达每一个格子的不同路径数" />

</div>
</div>
<p>容易证明, 路径数序列与fibonacci数列的初始值以及递归形式都是一样的, 这里走到第一个格子S只有F(1) = 1条路径.</p>
<p>现在可以开始证明一些关于fibonacci数列的结论了, 这些结论用其他方法当然也能够比较容易地得到, 但是用作者给出的这个例子, 我们将看到这些结论是多么的“显然”.</p>
<p>首先作者把这些蜂巢简化成了一些互联的点, 下面说明</p>
<blockquote>
<p>F(a) * F(b) + F(a+1) * F(b+1) = F(a+b+1)</p>
</blockquote>
<div>
<div class="figure">
<img src="/images/Screen-shot-2011-07-02-at-11.39.22-PM.png" title="第一种情况, 通过第a+1个" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/Screen-shot-2011-07-02-at-11.48.00-PM.png" title="第二种情况, 不通过第a+1个点" />

</div>
</div>
<p>如图, 一个包含a+b+1个点的路, 总共有F(a+b+1)种不同的路径. 而这些路径可以分成两部分: 通过第a+1个点的以及没有通过第a+1个点的. 前者一共有: F(a+1) * F(b+1)条, 而后者则有F(a) * F(b)条.</p>
<p>于是, 结论不证自明.</p>
<p>如果这种方法只能证明一个结论, 那么也并不算神奇. 此文神奇之处正在于, 这种fibonacci数列的呈现方式帮助作者直观地证明了一系列命题, 比如:</p>
<p>记P(N)为将整数N表示为1和2的有序数列之和, 证明P(N) = F(N+1)</p>
<p>当然, 这个结论用归纳法也是很容易证明的, 那么作者的这种表示方法是如何证明这个结论的呢?</p>
<div>
<div class="figure">
<img src="/images/Screen-shot-2011-07-07-at-4.43.15-PM.png" title="P(N) = F(N+1)" />

</div>
</div>
<p>如图, 可以发现12表示成的1和2之和, 每一种方式都一一对应了一种S-&gt;E的路径, 于是, 结论自然又不证自明.</p>
<p>还有一些诸如降N表示为1和2之和, 不考虑顺序有多少种方式? (不需要用文章的方法..) 用1x2的多米诺平铺2*n的地板有多少种方式等等的问题, 都是不错的等菜题.</p>
<p>有兴趣的话可以通读<a href="http://www.jamestanton.com/images/2011/06/Fibonacci-Surprises.pdf" target="_blank">全文</a>, 看看作者如何证明其他有趣结论.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 07 Jul 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-07-07-fibonacci.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>几道题目活跃下气氛</title>
    <link>http://blog.fantasticsid.com/posts/2011-04-28-puzzles.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>几道题目活跃下气氛</h1>
                    
                    <span class="meta">
		    
			April 28, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<pre><code> 你有n块石头, 然后做如下的事情:
 把这堆石头分成2堆, 将这两堆的石头块数相乘后把结果写在黑板上.
 对分出的2堆做同样的事情, 直到剩下n堆1块的石头.
 然后把黑板上的所有数字相加, 请问结果是多少?</code></pre>
<p>答案: n * (n - 1) / 2</p>
<pre><code> 大家都知道四色定理. 现在有一副地图, 任何一个国家都不是内陆国家.
 证明对这幅地图染色只要3种颜色就可以了.</code></pre>
<p>答案 : 在此地图外围围上一片海洋, 用四种颜色染色新的地图, 去掉海洋的颜色, 则原地图只用了3种颜色, 而且4染色的时候因为没有内陆国家, 所以这些国家都不会用到海洋的颜色.</p>
<pre><code> 如果汉诺塔问题当中, 盘子只能在柱子（A,B) 或者(B,C)间移动,
 而不能再(A,C)间移动, 那么至少用多少步能把盘子从A移动到C?</code></pre>
<p>答案: 3^n - 1步</p>
<pre><code>以上汉诺塔问题当中, 盘子移动过程是否包含了所有的盘子堆叠状态(小盘仍然要求在大盘之上)?</code></pre>
<p>答案: 是的. 一共只有3^n个状态, 第一个状态不用移动.</p>
<pre><code> 一般的汉诺塔问题当中, 有没有两个不同的盘子排列方式, 在它们之间转换需要超过2^n-1步?</code></pre>
<p>答案: 没有. 可以通过归纳假设. 归纳的步骤大概是: 比如两种状态最大的盘子分别在A,B柱子上, 则从第一个状态用少于2^(n-1)-1步把其他盘子移动到C上, 然后用1步将最大的盘子移动到B, 然后再用少于2^(n-1)-1步将其余的小盘子移动成第二种状态. 总步骤小于2^n-1.</p>
<pre><code> 有一排电梯, 请问在直线上的哪里等待能够减小电梯到来时需要移动的平均距离/最远距离?</code></pre>
<p>答案: 站在中间的电梯前/站在两端电梯的中点. (站在所有电梯的几何中心使得距离平方的均值最小)</p>
<p>来源:</p>
<p>xkcd</p>
<p>&lt;&lt;concrete mathematics&gt;&gt;</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 28 Apr 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-04-28-puzzles.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Mobius奇遇记</title>
    <link>http://blog.fantasticsid.com/posts/2011-02-13-mobius.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Mobius奇遇记</h1>
                    
                    <span class="meta">
		    
			February 13, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<iframe width="300" height="200" src="https://www.youtube.com/embed/4mdEsouIXGM" frameborder="0" allowfullscreen>
</iframe>
<p>实在太有创意了!</p>
<p>类似的还有这里: <a href="http://xkcd.com/381/">xkcd</a></p>
<p>来源: <a href="http://vihart.com/blog/mobius-story/">vihart</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 13 Feb 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-02-13-mobius.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>那些你知我知的帽子游戏</title>
    <link>http://blog.fantasticsid.com/posts/2011-01-18-hat-puzzles.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>那些你知我知的帽子游戏</h1>
                    
                    <span class="meta">
		    
			January 18, 2011
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>在围绕帽子展开的那些游戏中, 信息总是以A是否知道/不知道事件k这样的形式传递. 而这“知道/不知道”本身又是一种事件, 因此这种包含多重命题的论断在推理演绎之下奇妙地能帮游戏者得到一些原本看似不能得到的信息. 这正是此类帽子游戏吸引人的地方.</p>
<p>先来看最经典的版本:</p>
<pre><code> 数学老师有5顶帽子, 2顶蓝色的,  3顶白色的. 他把期中三顶戴在三位聪明的同学头上.
 这三位同学能够看到别人头上帽子的颜色, 但是不知道自己戴的帽子是什么颜色的.
 过了一段时间, 他们都知道自己的帽子颜色了. 请问他们帽子的颜色?</code></pre>
<p>在仔细想问题之前, 我们有很好的理由相信, 他们戴着相同颜色的帽子. 理由是这三个同学不可分别, 因此他们处于几乎相同的“处境”, 因此他们的结论应该是一样的. 当然, 也有可能他们帽子颜色是不同的, 进行了不同的并且都合理的推理得出各自正确的结论, 不过那样似乎太复杂了点. 既然这样, 我们现看看三位同学都戴着白色帽子时他们能否知道自己帽子的颜色.</p>
<p>不妨称三位同学A, B, C同学.</p>
<p>A同学会这么想:</p>
<pre><code> 如果我的帽子是蓝色的, 那么B同学会这么想:

   既然A的帽子是蓝色的, 如果我的帽子颜色也是蓝色的, 那么C同学一定会这么想:

       A, B两同学都有蓝色帽子, 一共2顶蓝色帽子, 我一定戴着白色帽子!

   但是为啥C同学没有立刻判断出自己帽子的颜色呢?
   因为我戴着白色帽子, 只有这样, C才判断不了自己帽子是不是蓝色的!

 但是为啥B同学没有立刻判断出自己帽子的颜色是白色的呢?
 因为我戴着的一定是白色的帽子, 这样B才不能判断自己的帽子的颜色!</code></pre>
<p>这样三个同学都能够通过他们中没有一个立刻判断出自己帽子颜色这一事实推断出, 自己有白色的帽子.</p>
<p>这种一层层嵌套的“幻想”竟然有了千真万确的另人惊讶的应用!</p>
<p>我们再来看另外一个和帽子有关的游戏</p>
<pre><code> 还是三个同学, 但是这次他们的帽子颜色分别由投掷一枚硬币的正反面决定, 或蓝或红.
 游戏主持人循环问三个人是否知道自己帽子的颜色, 如果有人回答对了, 那么他们将获得一笔奖金.
 如果错了或者没有人能够回答出来则不能获得奖励.
 在游戏开始前, 三位同学可以商讨一个策略来完成这个游戏. 请问, 他们能够做得多好呢?</code></pre>
<p>如果他们随便猜, 那么只有50%几率猜对. 但是采用如下的方法, 能够保证有75%的几率得到他们的奖励:</p>
<p>策略很简单: 如果你看到其余两位同学的帽子是同色的, 猜剩下的一种颜色. 否则不猜, 把机会留给下个同学. 这个策略能够在3顶帽子非同色的情形下给出正确的猜测, 在颜色相同的情形下这种策略失败了.</p>
<p>这个游戏是没有100%的必胜策略的.不过游戏可以推广到<a href="http://en.wikipedia.org/wiki/Hat_puzzle">更多的人甚至无穷多人的情形</a>下, 并且在这种情况下, 获胜的概率将更高.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 18 Jan 2011 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2011-01-18-hat-puzzles.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>最少要种多少棵菜</title>
    <link>http://blog.fantasticsid.com/posts/2010-12-23-planting-vegetables.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>最少要种多少棵菜</h1>
                    
                    <span class="meta">
		    
			December 23, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>试想有一块NxN的菜地, 为了获得大丰收又能够使投入最小, 希望最初开始种的菜种尽量少而让菜种自由发挥最终充满整个菜地. 一块空地的前后左右四块地上如果有两块或以上已经有了菜种, 那么这块空地也会发芽. 按照如此的生长趋势, 试问如何安放最初的菜种使得最终整块NxN菜地都能够长满菜呢? 开始时最少用几棵菜种呢?</p>
<div>
<div class="figure">
<img src="/images/field.jpg" title="菜地" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/field2.bmp" title="菜地" />

</div>
</div>
<p>可以发现, 如果在菜地的对角线上放满N棵菜, 就可以使整块菜地最终长满菜. 当然方法不止这一种, 如上图的放法也能够达到目的. 那么N棵菜是否是最少的棵数呢? 结论是肯定的.</p>
<div>
<div class="figure">
<img src="/images/proof.bmp" title="证明" />

</div>
</div>
<p>如上图, 如果k(=5)阶菜地需要k棵菜才能填满, 那么k+1阶菜地上红色区域至少要有一棵菜才能使此区域最终长满菜, 否则即使k阶子菜地填满, 按照生长规则这一区域也不能长出一棵菜. 因此k+1阶菜地至少需要k+1棵菜. 并且容易说明3阶菜地至少要3棵菜才能长满菜地, 所以归纳假设成立. 嗯, 这只能说是一种解释, 作为证明十分牵强漏洞很大. 不过暂时没有想到很好的巧妙的方法.</p>
<p>来源: <a href="http://www.cut-the-knot.org/Curriculum/Combinatorics/FillTheBoard.shtml">cut the knot</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 23 Dec 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-12-23-planting-vegetables.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>几个类似的概率趣题</title>
    <link>http://blog.fantasticsid.com/posts/2010-12-20-probability-puzzles.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>几个类似的概率趣题</h1>
                    
                    <span class="meta">
		    
			December 20, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<pre><code> 三个盒子中分别放入2枚金币, 2枚银币, 以及1金1银.
 随机取其中一个盒子, 然后随机摸出一枚发现是金币, 问盒子中另外一枚也是金币的概率?</code></pre>
<p>答案: 想当然1/2就错了.</p>
<pre><code> 囚犯A, B, C中只有1个会被释放, A恳求狱长如果B被释放, 告诉他C会被处死.
 如果C被释放, 告诉他B的名字. 如果他自己会被释放, 等概率告诉他B或者C会被处死.
 现在他被告知B会被处死. 那么他以及C活下的概率是多少?</code></pre>
<p>答案: 他活下的概率还是1/3. C活下的概率为2/3.</p>
<pre><code> 还有最有名的Monty Hall问题: 三扇门后有2羊1车.
 主持人在你选择之后打开一扇后面藏着羊的门并且给你机会选择更换选择, 你会换吗?</code></pre>
<p>对于听说过这个问题并且搞清的同学来说也许这已经不是非常有意思了, 只要仔细推敲其中的条件概率即可.</p>
<p>但是<a href="http://rajeshsr.co.cc/blogs/2010/12/19/on-the-intuitive-understanding-of-monty-halls-problem/">这里</a>给出了一些更加直观的解释, 却挺有意思的, 文中是用假想的“神奇的管子”来解释的.</p>
<p>注意到如果你的策略是不换, 那么最后得到车的概率总是1/3. 而如果策略是换, 那么由于主持人的帮助, 最终的产物必然和你初次的选择是相反的. 而开始时你有2/3的机会选择到羊, 所以在换的策略下, 最终得到车的概率就是开始选到羊的概率.</p>
<p>另外一种更直观的方法是, 设想有1000扇门, 然后主持人会在你选择之后把其余的998扇空的门打开, 那么这时应该换吗? 显然是要换的, 因为第一次选中车的概率太小了!</p>
<p>从不同的, 更直观的角度看问题总是另人眼前一亮.</p>
<p>来源: <a href="http://www.reddit.com/r/math/comments/eocci/on_the_intuitive_understanding_of_monty_halls">reddit</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 20 Dec 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-12-20-probability-puzzles.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>blog还活着</title>
    <link>http://blog.fantasticsid.com/posts/2010-12-20-must-blog-harder.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>blog还活着</h1>
                    
                    <span class="meta">
		    
			December 20, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>好久没有跟新了, 最近阅读明显少了. 上周和hr商量了时间在周二还是去面试了, 不过题目都不太有意思, 但我也没有当场给出最好的答案来.</p>
<p>reddit上面r/math的人被烦透了, 有人就列出了个清单, 以下是希望好好学数学的同学们需要看的.</p>
<p>Discrete mathematics</p>
<p>Linear Algebra</p>
<p>Differential equations</p>
<p>Complex Analysis</p>
<p>Abstract Algebra</p>
<p>Analysis (Rudin)</p>
<p>Topology (Introduction to Topology by J. Munkries)</p>
<p>另外, 海螺壳的曲线<a href="http://www.shallowsky.com/blog/science/fibonautilus.html">不是</a>fibonacci螺旋线.</p>
<p>最后祈祷我能有时间阅读到有意思的东西, 有时间看以上清单里的书.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 20 Dec 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-12-20-must-blog-harder.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>给格子染色 - 趣题两则</title>
    <link>http://blog.fantasticsid.com/posts/2010-11-11-colouring-puzzles.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>给格子染色 - 趣题两则</h1>
                    
                    <span class="meta">
		    
			November 11, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>试想有这么一个正三角形围栏被分割成若干个相同大小的正三角形格子. (如图是分割成16个的情形, 为了方便这里只画出了16个的情形, 容易得到类似的划分产生的格子数是个平方数.)</p>
<div>
<div class="figure">
<img src="/images/triangle.gif" title="正三角形围栏" />

</div>
</div>
<p>现在假设初始时每个格子中都有一只蚂蚱, 听到一声令下之后它们都跳到自己所在格子的相邻格子(有公共边的两个格子称为相邻). 假设我们有这样的被划分成100个(而不是图中的16个, 但容易想象其划分方式)相同大小的正三角形的围栏, 在蚂蚱们集体跳跃9次之后, 试说明一定有至少10个格子是空的.</p>
<p>答案:</p>
<div>
<div class="figure">
<img src="/images/Grasshoppers.gif" title="Grasshoppers" />

</div>
</div>
<p>如图, 把其中相邻的格子染上不同的两种颜色, 容易计算, 其中红色的格子有55个, 黄色的格子有45个. 蚂蚱们每跳一次, 就会跳到另一种颜色的格子中. 这样第一次跳跃之后, 红色格子中原来的蚂蚱都不在了, 而从黄色的格子中调到红色格子中只有45只蚂蚱, 所以至少有10个红色格子是空的. 而且, 只要是奇数次跳跃之后, 都有这样的结论, 因此, 9次跳跃后, 至少10个格子中是没有蚂蚱的.</p>
<p>这让我想到一个类似的问题: 在一个8x8的棋盘上, 从左下角开始一个棋子只能移动到相邻的格子中. 这种情况下, 能否让棋子走过每一个格子一次且仅一次, 并且最终走到右上角的格子中?</p>
<div>
<div class="figure">
<img src="/images/chess_board_blank.gif" title="chess board" />

</div>
</div>
<p>答案是否定的. 如图是染成两色的棋盘, 这个棋子初始时处于灰色格子, 走遍这64个格子需要改变63次格子的颜色, 也就是最后一个格子的颜色应该是白色的, 但是右上角的格子颜色却是灰色的, 所以无论如何也不能走出符合要求的路线.</p>
<p>来源: <a href="http://www.cut-the-knot.org/arithmetic/Grasshoppers.shtml">cut the knot</a></p>
<p>今日惊讶发现: Mariah Carey的音域为5个八度, 超过了一把普通吉他的音域.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 11 Nov 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-11-11-colouring-puzzles.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>有n个1的递增二进制序列 - 一道简单的面试题</title>
    <link>http://blog.fantasticsid.com/posts/2010-09-25-binary-sequence-with-n-ones.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>有n个1的递增二进制序列 - 一道简单的面试题</h1>
                    
                    <span class="meta">
		    
			September 25, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>题目是这样的:</p>
<pre><code> There is a sequence of increasing numbers that
 have the same number of binary 1s in them.
 Given n, the number of 1 bits set in each number.
 Write an algorithm or C program to find the n’th number in the series.</code></pre>
<p>明显, 最小的满足条件的二进制数为n个1. 紧接着其后的数都是n+1位二进制数, 而序列中的第n个数为11…01, 即n个1加上倒数第二个0. 知道了这些, 不难用n表示出答案为2^(n+1)-3. 原题就是这样. 但是显然, 这道题目原意是要给出这个序列中第K个数而不是第n个数, 所以题目还没有完. 我们的这个无穷的二进制序列应该是怎么样的呢? 容易想到, 它应该是这样的: (n=4)</p>
<pre><code>1111
10111
11011
....
100111
....
1000111
....</code></pre>
<p>按照刚才的思路, 我们首先考虑这个二进制有几位. 对于一个n+k进制数, 第一位必须为1, 而剩下的n+k-1位共有C(n+k-1, k)种情况. 这也就是n+k位进制数, 并且其中一共有n个1的二进制数的个数. 那么给定数K, 我们要找最大的k, 使得K大于1+ C(n+1-1, 1) + C(n+2-1, 2) + C(n+3-1, 3) + … + C(n+k-1, k). 注意到, 1=C(n, 0), 利用组合公式C(m, n) = C(m-1, n-1) + C(m-1, n),以上和式可以化简为C(n+k, k). 这下就简单了, 我们只要找到能够使C(n+k, k) &lt; K的最大的k, 那么我们的二进制数就是n+k位的. 接下来的思路是类似的. 我们要确定第二位是1还是0, 我们假设是0, 检查这种情况下, 余下的二进制位的组合可能共有多少. 这仍然是一个组合数N的计算. 如果K小于这个组合数N, 那么这位就是0, 反之, 这一位就应该是1, 并且我们用K-N继续进行计算, 直到最后一位. 可以看到, 这种方法虽然不能给出第K个二进制数的直接表达式, 但是如果说组合数的计算是基本操作的话, 我们只需要用log(K)步计算就能得到这个二进制数.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 25 Sep 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-09-25-binary-sequence-with-n-ones.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>3人打网球--趣题一则</title>
    <link>http://blog.fantasticsid.com/posts/2010-09-21-pow-tennis.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>3人打网球--趣题一则</h1>
                    
                    <span class="meta">
		    
			September 21, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>这是来自Stan Wagon主持的problem of the week的最新的第1131题. 题目是这样的:</p>
<pre><code> Alice, Bob, and Charlie play tennis matches consisting of one set only:
 two of them play a set and the winner stays on the court for the next set,
 with the loser replaced by the player who was idle.
 At the end of the day
 Alice played 15 sets,
 Bob played 14 sets, and
 Charlie played 9 sets.
 Who played in the 13th set?</code></pre>
<p>这里引用一下原题的描述, 通常我们看到的题目中, 如果有两个主角我们都用Alice和Bob来表示, 这里出现第三个人可以看到是用了Charlie这个名字, 看到规律了吗? 他们的名字首字母分别是A, B, C. 以后自己编东西的时候可以参考一下. 好了, 回归正题. 在我们国家通常打乒乓比较多, 的确有时候会出现3个人轮流打的情况, 即所谓打擂台的情况, 输了的人下台换刚才休息的人. 现在三个人A, B, C分别打了15, 14, 9局, 问, 第13局是哪两个人在比赛?</p>
<p>答案: 显然, Charlie的球技不太行. 构造一个有三个顶点A, B, C的多重边无向图, 一条边代表一场比赛. 容易看到, A-B边共10条, B-C边4条, A-C边5条. 现在要将这19条边收集起来, 但是有一个限制是, 同一对顶点的边不能被紧接着一起被收集, 就是说, 一场比赛之后, 必定会进行不同对手的下一场比赛. 显然, A-B边每两场比赛就被收集一次, 当中夹杂着B-C边和A-C边, 且第一条和最后一条被收集的边都是A-B边, 而在B-C边以及A-C边两者中则是A-C边多一次. 这样, 用c代表A-B边, b代表A-C边, a代表B-C边, 那么边收集的顺序就是cbcacbcacbcacbcacbc第13条边为c, 即A-B, 也就是Alice和Bob的比赛. 并且我们可以看到Charlie的确很菜, 输掉了所有的比赛.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 21 Sep 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-09-21-pow-tennis.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>你还会做这道高考题吗?</title>
    <link>http://blog.fantasticsid.com/posts/2010-09-08-gaokao-probability-puzzles.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>你还会做这道高考题吗?</h1>
                    
                    <span class="meta">
		    
			September  8, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<pre><code>用铅笔在一根木棍上的任意两处分别作下记号,
然后把木棍平均分成k份, 问这两个记号在同一段的概率是多少?</code></pre>
<p>答案: 1/k. 两种解释:</p>
<p>从k段中选1个记号B所在的段, 它正好是记号A所在的段的概率是1/k. 或者, 更“高级”的解释:</p>
<p>把木棍看成是坐标轴, 不妨设它长为1. 分别用横坐标, 纵坐标表示记号A, B所在的位置, 那么它们所有可能的位置在空间中形成了一个边长为1的正方形, 而他们在同一段的情况下所有位置形成了k个边长为1/k的正方形, 这些正方形的面积之和为1/k, 就是这两个记号在同一段的概率.</p>
<div>
<div class="figure">
<img src="/images/area-k.png" title="k=4的情况" />

</div>
</div>
<pre><code>还是这根木棍, 在木棍上任意两处分别作下记号,
然后, 随机地将木棍分成k份, 问这两个记号在同一段的概率是多少?</code></pre>
<p>答案: 2/(k+1). 如果试图用上面第二种方法来解决问题就麻烦了, 因为这题可以是一题高考填空题. 解释如下: 一共有2 + (k-1)个“随机点”, 包括了记号和断开的位置. 从这k+1个点中取2个点, 它们相邻的概率为 k / C(k+1, 2) = 2/(k+1) .</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Wed, 08 Sep 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-09-08-gaokao-probability-puzzles.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report Pencils down</title>
    <link>http://blog.fantasticsid.com/posts/2010-08-17-gsoc-report-pencils.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report Pencils down</h1>
                    
                    <span class="meta">
		    
			August 17, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p><span>In a few hours this year’s <span>GSoC</span> coding period shall come to an end.</span></p>
<p><span>Let me say this experience is really fantastic. I’ve implemented jingle file transfer and XTLS encryption during the coding period. And hopefully these will be merged with the default branch soon. The community members are always asking students to give <span>feedbacks</span> to improve the program. The problem is, you just can’t do this effectively if you haven’t experienced something better :-) . (Some of the multi-developer projects I’ve participated do not even rely on revision control system.) But anyway, here are some thoughts:</span></p>
<p><span>My biggest wish is to make <span>gsoc</span> timeline more flexible so as to suit more students from countries other than the US. (I know this is really hard and might introduce numerous administrative tasks.) Summer holidays in different regions might have different start time and span and it’s really no easy job keeping up the progress if you multi-task. What the students can do should not be compromised just because they live outside the US.</span></p>
<p><span>The project that I worked on has well written source code and documentation and comments. But it still requires a lot of hacking, poking around, debugging for a new developer to get familiar with the code base. And that limits the number of developers that could potentially contribute to the project. I think setting up wiki pages to explain how existing code works  (how certain events are handled, how to add new callbacks, the structure of existing classes etc.) should be adopted as a regular practice. Gajim has got a wiki, but it is not used most effectively, perhaps due to the change of code over the years, which transformed the code into a new structure, leaving the wiki obsolete. Perhaps we should consider seriously adding wiki page update into the normal developing cycle. But again, I don’t know how much burden that would bring to developers.</span></p>
<p><span>I must thank my mentor Yann Leboulanger, for giving me a lot of pragmatic advices, being patient during the time I dealt with school coursework and accepting me as a gsoc student in the first place. I also got help from the XMPP software foundation, a welcoming community, which hosted weekly meetings and also generously sent me books to help get things done. Last but not least, I thank Google, for being an awesome company, for its commitment in open source, and I wish you good luck in the war against Oracle.</span></p>
<p><span> </span></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 17 Aug 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-08-17-gsoc-report-pencils.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>P = NP问题最新进展</title>
    <link>http://blog.fantasticsid.com/posts/2010-08-10-npc-proof.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>P = NP问题最新进展</h1>
                    
                    <span class="meta">
		    
			August 10, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>据说, P问题是否等于NP问题是千禧难题中唯一的平民也能够理解和尝试的问题, 也是理论计算机界最为重要的问题. 几乎大家都认为, P是不等于NP的, 但是, 至今没有人给出一个证明. 但是前几天, 一位来自HP Labs的研究人员<a href="http://www.hpl.hp.com/personal/Vinay_Deolalikar/">Vinay Deolalikar</a>对这个问题给出了一个证明, 这个证明目前还没有得到认可. 如果这个证明是正确的, 那么就能说明, 使用计算机是难以有效解决一些计算问题的, 于是我们就不必费力去寻找这些问题的高效算法了, 只要说明这些问题和已知的一些NPC问题是等价的即可.</p>
<p>但是这个证明据说横跨n个领域: 计算机科学, 数学, 逻辑, 统计, 物理…包括使用了代数几何 的方法. 于是我等闲人只能等大牛们鉴定完毕再欢呼了. 这里有作者的<a href="http://gregbaker.ca/blog/2010/08/07/p-n-np/">博客</a>, 还有<a href="http://www.hpl.hp.com/personal/Vinay_Deolalikar/Papers/pnp_updated.pdf">文章</a> . 如果这个证明的确被验证, 那么2012到来之前人类还是非常争气啊, 证明了庞加来猜想, 又证明了P!=NP …</p>
<p>Update: <a href="http://rjlipton.wordpress.com/2010/08/09/issues-in-the-proof-that-p%E2%89%A0np/">这里</a>讨论了文章中的一些可能的错误.</p>
<p>Update: IBM的研究员Charanjit Jutla认为证明有<a href="http://rjlipton.wordpress.com/2010/08/09/issues-in-the-proof-that-p%E2%89%A0np/#comment-4712">严重漏洞</a>.</p>
<p>Update: 又发现<a href="http://rjlipton.wordpress.com/2010/08/12/fatal-flaws-in-deolalikars-proof/">漏洞</a>了.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 10 Aug 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-08-10-npc-proof.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 11th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-08-09-gsoc-report-11th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 11th week</h1>
                    
                    <span class="meta">
		    
			August  9, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>This year’s gsoc coding period is approaching its end. Last week I made Gajim check and possibly create user certificate on startup. The certificates are self-signed certificates, so no CA is involved.</p>
<p>The key exchange process seems straight-forward, but it really requires careful manipulation of the certificates, and of course when designing something claiming to be security related, you just can’t think too much about it. But the bottom line is: Gajim now has the capability to encrypt data that is transferred, and this whole process will be complete once the key exchange is implemented.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 09 Aug 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-08-09-gsoc-report-11th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 10th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-08-02-gsoc-report-10th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 10th week</h1>
                    
                    <span class="meta">
		    
			August  2, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>After several days’ efforts, gajim is now capable of transferring files using TLS encrypted channels. It turned out using openssl for writing ssl/tls enabled applications is really easy. In order not to block the GUI during ssl/tls negotiation, we need to use non-blocking I/O. With the introduction of  openssl, the non-blocking read or write on sockets might throw exceptions indicating that the peer wants a tls authentication. This could happen any time during the session. But you really don’t have to care about those details, the only thing you need to do is retrying the I/O operations that triggered the exceptions, and they should succeed, the openssl library will do the rehandshake for you behind the scene.</p>
<p>The other thing I should mention is that we don’t have key exchange mechanisms yet, so all the tests were conducted with certificates manually generated stored on disk. So the next step I shall implement those features:</p>
<ol style="list-style-type: decimal">
<li><p>generate certificates if they do not exist</p></li>
<li><p>exchange user certificates during TLS enabled file transfer if the peer’s certificate is not present (<a href="http://xmpp.org/extensions/xep-0189.html">XEP-0189</a>)</p></li>
</ol>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 02 Aug 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-08-02-gsoc-report-10th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 9th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-07-26-gsoc-report-9th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 9th week</h1>
                    
                    <span class="meta">
		    
			July 26, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Last week I was playing around with pyopenssl. Whilst doing this I am getting more and more convinced that to be able to transfer files using secured channel is really a nice feature. The problem is that as mentioned in my last post, we need a reliable way to exchange certificates. <a href="http://xmpp.org/extensions/xep-0247.html">Jingle xml streams</a>, which is documented in the XTLS specification as the way to exchange certificates on first communication, turned out to be deferred already.</p>
<p>So after talking to Yann, we have decided that we will implement secured trasnfer method on the assumption that certificates are already on hard drive, which eliminates much uncertainty we are facing. The X509 encryption method, which I shall implement first, seems to be a mixture of RSA public key cryptography algorithm and some sort of authentication of identity algorithm (Not sure). But with the openssl library these should be easy. The difficult part is incorporating these into the existing socks5  transport method, which I am sure involves a lot of probing and debugging. So, no more words, off I go then, reading, probing, debugging, coding…</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 26 Jul 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-07-26-gsoc-report-9th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 8th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-07-23-gsoc-report-8th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 8th week</h1>
                    
                    <span class="meta">
		    
			July 23, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Last week I’ve been reading documentations on XTLS. Meanwhile, several bugs have been fixed. First, file transfer over proxy has been enabled. The peer is informed of proxy activation after the initiator has received activate stanza from proxy. Also I’ve fixed a bug that has existed since the start of implementation, that is, the incorrect use of jid where the account is required. .This is due to the fact that I named every account after the jid of that account, thus the bug was not revealed until I tested the implementation on another machine.</p>
<p>the XTLS protocol seems to be quite straight forward, but it requires a secure connection for exchanging certificate when bootstrapping trust on first communication, which gajim has not implemented yet (XEP-0189, XEP-0247).</p>
<p>So for the rest of gsoc, I shall implement TLS connection so gajim will be able to transfer data over the secured tunnel without much re-factoring of the code.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 23 Jul 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-07-23-gsoc-report-8th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>大自然中的数字</title>
    <link>http://blog.fantasticsid.com/posts/2010-07-17-numbers.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>大自然中的数字</h1>
                    
                    <span class="meta">
		    
			July 17, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<iframe src="https://player.vimeo.com/video/9953368" width="300" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>
<p>
<a href="https://vimeo.com/9953368">NATURE BY NUMBERS</a> from <a href="https://vimeo.com/eterea">Cristóbal Vila</a> on <a href="https://vimeo.com">Vimeo</a>.
</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 17 Jul 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-07-17-numbers.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 7th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-07-12-gsoc-report-7th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 7th week</h1>
                    
                    <span class="meta">
		    
			July 12, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>This week I’ve been doing these:</p>
<p>Send session terminate stanza after file completion</p>
<p>Fix bugs regarding the file transfer progress and completion, so that the file transfer window gets updated correctly</p>
<p>Testing</p>
<p>Needless to say, the current version is still not stable, but it’s certainly a version we can start polishing to make it mature.</p>
<p>Starting from next week, I will work on XTLS. My plan for the next week:</p>
<p>read documentations on XTLS</p>
<p>write scaffold code to manage XTLS session initiation</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 12 Jul 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-07-12-gsoc-report-7th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 6th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-07-05-gsoc-report-6th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 6th week</h1>
                    
                    <span class="meta">
		    
			July  5, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Last week I was trying to get jingle file transfer work at least using socks5 transport. It turned out to be more complicated than it sounds.</p>
<p>First, there is no easy way to reuse the A: existing socks5 bytestream implementation in B: jingle FT session management. Currently what I do is generate stanza with A and process callbacks in B. This seems a bit ugly, but it helps me to see if things are working as soon as possible.</p>
<p>Second, when sending a file, this is the correct order senders and receivers should follow:</p>
<ol style="list-style-type: decimal">
<li><p>the server side starts a listener first</p></li>
<li><p>the client connects to the server</p></li>
<li><p>the server creates a sender object and do some authentications</p></li>
<li><p>the server sends the file content</p></li>
</ol>
<p>While implementing this I found that we need to fire up certain steps after receiving iq-result stanza for a jingle stanza. Oddly this is not supported in the original jingle session management mechanism. So I have added some code to help jingle session receive iq-result callbacks. For every jingle stanza that a jingle session sends, the id of the iq stanza is recorded, this id list is later on used to determine if a particular iq-result stanza should be propagated to appropriate callbacks.</p>
<p>Now that the jingle FT is working with socks5 bytestream transport  (gajim correctly receives a file with a local jabber server), I’ll start working on unimplemented callbacks (file_rcv_complete, etc.) and try it out on remote servers and pidgin and see if it works.</p>
<p>P.S. <a href="http://www.wingware.com/wingide/index">Wing IDE professional</a> seems very nice, it does debugging, auto-completion, indentation, syntax highlight, integration with version control systems, and runtime python REPL …  I’m using a free 30-day trial version now. If somehow I get addicted to it after 30 days I will consider purchasing it (there are discounts for students or open source developers)</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 05 Jul 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-07-05-gsoc-report-6th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 5th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-06-29-gsoc-report-5th-week-2.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 5th week</h1>
                    
                    <span class="meta">
		    
			June 29, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>I was taking exams at school and didn’t progress last week. This is bad because it’s like doing something else while you’re employed to do a full-time job. But anyway the only thing I could do now is try to make up for the lost week. I will post another entry at the end of the week and see what I will achieve. Hopefully I can get the file transfer work.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 29 Jun 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-06-29-gsoc-report-5th-week-2.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 4th week</title>
    <link>http://blog.fantasticsid.com/posts/2010-06-21-gsoc-report-4th-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 4th week</h1>
                    
                    <span class="meta">
		    
			June 21, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>I’ve been doing these for the last week:</p>
<ol style="list-style-type: decimal">
<li><p>Send session accept if the user wants to receive the file</p></li>
<li><p>Construct transport candidates for local ip or proxy so the peers could start connectivity tests</p></li>
</ol>
<p>We are very close to the actual file transfer process now.</p>
<p>I’m gonna have a few examinations this week. If the socks5 transport is completed by the end of this week, I’ll start testing interoperability between gajim, pidgin and probably mcabber.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 21 Jun 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-06-21-gsoc-report-4th-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 3rd week</title>
    <link>http://blog.fantasticsid.com/posts/2010-06-14-gsoc-report-3rd-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 3rd week</h1>
                    
                    <span class="meta">
		    
			June 14, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Last week I’ve been busy with my coursework. The term is approaching its end, I shall have one week off staying at home and then take several tests the week after.</p>
<p>Two things. First, I’m now using winpdb to follow the execution path of gajim. It fails initially when gajim tries to import a certain moduel in “stanza_session.py”. We can disable that by changing “if gajim.HAVE_PYCRYPTO:” to “if gajim.HAVE_PYCRYPTO and false:”. After that the debugger should work. Second, I don’t know why but for the first two weeks it never occurred me that I could setup a jabber server on my own laptop! Think about just how much time I’ve wasted on logging into the server for the first two weeks : - |</p>
<p>Marcus, who implemented jingle file transfer for pidgin, has tried my jingleFT branch and it seems gajim already constructs correct session initiate request, but further session interactions need to be implemented.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 14 Jun 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-06-14-gsoc-report-3rd-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 2nd week</title>
    <link>http://blog.fantasticsid.com/posts/2010-06-07-gsoc-report-2nd-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 2nd week</h1>
                    
                    <span class="meta">
		    
			June  7, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>This week I’ve been adding scaffold code to manage and initiate jingle session for file transfer. I find the most time consuming part to be understanding how the current system manages sessions, especially how events are propagated and dispatched to various connection handlers . Once I’ve got a clear picture of that, adding support for file transfer sessions is actually straightforward.</p>
<p>In the current jingleFT branch, before file transfer begins, we will see if the contact in question supports jingle file transfer. If it does support jingle file transfer, we initiate a jingle session. If not, we fall back on original SI file transfer mechanism. I’ve also added code to show that gajim supports jingle file transfer feature during disco. The jingle session management process dispatches stanza receive events (and various otheres) to callbacks. Those concerning session commencement, termination and session specific events will be captured and properly implemented in the next step. In particular, the next week (week 3) will see a complete jingle file transfer session management.</p>
<p>Since I’ve left most methods unimplemented, gajim sometimes throws exceptions when we’re supposed to implement certain methods. The good thing about this is it helps to pinpoint which method I should implement very quickly and efficiently. The bad news is that I dunno if there are things broken just silently and I certainly don’t want to see many exceptions raised in the final product. We will see how it goes.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 07 Jun 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-06-07-gsoc-report-2nd-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>经典重访 找出频繁字符</title>
    <link>http://blog.fantasticsid.com/posts/2010-06-01-frequent-elements.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>经典重访 找出频繁字符</h1>
                    
                    <span class="meta">
		    
			June  1, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>给定一个字符数组, 已知其中有一个元素的出现频率大于0.5. 请用尽可能少的内存最快地找出这个元素.</p>
<p>这个问题有一个很好的算法解决. 只需要常数级的内存和线性的时间: 只要在遍历数组的时候保存当前最频繁的元素的计数, 如果下一个元素是不同的元素, 就将计数减1, 否则加1. 最终剩下的元素一定就是那个元素.</p>
<p>一个自然的问题是, 如果我们想找出所有出现频率大于<span class="math inline"><em>θ</em></span>的元素, 其中<span class="math inline"><em>θ</em></span>是一个小于0.5的正实数, 能否推广以上<span class="math inline"><em>θ</em> = 0.5</span>的情形时的算法呢?</p>
<p>这个问题已经在&lt;&lt;A Simple Algorithm for Finding Frequent Elements in Streams and Bags&gt;&gt;中被解决了. 既然在<span class="math inline"><em>θ</em> = 0.5</span>的情形下可以进行两两去除元素对的方法, 那么在其他情况下, 我们就可以试着去除<span class="math inline">1/<em>θ</em></span>个不同的元素. 一旦当前记录的元素频率集合的大小k超过了<span class="math inline">1/<em>θ</em></span>, 就可以对这个集合中所有的元素计数减1. 在算法结束的时候, 考虑任何一个不在当前计数集合中的元素a, 由于每次去除一个元素a的同时有<span class="math inline">1/<em>θ</em> − 1</span>个元素被去除, 所以如果元素a的频率是f(a), 那么一共至少去除了<span class="math inline"><em>f</em>(<em>a</em>)*1/<em>θ</em></span>个元素. 这个值是小于序列长度N的. 因此证明了f(a)小于<span class="math inline"><em>N</em> * <em>θ</em></span>的. 因此最后的集合是我们所求的高频元素集合的一个超集.</p>
<p>值得一提的是, 文中的算法产生的集合的确可能不等于我们所求的频繁元素集合, 而是一个“真超集”, 尤其是在没有给定这样的频繁元素一定存在这样的假定的时候, 反例尤其容易举. 于是再次计算这个集合中符合频率要求的元素就需要重新遍历一遍. 但是在<span class="math inline"><em>θ</em> = 0.5</span>的情形下, 如果的确存在这样的元素, 我们的原先的算法是能够保证最后的元素就是频繁元素的. 那么假设现在给定条件, 这样的频繁元素至少存在一个, 能否保证文中算法给出的集合中没有频率低于<span class="math inline"><em>θ</em></span>的元素呢? 或者能否举出反例呢?</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 01 Jun 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-06-01-frequent-elements.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Gsoc report 1st week</title>
    <link>http://blog.fantasticsid.com/posts/2010-05-30-gsoc-report-1st-week.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Gsoc report 1st week</h1>
                    
                    <span class="meta">
		    
			May 30, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>For the past week I haven’t really written much code yet. The major reason for this is I underestimated the amount of work I had to finish in school. Luckily the first week is largely spent on reading code and documentation. I’ve been reading Oreilly’s &lt;<XMPP : The definitive guide>&gt; by Peter Saint-Andre, Kevin Smith and Remko Troncon. The book is excellent in explaining the workings of XMPP to novice users or developers. For those who are interested I suggest taking a look at it through google book. For me the book is definitely worth reading because it covers the basics of XMPP as well as topics on jingle, in-band data transfer and file transfer through bytestream.</p>
<p>I’ve started a branch for jingle file transfer in the Gajim repository. The current file transfer in Gajim is based on “bytestream” protocol. To get a clear picture on how file transfer is triggered in Gajim, I have drawn some sketch explaining briefly the call stack. The first one shows what happens when you click the file transfer button in chat window. The second one shows from where the common.connection.Connection class gets the send_file_request method.</p>
<div>
<div class="figure">
<img src="/images/gajim_FT11-231x300.png" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/gajim_FT21-231x300.png" />

</div>
</div>
<p>So for the following 3 weeks I will be implementing jingle file transfer. The current default behaviour of transferring file with bytestream will be replaced with jingle file transfer as first choice (if possible, i.e the other side supports jingle FT as well, otherwise we fall back on original FT method). The original socks5bytestream transport method will be reused and incorporated into the mechanism.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 30 May 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-05-30-gsoc-report-1st-week.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Accepted as a gsoc2010 student</title>
    <link>http://blog.fantasticsid.com/posts/2010-04-27-accepted-as-a-gsoc2010-student.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Accepted as a gsoc2010 student</h1>
                    
                    <span class="meta">
		    
			April 27, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>This morning I received google’s email saying that I’ve been accepted as a summer of code student this year! As I said before I shall regularly update my progress on this blog. In the exuberance of joy I now want to blog about some general information regarding this year’s gsoc and my own project.</p>
<h3 id="general-information-about-gsoc-2010">General information about gsoc 2010</h3>
<p>Although called summer of code, the program was actually announced way earlier than the start of summer on 8th February when the temperature sometimes drops below the freezing point. Surely if you’re a student you could start 5-6 weeks later when the list of mentoring organizations has been published but at that time you would probably be busy with your courses at school. The application process lasts for about 1 month.</p>
<p>This year a total number of 1025 students are accepted to participate in the program. <a href="http://socghop.appspot.com/gsoc/program/list_projects/google/gsoc2010">Here</a> is the list of all accepted projects. The coding period begins on 24th May. Some students are already asking how many students from their countries are accepted. We will soon get that information from google’s opensource blog.</p>
<h3 id="about-my-project">About my project</h3>
<p>My gsoc project is “Jingle File Transfer and XTLS support for gajim”. <a href="http://www.gajim.org/">Gajim</a> is an open source <a href="http://www.xmpp.org/">jabber</a> instant messaging client written in python. As the project’s title suggests this is really a two-part project. I will be reading documentation, talking to the community members and diving into the source code for the next month. I will experiment with libraries I will use (farsight, libice, tls…). I am sure this experience will be an invaluable one.</p>
<p>The community members from jabber and gajim are all very kind. Prior to the program I didn’t know my mentor Yann Leboulanger. It is gsoc that teaches me how to talk to the community, contribute to the community and later establish yourself as a developer in open source community. In this sense open source means more than just open access to the source code, but more importantly, a welcoming community.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 27 Apr 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-04-27-accepted-as-a-gsoc2010-student.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>经典重访 如何按序生成集合的所有子集</title>
    <link>http://blog.fantasticsid.com/posts/2010-04-14-generating-subsets.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>经典重访 如何按序生成集合的所有子集</h1>
                    
                    <span class="meta">
		    
			April 14, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>如何列举一个集合的所有子集呢? 可能最先想到的是模拟二进制从0累加到111….111, 表示一个元素是否出现在子集中吧. 但是这种方法生成的子集序列的规律不那么明显, 如果要求生成的子集序列拥有一些良好的性质, 该怎么生成呢?</p>
<ol style="list-style-type: decimal">
<li>Gray Code</li>
</ol>
<p>如果要求生成的子集序列相邻两个子集之间只相差一个元素, 那么这种序列对应的二进制编码就是gray编码. 例如含有两个元素的集合A={a, b}, 按照这个方法就应该生成{}, {a}, {a, b}, {b}, 这样的子集序列. 对应的二进制编码为00, 10, 11, 01.</p>
<p>gray编码构造的方法很巧妙. 将序列编号为0到2^n-1. 第一个子集为空集, 对应00…00. 以后, 如果前一个子集编号为偶数, 就在对应编码的第一位改变值(0-&gt;1, 1-&gt;0). 如果前一个子集编号为奇数, 那么就在第一个1之后的位置改变对应的值. 很容易想象这个方法是如何生成gray编码的. 假设此方法能够生成长度为k-1的gray编码, 那么在长度为k的情况下, 前一半的最后一位显然是0, 且最后一个编码为00..010, 且此编码的编号为奇数. 这样, 下一个编码为00..011, 之后的序列也容易想象和前一半序列正好镜像生成. 这种构造方法来自于对n维正方体的顶点用gray code进行编码.</p>
<pre><code>0000 1000
1100 0100
0110 1110
1010 0010
0011 1011
1111 0111
0101 1101
1001 0001</code></pre>
<ol start="2" style="list-style-type: decimal">
<li>Lexicographical Order</li>
</ol>
<p>生成的子集按照字典顺序排列, 这也是常用的排列顺序. 而且生成的方法也很简单. 这里既然要以字典的顺序, 就应该认为集合中的元素是有全序的. 我们从空集开始, 每次在最后一个元素后面加上仅大于它的最小元素作为下一个子集. 如果不存在这样的元素, 我们删除这个最后元素, 将前一个元素增加为它的后继, 然后作为下一个子集返回.</p>
<pre><code>-
a
ab
abc
ac
b
bc
c</code></pre>
<ol start="3" style="list-style-type: decimal">
<li>Banker’s Sequence</li>
</ol>
<p>以上两种子集顺序中, 子集的大小都不是递增的. 如果要求得到满足某个性质的最小的子集, 那么用以上两种方法都会在得到答案前枚举很多没有用的, 比较大的子集. 在&lt;<Efficiently Enumerating the Subsets of a Set>&gt;这篇文章中, 作者提出了将子集按照元素个数进行枚举的算法. 其实生成的方法非常简单, 简单地说, 就是将最后一个能够向右移位的1向右移, 如果不存在这样的位, 就在首位增加1. 然后将改变的位之后的所有1连续排列在这个位之后.</p>
<pre><code>0000
1000
0100
0010
0001
1100
1010
1001
0110
0101
0011
1110
1101
1011
0111
1111</code></pre>
<p>这种方法是有状态的, 在<a href="http://www.thelowlyprogrammer.com/2010/04/indexing-and-enumerating-subsets-of.html">这篇博客</a>里提到了一种无状态生成banker’s sequence的方法. 要生成第i个大小为k的, n元素集合的子集, 由于前C(n-1, k-1)个元素都是以1开始的, 如果i大于C(n-1, k-1), 那么第一个元素就没有出现在子集中, 否则它出现在这个子集中. 接着可以递归生成第i - C(n-1, k-1) (或者仍然i), 大小为k-1(或者仍然k), n-1元素集合的子集. 这种方法的效率是线性的, 并且不需要如上面的方法逐个生成子集.</p>
<p>来源:</p>
<p>&lt;&lt;Combinatorial Algorithms&gt;&gt;</p>
<p>&lt;&lt;Efficiently Enumerating the Subsets of a Set&gt;&gt;</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Wed, 14 Apr 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-04-14-generating-subsets.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Collatz猜想</title>
    <link>http://blog.fantasticsid.com/posts/2010-03-07-collatz-conjecture.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Collatz猜想</h1>
                    
                    <span class="meta">
		    
			March  7, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>听同学们讨论过这个问题好几次了, 但是从来不知道原来这个问题是悬而未决的猜想. 任意自然数, 如果是偶数, 对其取半. 如果是奇数, 则乘3加1. 这个过程不断进行, Collatz猜想是: 最终这个序列一定会收敛到1. 一直以为这是个需要仔细想想的面试题而已, 结果竟然是一个猜想. 可能许多人都听说过这个问题, 却不知道它的名字以及它猜想的身份.</p>
<p>来源:</p>
<p><a href="http://xkcd.com/710/">xkcd</a></p>
<p><a href="http://en.wikipedia.org/wiki/Collatz_conjecture">wikipedia</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 07 Mar 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-03-07-collatz-conjecture.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>瞎猜也有道理 信封悖论</title>
    <link>http://blog.fantasticsid.com/posts/2010-02-22-envelopes-paradox.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>瞎猜也有道理 信封悖论</h1>
                    
                    <span class="meta">
		    
			February 22, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>这是一个非常有趣的问题: 有两个信封中写着两个不同的实数, 某人以相等的概率随机取一个信封给你看其中的那个实数, 设为A, 然后让你猜另外一个信封中的实数是比这个实数A更大还是更小. 问题是, 能否有一个猜测的策略, 使得你猜对的概率大于50%.</p>
<p>这个问题感觉很另人说不出滋味, 说不出个所以然来, 也就是很另人无语. 因为另外一个实数在这个实数A两侧, 似乎有一样的可能, 因此无论怎么猜都应该不会有50%以上的可能猜对啊. 现在回想, 第一次听到这个问题的时候似乎是在概率论的课上随便提到了一下, 当时竟然以为老师说错了这个问题. 不过今天再次碰到这个问题, 看了答案之后不得不佩服答案的巧妙.</p>
<p>假设较小的实数为A, 设函数<span class="math inline"><em>f</em>(<em>x</em>)=(1 + <em>e</em><em>x</em><em>p</em>(−<em>x</em>))<sup>−1</sup></span> . 注意对于任意实数x, f(x)都在0到1之间, 并且f(x)是单调递增的. 现在请以f(x)的概率猜测另外一个实数比看到的实数更小, 其中x是你看到的实数. 现在我们来计算你的猜测是正确的概率, 假设另外一个较大的实数是B, 那么p = 50% * (1-f(A)) + 50% * f(B), 由于A &lt; B, 因此f(A) &lt; f(B), 所以p &gt; 50%.</p>
<p>我认为这个解答的巧妙之处在于把“猜测”这个动作也用概率化, 引入了f(x)这样一个单调连续递增的, 值域为(0,1)的函数. 总之, 太奇妙, 太厉害了. 接着可以继续看一下关于<a href="http://en.wikipedia.org/wiki/Two_envelopes_problem" target="_blank">two envelopes problem</a>的一些历史和变形.</p>
<p>来源: <a href="http://blog.xkcd.com/2010/02/09/math-puzzle/">xkcd</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 22 Feb 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-02-22-envelopes-paradox.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Kungfu VS Cowboy</title>
    <link>http://blog.fantasticsid.com/posts/2010-02-08-kungfu-vs-cowboy.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Kungfu VS Cowboy</h1>
                    
                    <span class="meta">
		    
			February  8, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Economist这一期中关注了最近的中美问题. 这一期的杂志可以在ecocn的论坛找到. 里面的一些插图很有意思, 贴上来.</p>
<div>
<div class="figure">
<img src="/images/cva1.png" title="Kungfu vs Cowboy" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/cva2.png" title="Kungfu vs Cowboy" />

</div>
</div>
<div>
<div class="figure">
<img src="/images/cva3.png" title="Kungfu vs Cowboy" />

</div>
</div>
<p>以上都是Economist杂志的, 图的作者是Peter Schrank. 如果你觉得有侵害你的权益的内容, 请联系我.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 08 Feb 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-02-08-kungfu-vs-cowboy.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>一个图与其补图染色数之和的上界</title>
    <link>http://blog.fantasticsid.com/posts/2010-01-26-upper-bound-chromatic-complement-graph.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>一个图与其补图染色数之和的上界</h1>
                    
                    <span class="meta">
		    
			January 26, 2010
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>我们来证明对一个图<span class="math inline"><em>G</em></span>以及它的补图<span class="math inline"><em>G</em>′</span>进行染色, 两张图的染色数之和小于图<span class="math inline"><em>G</em></span>的阶加1. 也就是说, 对于一张完全图K, 需要使用<span class="math inline"><em>n</em> = |<em>K</em>|</span>种颜色进行染色, 而无论如何选取<span class="math inline"><em>K</em></span>的一个子图, 剩下的边形成的图与这张子图染色数之和最多只需要额外多一种颜色.</p>
<p>命题: <span class="math inline"><em>χ</em>(<em>G</em>)+<em>χ</em>(<em>G</em>′) ≤ <em>n</em>(<em>G</em>)+1</span></p>
<p>对于图<span class="math inline"><em>G</em></span>, 我们将顶点度数从大到小排序, 然后对顶点逐个染色. 显然这样的染色方法能够得到一个图的染色数至多为图中最大度数加1这样的结论. 更好一点的结论是</p>
<p><span class="math inline"><em>χ</em>(<em>G</em>)≤<em>m</em><em>a</em><em>x</em><em>m</em><em>i</em><em>n</em><sub><em>i</em></sub>(<em>d</em><sub><em>i</em></sub>, <em>i</em>)+1, <em>i</em> = 0, 1, ..., <em>n</em>(<em>G</em>)−1</span></p>
<p>其实, 后一结论能够直接得到我们所需要证明的命题. 因为对于一个图<span class="math inline"><em>G</em></span>和它的补图<span class="math inline"><em>G</em>′</span>来说, 这两个值之和一定是不大于<span class="math inline"><em>n</em>(<em>G</em>)+1</span>的. 如下图.</p>
<div>
<div class="figure">
<img src="/images/G.png" title="G" />

</div>
</div>
<p>对于这样的一个图G, 我们画出顶点度数以及<span class="math inline"><em>y</em> = <em>i</em></span>这两个序列的图像:</p>
<div>
<div class="figure">
<img src="/images/plotG.png" title="G" />

</div>
</div>
<p>我们发现, 这两个序列在(3,3)处有相交, 这个即是上面得到结论中的值, 即这个图可以用至多4种颜色进行着色. 我们发现, 其实将此图旋转180度, 得到的图像和<span class="math inline"><em>G</em>′</span>的图像是一样的:</p>
<div>
<div class="figure">
<img src="/images/plotGbar.png" title="图G的补图顶点的度数" />

</div>
</div>
<p>对于任意一个图<span class="math inline"><em>G</em></span>, 这个结论始终是成立的(实际上仔细考虑, 可能取得最大值的点不是同一个, 但是我们可以想象这两个值之和始终是不大于<span class="math inline"><em>n</em>(<em>G</em>)−1</span>的. ) 这样, 我们就得到<span class="math inline"><em>χ</em>(<em>G</em>)+<em>χ</em>(<em>G</em>′) ≤ <em>n</em>(<em>G</em>)−1 + 1 + 1 = <em>n</em>(<em>G</em>)+1</span></p>
<p>来源: 图论考试</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 26 Jan 2010 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2010-01-26-upper-bound-chromatic-complement-graph.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Doctor Who卡通造型</title>
    <link>http://blog.fantasticsid.com/posts/2009-12-28-doctor-who-cartoon.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Doctor Who卡通造型</h1>
                    
                    <span class="meta">
		    
			December 28, 2009
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<div>
<div class="figure">
<img src="/images/0912072155ea2ed95a76232d3d.jpg" title="Doctor who" />

</div>
</div>
<p>来源: <a href="http://bbs.flyine.net">flyine</a></p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 28 Dec 2009 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2009-12-28-doctor-who-cartoon.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Haiku</title>
    <link>http://blog.fantasticsid.com/posts/2009-09-04-haiku.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Haiku</h1>
                    
                    <span class="meta">
		    
			September  4, 2009
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<blockquote>
<p>old pond…</p>
</blockquote>
<blockquote>
<p>a frog leaps in</p>
</blockquote>
<blockquote>
<p>water’s sound</p>
</blockquote>
<p>这是一首<a href="http://en.wikipedia.org/wiki/Haiku">Haiku</a>, 日本的一种短小的诗的体裁. Haiku一般由三句组成, 通常有17个音节, 分成5, 7, 5三组. 传统Haiku的最大特点是每一首Haiku中都带有季节的象征词语. 这些特点和限制在后来的Haiku中已经没有了. 以上这一首Haiku是最著名也是我读到的第一首Haiku. 我来用拙劣的中文翻译一下:</p>
<p>老池 蛙跳, 入 扑通…</p>
<p>看上去弱智吧.虽然整体上我对诗啊什么的没有兴趣, 但是从来没有觉得它们很无聊, 我理解它们存在的意义. 但是由于我读到的第一首Haiku是这样的, Haiku成了一个例外. 也就是这个原因, 我从来没有打算仔细看看Haiku的Wiki页面. 但是最近看到一个研究表明, 人类的记忆从短期到长期需要一个标记(tag)的过程, 作者玩笑说写一首Haiku可能会有效. 另外还有听说过诸如Haiku OS的项目等等. 这让我感到似乎Haiku这个日本起源的东西, 在西方也有一定的欢迎程度. wiki上说原来Haiku还有一段从日本流传到西方的历史. 结果就是西方形成了<a href="http://en.wikipedia.org/wiki/Haiku_in_English">自己的Haiku</a>风格. 看来这种容易接受又短小的体裁传播就比较快. 而且也有不少的有意思的Haiku, 使Haiku的存在有了意义. 网络上也有各种热衷于Haiku的社区. 比如<a href="http://www.dailyhaiku.org/">DailyHaiku</a>, <a href="http://simplyhaiku.com/">Simply Haiku</a>, <a href="http://worldhaikureview.googlepages.com/">World Haiku Review</a>, <a href="http://www.hsa-haiku.org/frogpond/">Frogpond</a>等等. 这里选取Simply Haiku上首页的一首:</p>
<blockquote>
<p>it stirs the soul</p>
</blockquote>
<blockquote>
<p>of even</p>
</blockquote>
<blockquote>
<p>the most</p>
</blockquote>
<blockquote>
<p>indifferent person—</p>
</blockquote>
<blockquote>
<p>first autumn winds</p>
</blockquote>
<p>还有点意思, 迎接一下秋天. 下次预感记忆将出现问题时, 也可以写首Haiku, 给记忆一个tag.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 04 Sep 2009 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2009-09-04-haiku.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Dvorak键盘</title>
    <link>http://blog.fantasticsid.com/posts/2009-07-18-dovrak-keyboard.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Dvorak键盘</h1>
                    
                    <span class="meta">
		    
			July 18, 2009
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>我曾经想过现在我们的键盘排列是不是最科学的, 是否最有利于我们打字. 所谓科学的键盘, 应该尽可能减少我们打字的移动, 并且按照手的结构, 让中间的三根手指承担最最重要的责任. 这就如哈夫曼编码一样, 中间的三根手指在中间一排键盘的输入是码字比较短的, 只有让它们代表频率最高的字母时才比较有效. 键盘排列的设计还需要考虑字母在各种语言中的频率, 以及常见的字母组合. 我们常见的QWERTY键盘, 把A, S, D, F, G, H, J, K, L这几个字母放在了中间, 说实话, G, J, K, L这样的几个字母并不是使用频率较高的. 有的字母比如I, O, E, T明显出现频率更加高. 如果我们把这些字母位置调换一下, 应该能够在手移动更少的前提下, 造出更好更科学的键盘. 这种键盘原来真的存在, 它就是Dvorak键盘, 而且这种键盘早在上世纪30年代就已经发明了. 原先的QWERTY键盘的设计没有考虑到键盘输入的速度, 只是为了减少打字机的打印条互相卡住的情况. 因此它的效率并没有最优. 而Dvorak设计的键盘排列是他考察了语言中字母的出现频率后设计的键盘排列方式, 我们可以从图中看出, 这种键盘将A,O,E,U,I,D,H,T,N,S这几个字母放在了中间一排, 于是很多的词语都不用离开手的原位就能够输入了.</p>
<div>
<div class="figure">
<img src="/images/dvorakkeyboardlayout.gif" title="Dvorak键盘" />

</div>
</div>
<p>我们来做一个统计, 统计一下英语单词里面有多少是分别用两种键盘不离开原位就能够输入的. 用如下的程序测试words.txt文件里面的词语</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">dvo <span class="op">=</span> <span class="st">&#39;aoeuidhtnsAOEUIDHTNS&#39;</span>
qwe <span class="op">=</span> <span class="st">&#39;asdfghjklASDFGHJKL&#39;</span>

dvon <span class="op">=</span> <span class="dv">0</span>
qwen <span class="op">=</span> <span class="dv">0</span>

<span class="kw">def</span> dvorak(word):
	<span class="cf">for</span> l <span class="kw">in</span> word:
		<span class="cf">if</span> <span class="kw">not</span> l <span class="kw">in</span> dvo:
			<span class="cf">return</span> <span class="va">False</span>
	<span class="cf">return</span> <span class="va">True</span>

<span class="kw">def</span> qwerty(word):
	<span class="cf">for</span> l <span class="kw">in</span> word:
		<span class="cf">if</span> <span class="kw">not</span> l <span class="kw">in</span> qwe:
			<span class="cf">return</span> <span class="va">False</span>
	<span class="cf">return</span> <span class="va">True</span>

f <span class="op">=</span> <span class="bu">open</span>(<span class="st">&#39;./words.txt&#39;</span>, <span class="st">&#39;r&#39;</span>)
<span class="cf">for</span> w <span class="kw">in</span> f.readlines():

	<span class="cf">if</span> dvorak(w[:<span class="op">-</span><span class="dv">1</span>]):
		dvon <span class="op">=</span> dvon <span class="op">+</span> <span class="dv">1</span>
	<span class="cf">if</span> qwerty(w[:<span class="op">-</span><span class="dv">1</span>]):
		qwen <span class="op">=</span> qwen <span class="op">+</span> <span class="dv">1</span>

<span class="bu">print</span> <span class="st">&#39;dvorak:&#39;</span>, dvon
<span class="bu">print</span> <span class="st">&#39;qwerty:&#39;</span>, qwen</code></pre></div>
<p>程序的输出如下 :</p>
<div class="sourceCode"><table class="sourceCode numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
</pre></td><td class="sourceCode"><pre><code class="sourceCode">dvorak: 3481
qwerty: 220</code></pre></td></tr></table></div>
<p>差别是非常明显的, 如果用Dvorak键盘, 我们能够在不移动的情况下就直接输入3000多的词语. 很多词语比如, the, that都可以在手指不移动到其他键位的情况下输入.</p>
<p>可惜的是Dvorak键盘并没有很好的推广, 使用的范围很小. 也找不到哪里有卖, 淘宝都没有. 不过我们可以用键盘的贴膜改造QWERTY键盘, 然后再系统中设定一下. 现在的操作系统都有键盘排列的设定. 开始的时候肯定不适应的, 目前我也在学习过程中,很汗颜, 在<a href="http://play.typeracer.com/" target="_blank">typeracer这个游戏</a>里我现在用QWERTY键盘的速度是60-70WPM, 而用Dvorak键盘只有10WPM左右. 但是相信等到小脑的突触连接形成之后, 就能享受手指的飞舞了. 到时候, 西瓜进, 代码出.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 18 Jul 2009 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2009-07-18-dovrak-keyboard.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>独立日</title>
    <link>http://blog.fantasticsid.com/posts/2009-04-23-independence-day.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>独立日</h1>
                    
                    <span class="meta">
		    
			April 23, 2009
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>是科幻大片, 早就有所耳闻, 但直到昨天才看了. 我觉得这影片开始的时候还是很神秘的, 里面的外星人来地球的目的也和其他的科幻不同, 他们不是来“教化”, “惩罚”人类的, 不是神一样的存在, 而是为了消耗资源而在星际间转战. 他们的科技远远超过了人类. 数量众多又邪恶. 但是令人郁闷的在于影片如何处理这些外星人的. 可能是影片花了太多时间来显示这些外星人的神秘, 导致对人类如何击溃外星人没有很满意的交待. 之前原子弹这种东西都没有摧毁那个母舰, 竟然最后被一个MIT学EE的牛人就这么上传病毒搞定了. 人家外星人的系统能调度这么多飞行器, 控制着母舰外的防护膜, 会没有考虑到病毒这一说? 而且外星人有特殊能力, 周围的人类可以被随意搞得头疼抓狂. 就算他们走下来随意逛逛人类就受不了了. 所以病毒说也太牵强了. 最搞笑的是病毒上传以后竟然外星人屏幕上出现了骷髅做鬼脸. 就是从这里开始, 影片从神秘转变成搞笑. 既然它这么搞笑, 我也瞎编一点.</p>
<p>要我说, 这影片前面部分在情节上还是非常引人入胜的, 后面的话, 还不如改成外星人到了非洲, 看到那里土著居民击鼓跳舞, 激发了他们深藏于内心的“美”. 原来银河系所有智能生物都是起源于一个叫作 ulmaesolieu 的古老星球, 从那里演化出的智能生物包括人类和其他外星生物, 虽然在科技，文化，外形，智能上各有不同快慢，但是绘画音乐等等却早就在生命基本结构中扎根. 那些外星人科技发达了，但是却失去了艺术文化的熏陶，现在突然见到土著非洲人跳舞击鼓，不由让他们觉得是天籁之音, 顿时取消了消灭人类的计划. 接着他们邀请地球人到他们星球成立各种乐队，在银河系开巡回演唱会. 最后的场景是外星人和地球人作为银河系的子民在某个贫穷落后的星球举办爱心慈善演唱会为那个星球的生物筹集氧气和水. 然后再点题和谐星系等等之类的.</p>
<p>其实这个想法完全是玩笑的，但就是觉得独立日结尾太唐突, 太不令人信服. 总觉得它原本可以成为像黑客帝国那样令人深思的电影. 有点可惜.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 23 Apr 2009 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2009-04-23-independence-day.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>42</title>
    <link>http://blog.fantasticsid.com/posts/2009-04-16-fourty-two.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>42</h1>
                    
                    <span class="meta">
		    
			April 16, 2009
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>量子论中种种诡异的现象有多种解释, 其中哥本哈根解释是最受青睐的一种. 但是有一种解释, 多世界解释, 却是最值得我们普通人玩味的, 同时也是第二受物理学学者青睐的解释.</p>
<p>首先我们看看当我们从宏观的世界来到微观粒子世界时, 我们会有哪些不合适的观念. 先来回想双缝实验. 我们高中都做过水波的干涉实验, 两个振动源产生的波会在一个面上产生强弱交替的振动图样. 这是因为水波, 即水传播的运动形式, 相互叠加形成的. 在双缝实验中, 传播的不是介质中的波, 而是光子. 但是光子累加后在双缝远处的平面上仍然得到了类似水波干涉的图样. 如果有人认为那时因为光也是一种波, 那么电子该怎么解释呢? 在这个实验中, 如果光换成电子, 照样能够形成这样的类似的图样. 那是不是我们认为的电子, 在我们想象中是原子核外“公转”的“球”, 也是一种波呢? 那么, 物质, 和一种运动形式, 波, 是不是已经界限模糊了呢? 好了, 总之当我们讨论微观粒子时, 许多宏观物体的概念是不能找到对应的. 因此, 如果有人说诸如微观粒子可以同时通过两个缝隙, 可以同时处于两种状态时, 我们并不能够用诸如一个球不能既在门框内也在门框外一类的话反驳. 同样的, 如果有人说, 当我们看到微观粒子的一个经典图像时, 我们是处在一个观测之前的世界分裂后的一个世界中, 而这个世界中正好包含了当前的经典图像, 我们也不该感到特别惊讶.</p>
<p>于是我们可以想象, 在每一次对量子的测量, 或者观察后, 这个世界都在这个节点上分裂成了原本处于概率叠加态的量子的各个具体状态所代表的世界. 这种想法能够对我们理解薛定谔那个猫的假设实验有所帮助, 当然也能让我们去幻想所谓的勇敢者的量子游戏: 一个人用一把以原子是否衰变确定是否发射子弹的枪对着自己射击. 虽然可能他就死了, 但是按照多世界的说法, 将有一个世界中的这个人发现他的枪不断走火. 这里有一点我想不通. 有人说这个勇敢者的实验可以验证多世界, 但是能吗? 即时这个人一直看到自己的枪走火, 他也不能确定将来一直有这么个世界, 其中的枪永远是走火的.</p>
<p>当然这些研究的前沿与我这个外行是无关的, 不过可以幻想, 思考, 不着边际总是令人愉快的. 就如芝诺那些所谓悖论, 现在可以用一句话讲清楚: 把“思考整个过程发生的时间”和“整个过程发生的时间”搞混了. 还有飞矢不动等等都一样, 现在只能当作饭后的笑谈. 但当时芝诺一定非常快乐的. 这还令我想起一个证明宇宙没有边界的证明: 假设宇宙有边界, 那么我们向这个边界投掷一竿标枪, 这时有两种情况: 1. 标枪刺进了宇宙边界, 说明宇宙边界外还有空间. 2. 标枪被挡住了, 那说明宇宙边界外有东西去挡这个标枪. 从而宇宙是无界的. 当然, 芝诺在那个时代思考这个问题, 还是令人敬畏的, 能够想象他在那个时代是属于相当拉风的男人.</p>
<p>所以我们可以不断发展多个世界的观念, 或者说平行世界的想法. 事实上, 这种幻想早就出现在众多的科幻剧中了. &lt;&lt;Doctor Who&gt;&gt;中就有博士把Rose Tyler带到另一个平行世界中躲过了劫难, 还有Dalek种族屡次试图从平行世界中穿越, 还有博士遇到他的前任, 还有极度有趣的&lt;&lt;Blink&gt;&gt;那集, 也算是平行世界的交叉引申出的幻想吧. 这里又要感慨一下时代好了, 芝诺那个时代幻想只能用来写书以及打发时间, 我们的时代幻想可以拍电视剧, 搞创意广告, 搞研究做实验, 写博客以及打发时间. 不同时代的人做不同时代的事.</p>
<p>深入的思考我们还能联系到诸如祖母佯谬, 宇宙观, 什么的, 这一圈大了去了. 限于经典粒子组成的大脑, 就不继续卖傻了.以上最近读科普读物, 结合以前想到的. 只言片语, 再加上自大学后就没有坚持理想, 只能算是一个小小的纪念, 保存我仅剩的好奇.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 16 Apr 2009 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2009-04-16-fourty-two.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Khoomei</title>
    <link>http://blog.fantasticsid.com/posts/2009-03-09-khoomei.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Khoomei</h1>
                    
                    <span class="meta">
		    
			March  9, 2009
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>第一次听到<a href="http://khoomei.com/">Khoomei</a>是在电视上偶尔看到青年歌手大赛, 两个少数民族歌手发出一种奇妙的类似鸟叫的或者电子乐的声音. 顿时我觉得很好奇, 一查之下才知道这是种少数民族的歌唱方法.</p>
<p>Khoomei又叫喉唱, 或者是和谐音. 首先, 一个音源, 比如一根弦的震动产生音波时, 是以一系列的频率震动的. 而这些震动频率中最低的那个频率称为固有频率, 其他的频率通常是这个固有频率的整数倍. 这一系列的频率的不同强弱, 决定了一个音源的音色.</p>
<p>Khoomei的技巧在于产生共鸣腔, 增强某一个频率的音强. 这个共鸣腔就是我们的口腔. 唱Khoomei时首先要用喉发出一个中等音高的音. 不过共鸣腔的形成比较“绕口”. 我以前一直不知道怎么形成这个共鸣腔, 因此一直不能发出正常的共鸣. 直到我看到<a href="http://stason.org/TULARC/travel/tuva/11-How-can-I-learn-to-sing-khoomei.html">这个</a>. 简单的说, 下一步要做的是把舌头贴近上颚, 让后尽量封住整个口腔, 然后在右边留出一个通道. 这时调整舌头, 嘴, 就可以调整发出的音的音高.</p>
<p>当然Khoomei有很多的唱法, 有的唱法发出的和谐音音强更大, 也就更明显. 其他的Kargyraa, Sygyt都可以找到相关的视频.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Mon, 09 Mar 2009 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2009-03-09-khoomei.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>1011df/du还好fourfivefire</title>
    <link>http://blog.fantasticsid.com/posts/2007-12-16-1011dfdufourfivefire.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>1011df/du还好fourfivefire</h1>
                    
                    <span class="meta">
		    
			December 16, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>这一个月, 并没有多余的时间能挤.</p>
<p>就像看到世间最美时, 你并不能将它用人类的语言写下来一样, 对过去这一段时间自己究竟做了什么, 我也只能记个大概, 片花一样闪过.</p>
<p>记得操作系统课的课题项目让我快崩溃. 终于完成那天, 天气不得不很晴朗, 下午, 国际金融中心那幢楼已经能反射阳光进寝室.</p>
<p>记得几本教科书本本都可以从书加上掉下来砸死我, 堆起来比头重, 叠起来比头高, 卖起来1元一斤.</p>
<p>记得鸭司终于来烤我, 眼看水平—时间曲线在过去那么多时间是如此稳健的稳定, 也就豁出去了. 幸运的是烤我那几天, 温度和光照条件都不错. 烤眼睛的时候, 一顿混乱, 跌跌撞撞, 这题不能确定, 用感觉, 卷面上浮出一行字:烤焦就烤焦. 烤鸭脚的时候, 我们被要求用一根塑料棍子谈谈世界外交和民生的问题. 烤鸭嘴的时候, 鸭嘴说鸭话, 嘎嘎嘎, 还算有弹性.</p>
<p>记得几次在漫吧碰到那群人, Tareva说话实在太抽象听不懂, 很有挫折感. 同去的朋友最近消灭一个人生不完整理由.</p>
<p>记得在一门课考试前, 坦然在人群里说, 该挂的就该挂, 这是我们优秀青少年应该做的, 不用谢, 再见.</p>
<p>奋斗得来的空闲中:</p>
<p>Tudors, Heroes, IT crowd, spooks, doctor who一起看, 古代人现代人搞笑的严肃的搞IT的做皇帝的. 这个Rabbit最近还读起那个Hobbit. 寒假可以学学精灵文字, 话说是想当的飘逸, 学这种东西的人应该是相当有空啊…</p>
<p>刚刚婚礼现场, 心想forever love这歌, 多么适合. 果然最后响起了, 音效很不错, 和耳机里面的不同, 撕心裂肺, 上天入地, 死去活来的好听.</p>
<p>……</p>
<p>接着的正是放假前死去活来的一段.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 16 Dec 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-12-16-1011dfdufourfivefire.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>_/</title>
    <link>http://blog.fantasticsid.com/posts/2007-11-04-rant.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>_/</h1>
                    
                    <span class="meta">
		    
			November  4, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>刚才还很沮丧.</p>
<p>网络没断, 但是又有何用.</p>
<p>咚…楼下好像有人拆墙.</p>
<p>旁边有人享受炒饭.</p>
<p>歌曲过分婉约.</p>
<p>牛人和牛顿拼命完成, 牛顿惨遭淘汰.</p>
<p>闭眼.眼前一片黑色漩涡, 向地下飞去.就这样一去不返吧, 早晚的.然后拔掉后面那根插头, 反正没有我要的信号.</p>
<p>醒来做听力练习, 听那个英国中年男人腻腥的语调.</p>
<p>正确率进步5道.</p>
<p>在桌子前开心咧着嘴笑, 笑到觉得自己可笑.</p>
<p>原来这么简单就可以快乐.</p>
<p>旁边的炒饭消耗完毕.</p>
<p>楼下安顿了.</p>
<p>歌曲很革命.</p>
<p>牛人变成星星.</p>
<p>插头没有信号, 做个独立的大脑, 自己一边快乐去.</p>
<p>现实里的快乐.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 04 Nov 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-11-04-rant.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>ms i c it song</title>
    <link>http://blog.fantasticsid.com/posts/2007-10-21-msicitsong.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>ms i c it song</h1>
                    
                    <span class="meta">
		    
			October 21, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>昨晚在餐馆等座位吃饭, 闲来无事观察周围. 站着的人, 坐着的人, 以及一个同样闲来无事, 踢毽子的小女孩.</p>
<p>忽然之间, 一堵黑色条纹墙壁挡住了我的视线. 虽然觉得不可思议, 宛若从天而降, 但又那么真实, 触手可及.</p>
<p>话说那时小女孩跑去靠在墙上, 墙左右晃荡一下又终于立稳. 这真教人捏汗, 又不得不让周围的人拍案叫绝.</p>
<p>好吧, 那不是墙, 那是多年不见, 不抽烟但估计喝酒的“猴头菇”. 一切都没有变, 除了那幅当年被球蹂躏的眼镜. 当年他戴得银光闪闪, 现在为什么用褐色的镜片？</p>
<p>这么说来, 刚才那个踢毽子, 推墙壁的就是他的—-“妞妞”, 据说是很乖的妞妞~</p>
<p>想到这, 我已经不能自拔陷入giggle loop了.</p>
<p>幸好他先走一步. 再看见时, 我正在学习张亮亮教授想象餐馆这个操作系统. Process, thread, interrupt, multiprogramming, starvation, deadlock. 他给我的一张优惠券一下子把我带回到三个瓶子换一瓶汽水的问题.</p>
<p><br />
/-<em>/-</em>/-<em>/-</em>/-<em>/-</em>/-<em>/-</em>/-<em>/-</em>/-<em>/-</em>/-<em>/-</em>/-<em>/-</em> 异常华丽的分割线.</p>
<p><br />
每天最放松的活动便是洗澡和买黑暗料理了. 正是基于这样的共识, 鲍伯经常和我同去, 途中自然少不了chinwag. 鲍伯同学最近说他是这样翻译To be or not to be的:是, 还是不是.</p>
<p>我在想沙爷爷的东西都好难读, 如果这样翻译一下, 搬上舞台, 肯定是场不错的闹剧.</p>
<p>说到难读, 最近感觉Potter还是儿童了一点, 于是愤愤来到书店拿一本双城记就载回家, 心里想英文叫A tale of two cities中文叫双城记, 比上To be or not to be 之于生死要直白多了, 读得, 读得. (西游记沙僧曰:比之流沙河怎样？去得，去得). 满心欢喜翻开第一页, 嗯, 没有什么不认识的, 排比, 排比. 第二页, 排比, 排比, 第三页, 排比, 排比……而且越排比用词越高级, 逼我去看GRE吗. 让我回到Potter的生活. WINGARDIANLIMOSA…</p>
<p>昨天上English Literature Reading, 教授说: “像Necklace 这样的还是比较简单的, 不会像双城记那样描写一个天气要一大段, 那里面的词语”…握个手.</p>
<p>最近天气不好, 时不时有PROJECTs降临. 其实那些小玩意怎么用得上project这个词, 小小练习而已. 只不过因为我们的无知, 因为成群的练习一起来, 于是只好用PROJECTs来描述我们的处境. 哎!此刻, 一定有不少兄弟正以同样的手速敲键盘, 写C, 写PHP, 写C#…</p>
<p>写代码的时候, 时间从bug中溜走.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 21 Oct 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-10-21-msicitsong.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>HP…MATRIX</title>
    <link>http://blog.fantasticsid.com/posts/2007-09-23-hp-matrix.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>HP…MATRIX</h1>
                    
                    <span class="meta">
		    
			September 23, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>一个黑色箱子, 一群黑衣巫师, 一个黑衣巫师顶头香蕉. 他从箱子里拿出一根根权杖, 分别挥挥, 月亮, 太阳, 黑暗, 光明, 死亡依次出现. 但是, 这些不是消耗性宝物吗?只能用一次啊, 以后就没了, 你怎么一下子就用完了, 疑问. 看来是个没有文化的黑暗巫师, 真可怕.</p>
<p>一群毒蛇, 逐条拔牙.</p>
<p>空军某部队, 坐在草坪上. 他递给我一架纸做的，手掌大小的直升机, 自然是要飞, 但是是人机同飞. 第一飞, 平衡不好, 摔了. 我问:“这引擎是什么做的?”答:“模型赛车里面的马达.”我疑惑得看着他, 他自信得回看我, 我放心得相信了他. 再飞, 直升机稍显勉强得飞, 没有操作杆什么的, 全靠身体调整平衡, 风还迎面呼呼出来…</p>
<p>如果你醒来之前在做梦, 那么醒来瞬间肯定与梦有很大的联系. 今天是要把直升机还给人家, 但就是抓在手里给不出去. 一番挣扎无奈后, 发现自己的手正拖着枕着头的枕头向上提…蛮力!内力!!</p>
<p>上次飞是在米黄色的飞船里面, 飞船前部是巨大的’落船窗户’. 再上次飞是在教学大楼里面, 徒手飞, 好像矩阵模拟训练一样.</p>
<p>很过瘾.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sun, 23 Sep 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-09-23-hp-matrix.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>夏天走了</title>
    <link>http://blog.fantasticsid.com/posts/2007-08-09-summer-is-yutou.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>夏天走了</h1>
                    
                    <span class="meta">
		    
			August  9, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>这几天偶尔望望窗外, 看见蓝天白云, 是最蓝的那种和最白的那种.</p>
<p>——————————————————————–</p>
<p>电脑荧幕太暗, 需要窗帘把天空遮住. 是我遮的, 还是电脑让我遮的?</p>
<p>Modem上的二极管一天眨了我一年眨眼次数, 听一头驴的话工作, 一头听我的话的驴, 一字不差. 但是这堆东西看起来很傻.</p>
<p>无线网络信号铺满整个四维空间, 他们名字有个特点, 都带一个“link”, 要选择最强的那张和世界绑在一起, 选错了, 就好像被留在莫名的未定义的空间里.</p>
<p>股票市场走势起落很大, 线路很诡异, 散户们还在投机取巧.</p>
<p>哈里波特, 这本儿童读物, 还是充满异域情调, 闻所未闻, 见所未见的字.</p>
<p>狗, 白天唯一可以语言交流的同伴, 会不会受东城英语的影响, 操一口东城狗吠声, 它主人会不会受狗影响…?</p>
<p>——————————————————————–</p>
<p>夏天, 还想在走之前见你一面.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 09 Aug 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-08-09-summer-is-yutou.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>Yesterday All my troubles seemed so far away…</title>
    <link>http://blog.fantasticsid.com/posts/2007-07-05-yesterday.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>Yesterday All my troubles seemed so far away…</h1>
                    
                    <span class="meta">
		    
			July  5, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>积极面对所有挫折,即使是痛不欲生的那种…<br />
<br />
<br />
<br />
<br />
<br />
啊——————————</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 05 Jul 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-07-05-yesterday.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>果实</title>
    <link>http://blog.fantasticsid.com/posts/2007-06-16-fruit.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>果实</h1>
                    
                    <span class="meta">
		    
			June 16, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>原来书只要看完一半, 就能看完, 如果你看到一半之前就看不下去了, 那就真的看不完了.</p>
<p>Jane Austin果然是雕象牙出生, 几个人就呆在那喝喝水吧, 聊聊天吧, 想想心事吧, 达西看看伊利沙, 伊利沙看看珍, 珍看看宾利, 宾利再看看达西, 能写一个chapter. 这功夫比&lt;&lt;Little Britain&gt;&gt;那位“Chapter One:The end.”厉害多了.</p>
<p>其实就情节看来, &lt;&lt;Harry Potter&gt;&gt;明显应该更好看. 不过, 要暂时小停, 准备考试, 开始预习专业课了.</p>
<p>周四的时候去浴室路上, 被一棵白玉兰树上的果实“咚”一下砸中. 那头的头当时被眩晕5秒, 不知天降何物. 醒来自检并没有发现有硬件异常, 大笑. (看来是软件异常). 那果实自此呆在地上一动不动. 我将它拾起, 它绿色的时装很坚硬, 牢牢包裹着里面, 还带点刺状纹理. 它在我手上任我玩耍, 却甚是逍遥自在, 毫无悔过之意. Bob同学看不下去了, 竖直向上抛起还它一次撞击水泥地的经历. 我在旁边想, 它砸我头干啥呢?有意义吗?快乐吗?有没有对四化建设作出贡献呢?社会会更和谐吗?国家更繁荣昌盛吗?国际合作更加紧密了吗?种族歧视减少了吗?果壳中的宇宙因为撞击果壳外的脑袋产生怎么样的变化呢?这种变化是至关重要而不可缺少的吗?能使大统一理论有任何发展吗?怀着这些问题, 我重新将它从冰冷潮湿的水泥地上捡起, 扔在了浴室前面的草坪里面. 不管怎么样, 我也当一回种子的传播者. 鸟, 蝶什么的传播种子, 它们得到了食物. 我传播种子, 我得到了人文和哲学上的思考.</p>
<p>话说我这头被砸中之前的那节体育课上, 发球得了个五角星满分, 人品着实泛滥了一下. 这果实砸我是不是一个转折点还不得而知. 但是我不计前嫌, 并且将它妥善安置, 想必人品只增不减.</p>
<p>周五回来再轻轨上再一次见到胖老师, 导致连续两周在那里碰到他. 时光荏苒, 岁月流逝, 胖老师还是那么得胖, 一点也没有受到外界媒体和公众目光的压力, 始终坚韧不拔, 我行我素. 第一次是在英语课上见到他, 他说他精通德语法语日语英语……他说英语老师人很好, 一定不会把他赶走. 后来在理图碰到他, 被管理员要拖出去, 他奋力抵抗, 以一抵二, 完成任务. 后来在军理课上碰到他, 在英语课上又碰到他…胖老师无处不在.</p>
<p>我系Alpha型的鞋带, 所以它就砸我?</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 16 Jun 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-06-16-fruit.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>李查得.福来兮曼</title>
    <link>http://blog.fantasticsid.com/posts/2007-06-09-play.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>李查得.福来兮曼</h1>
                    
                    <span class="meta">
		    
			June  9, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Grant的课每次总有个只能看不能听的Dr AmA.</p>
<p>该我们了.</p>
<p>好吧, 排练我迟到了, 迟到一小时. 就算请假也不算, 一定要给我主角, 太客气了! 其实, 我一直在想呆在角落里从事送送道具的工作.</p>
<p>拿到脚本,玩弄一下. google:Richard Freshman, 看到eserver.org,google:drama, 又见eserver.org . “被噎死共识”说, 差不多…</p>
<p>看完脚本, 发现整个过程里面我说的基本都属于语气词: Yes, Sure, ’course, yeah, no, really, what, Uh, Um, pardon, ok, thanks… 基本不具有正常人类说话的特点.</p>
<p>坐在6楼半, 自己虚拟一个场景, 再把自己放进去, 暂时精神分裂一下.</p>
<p>周五前一天晚上, 没有记错的话也就是周四晚上, 最后的准备. “你怎么念/da:ns/的, 太难听了, 念/daens/啊!”</p>
<p>周五前两节课, 睡到自然醒…</p>
<p>周五三四节课, 4人+1头上讲台了, 那头竟然没有忘词儿! 台词儿!</p>
<p>很喜欢这样的活动, 几个人一起合作, 表演一下, 有很大的空间, 有不少的目光. 记得高一演牛津课文, 表演前一天忘了排练, 结果上场前15秒解决一切问题, 任意发挥, 粉笔香烟, 老大老二. 记得高二又演牛津课文, 直接上去, 面试考官, 可口可乐…</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 09 Jun 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-06-09-play.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>right kerfuffle</title>
    <link>http://blog.fantasticsid.com/posts/2007-06-01-right-kerfuffle.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>right kerfuffle</h1>
                    
                    <span class="meta">
		    
			June  1, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>It might be a right kerfuffle.</p>
<div>
<div class="figure">
<img src="/images/mickey.jpg" title="right kerfuffle" />

</div>
</div>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 01 Jun 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-06-01-right-kerfuffle.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>IT’S HAR TO EMARGINE…</title>
    <link>http://blog.fantasticsid.com/posts/2007-05-03-har-to-emargine.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>IT’S HAR TO EMARGINE…</h1>
                    
                    <span class="meta">
		    
			May  3, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>最近嘴上总是念着IT’S HAR TO EMARGINE, 不过是山东版的.</p>
<p>发现这真是一句放之四海皆适用的语句.</p>
<p>“今天没有作业” -IT’S HAR TO EMARGINE</p>
<p>“下雨, 黑暗料理炒饭生意依然红火” -IT’S HAR TO EMARGINE</p>
<p>“刚才浴卡没有带, 穿上birthday suit时才发现带了漫吧的卡, 差点直接奔出来…” -IT’S HAR TO EMARGINE</p>
<p>“IT’S HAR TO EMARGINE” -你也会了?!IT’S HAR TO EMARGINE</p>
<p>GiGi一直强调, 口语测试时要有适当的hesitation device, 这样可以顺便节省时间思考问题. 当然过度往往要闹笑话. 比如考官一个问题砸来’What’s your name?‘, 你饱含感情得迅速反应’Oh~~!it’s an interesting question!In fact…you know…I have never thought about it. But if I have to …’</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Thu, 03 May 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-05-03-har-to-emargine.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>三</title>
    <link>http://blog.fantasticsid.com/posts/2007-02-24-three.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>三</h1>
                    
                    <span class="meta">
		    
			February 24, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>正是我想要的, 终于去滑雪场了.</p>
<p>春色满城, 生机勃勃, 今天再少穿点衣服进去.</p>
<p>不管怎样, 一路晃悠都只是一丝感觉, 当一切穿着好, 站在雪场里面时, 感觉我是从天而降, 突然出现在这里. 这个白色的坡道与刚才的所见太不同了.</p>
<p>好多的人, 穿着雪板像加了底座, 挥舞雪杖, 小心被挥到, 最好上坡.</p>
<p>滑雪, 虽说要技巧, 但也绝对不能少了蛮力. 使劲的方向当然最重要, 但这不过是蛮力用到了正确的尺度, 大概所谓技巧, 就是能够精确地使出蛮力吧. 还有那平衡, 说来玄乎, 事实上倒下的大多是惊慌忙乱中不知怎么使劲, 小小的偏移重心就能导致空中转体540侧身360之类的动作. 不过极难的是slide, 哈哈, 侧身滑行减速. 今天的状态尚可, 动作顺畅.</p>
<p>说来很汗颜, 去那里好几次了, 今天才敢上最高第三层坡. 其实摔了也不过是啃一下雪, 但就是因为是最高一层, 恐吓了我们. 上最高层当然不敢马上直线飞下来. S型下坡, 速降常用控速手段, 关键在要把脚下的东西踩出去, 上身向后倾斜. 脚下的雪板溅起雪花, 速度, 方向在掌握中. 小朋友们对着这片白色露出了花一样灿烂的笑容.</p>
<p>下次说好玩单板的, 肯定又是一番新滋味, 不过现在, 只能悬着它咯.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 24 Feb 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-02-24-three.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>明明有标题</title>
    <link>http://blog.fantasticsid.com/posts/2007-02-03-there-is-a-title.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>明明有标题</h1>
                    
                    <span class="meta">
		    
			February  3, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>记忆里面只有一次因为心情激动, 马上打开电脑在网络上留下点什么的. 那是IBM在电视上做了Linux的广告. 不过没有很多人理解这又怎么让人振奋了. 的确, 在linux桌面都有可能不可用时, 能指望多少人关心与自己浑身不搭界的5字母怪词上电视.</p>
<p>当时的激动, 号召大家一起激动, 以及不能理解大家如此不激动, 都是如此天真无邪无毒无色无味无重量.</p>
<p>不过在哪里摔倒, 就要在哪里再摔倒.</p>
<p>Live it up Shanghai归来咯!真是难以置信, 有一种</p>
<p>王重阳武功全废打瞌睡醒来又武功盖世,</p>
<p>变形金刚被人肢解靠一块电路板寻找附近零件自动修复,</p>
<p>毕尔博巴金斯从兽人手里逃脱得到魔戒钻回霍比特人洞屋吃点心,</p>
<p>神秘博士Tardis飞船没有能量靠手电筒充电充满起飞</p>
<p>的感觉.</p>
<p>每晚23:00, AM792 FM89.9 东方广播电台</p>
<p>试听之下感觉还是比较接近以前的节目, 开场的一段一群人吼live it up shanghai的还是一样亢奋啊. 可惜节目时间比以前的更短了. 本来就是谈谈一点话题放几首歌就45分钟过去了, 现在缩短到30分钟, 2首歌加几句“您现在收听的是live it up shanghai”就差不多15分钟没有了. 不过还是很感激上苍开眼了, 把好节目带回来. 虽然Edward没有了……如果有机会回来做嘉宾也不错, 那样我就会有一种老听众的自豪感了, 哈哈.</p>
<p>连日来下雪无数, 导致积雪. 来得正适时, 雪灾陪股灾.</p>
<p>混乱沪申… 冰封宝钢… 个股基金试比绿 安心等着, 等到冰雪融化.</p>
<p>可是形势逼人时就不得不反抗了. 前天旁边车棚积雪本已颇厚, 瞬间屋顶雪山崩裂, 倾泻在车棚上, 架子不堪负重, 摇摇欲坠. 因为怕倒下来压昏路人什么的, 于是决定铲除雪怪, 恢复地球往日的宁静安详. 爬上架子一看, yo, ho, 洁白的一大块很平整嘛, 突然感觉自己拿了铁铲子像铲特大的百乐宝. 铲起一勺, 一口吃不下…一顶雪, 千余斤, 铲子不断手也酸. 好的是规划得好, 铲下的雪往一起堆, 爬下架子不用堆就是个雪人, 那个圆锥, 岂是平地堆能堆得出的!</p>
<p>唉, 怎么又突然想起那成天想着怎么能slide稳一点的时候了, 如今看来好遥远. 雪很厚, 脚很稳.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 03 Feb 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-02-03-there-is-a-title.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>RECAP</title>
    <link>http://blog.fantasticsid.com/posts/2007-01-23-recap.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>RECAP</h1>
                    
                    <span class="meta">
		    
			January 23, 2007
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>这是个特别，平凡的特别平凡的学期.</p>
<p>来到这个世界整整19年, 误差小于10分钟, 被撞了右手, 完整的右手. 我这19年来就没有见过这么多血. 那是雨天, 我捂着右手的左手感觉不到右手流淌的液体是什么. 麻!…. 还在麻!…. 还没有麻完!…天呐!你麻好了吗?!不就是时间问题吗?麻不死我的!…不对!今天麻得不一样!看看!疼!!都泛滥了……马上校医院(感谢三位当时在场的同学ck, xh, ll). 当然那是徒劳而以, 最终还是到了长海. 说来神奇, 打了麻药, 看着针线在皮肤内外进出, 一点都不疼, 只是稍稍震动能和我眼中的情形配合, 告诉我没有看走眼. “算了, 医生, 让我脑袋也麻了好了…”呵呵. 苦笑.</p>
<p>本来的生日, 小小地要请客一顿, 同时也被如此尴尬地取消了. sky, yq, ck同学, 这顿还是会还的!</p>
<p>同学还小，说是我车技有问题, 那时候我想到一去不返的完整的右手, 想到我实在精湛的车技和超人的反应, 直接就不想有回应了. 那叫无语了.</p>
<p>不过自此之后左手得到重用, 衣食住行, 鼠标键盘都能靠他. 我会像用右手一样用他, 不必担心…I’m lovin’it.</p>
<p>这半年, 认识了不少新新朋友, 了解了许多新朋友, 告别了一些老朋友, 更有一些老老朋友不知他们的境况. ck同学, 你的努力大家都有看到, 祝你能随靶而跑, 边跑边打, 反正站在原地, 靶子会移动的. Bob同学酷酷的, 待人很好, 这兄弟爽. 我果然没有看错. 还有笑容圆圆的winson, 可人的ek和热闹的dwc…信管的sac同学也和我更加熟识了, 可惜我下个学期要退了. 我们因为linux而相识, 现在我为辐射而离开. 呵呵. 还有一位没有见过的上外英语的网友, 我们因为英音认识, 如今你因为重新改练美音而少了联系. 如果有一天重新改布什土音, 我们就又有更多交流了.</p>
<p>问:一个学期这么长时间怎么没有什么感觉?</p>
<p>答:有感觉的时候感觉时间是短的, 没有感觉的时候是没有时间的.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Tue, 23 Jan 2007 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2007-01-23-recap.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>在学校, 与阿姨为伴</title>
    <link>http://blog.fantasticsid.com/posts/2006-12-22-atschool.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>在学校, 与阿姨为伴</h1>
                    
                    <span class="meta">
		    
			December 22, 2006
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>两个星期没有回家了, 在学校的感觉还是不错的. 自由的时候, 一个人钻在人群里面钻进钻出, 去哪里完全处于最最朴素的思考. 感到累了, 叫上同样无所适从的兄弟们去满足一下小小的食欲, 然后一定会感到一种一直潜在的空虚, 又有干劲咯:世界是奇妙的, 除了吃睡, 咱还是要看看周围, 想想, 谈谈…</p>
<p>前几天看了加勒比海盗1, 2 , 挺酷的. 主角做事风格很飘逸的, 这种独立, 调侃, 随遇又最终搞定事情的能力…不错!那个Interceptor的船长本来很royal的, 最终…那个blacksmith是魔戒里的来高拉丝…特别要提提那个无名的海盗, 就是那个右眼是用球代替的那个高高瘦瘦的, 听出来了–太酷了, 是正宗的伦敦cockney土音!CD3开头有他一大段说话, 巨酷!!!在这样一部影片中听到我熟悉的语言, 我, 很感动…</p>
<p>今天去南区刷卡圣地, 过去的时候在想以怎么样的态度面对那个借球, 或者说是刷卡, 的阿姨, 想想不应该太直白吧:</p>
<p>“借个球”</p>
<p>“不借了, 太晚了”</p>
<p>“…”</p>
<p>“刷个卡么好了, 别借球了”</p>
<p>原来已经这么合法了.</p>
<p>说到阿姨, 我想到楼下的阿姨, 那天拉住我, 教育我要好好读书, 不要打电子游戏. 我一直作肯定回答, 最后, 终于在所有的建议和原则上达到了高度的统一, 实在没有不会重复的话题以后, 终于说了再见, 阿姨是好心的, 但是还是唐僧.</p>
<p>还有一个叫“极阿姨”, 男女老少, 本科研究, 大家都时不时要提到它, 据说出国也要靠她, 就是她话实在太多, 而且从天文地理到锅碗瓢盆都唠叨, 聊得还特全面. 今天路过她家门口时听到她对门前的孩子们说:“碗, 缸, 桶, 盆子, 盘子, 碟子, 筷子, 叉子, 勺子…我们再来一遍:碗, 缸, 桶…”. 咯咯</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Fri, 22 Dec 2006 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2006-12-22-atschool.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>就这么一写</title>
    <link>http://blog.fantasticsid.com/posts/2006-11-18-randompost.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>就这么一写</h1>
                    
                    <span class="meta">
		    
			November 18, 2006
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>今天我兄弟有重要的事情, 很早就起来了, 很兴奋, 然后朝着目标奔去了. 现在就一个人在寝室, 没有事情驱动我. 重复每天必修的循环. 终端, 挂上分区, 打开XMMS音乐, 浏览新闻… 不过记得昨天有买雅思的书, 终于有事情可做了. 是好久没有增加单词库存了, 更由于英语课没有选到, 英文也没有机会说了. 考雅思, 不考GRE, 托福, 是因为想去英国, 不想去美国. 去英国, 是因为喜欢英国人的腔调. 原来我是有目标的, 只是看来太远了. 是该奔一下了, 像那位兄弟一样有激情.</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 18 Nov 2006 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2006-11-18-randompost.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>coldplayism</title>
    <link>http://blog.fantasticsid.com/posts/2006-09-30-coldplayism.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>coldplayism</h1>
                    
                    <span class="meta">
		    
			September 30, 2006
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>“摇滚”, 还是不能把以前对它的映象与coldplay联系在一起.</p>
<p>我真是幸运竟然能够听到coldplay的歌. 在7个时差之外, 灿烂只能蕴藏在巨大的空间里面, 只有不断提炼巨量的信息才能发现那些宝物. 第一首是他们的 fix you. coldplay的歌词是简单的, 但是足以表达所有的境界. 不敢相信这么平静优雅的调子竟然属于摇滚, 以前认为摇滚应该是以对听力的破坏程度来评 价其成就的, 可是coldplay的这首fix you, 却如此宁静. 在受到挫折是听它, 它会像圣歌一样安抚心灵. 听说这首歌是在伦敦地铁爆炸后写的, 它应该是给全英国人，全世界人的一个安慰. Chris外星人式的, 婉转的假声在耳边的确可以让疲惫的心安顿下来.</p>
<p>第二次对coldplay崇敬是听到yellow, 中文什么意思呢?可能是灿烂吧. 歌词翻来翻去本来就很难, 但应该不远就是这个意思. (写到此时 yellow开奏了, 非常好). 我并不很懂yellow歌词的意思, 只是能听出有种发誓的感觉, 意志很坚定. 歌词描述的世界很简单, 很纯朴, 很和谐. 真不愧是万人叫好的经典.</p>
<p>后来又不断地听他们的歌, 他们的歌有些并不是乍听就能接受的, 需要几次才能发现它的旋律是那么独特, 特点是在很淡的忧郁里面, 包含着最终的快乐. Warning sign, Amsterdam的前奏都是多次后才发现它们的境界简直可称魔幻, 还有We never change…另外要提The scientist, 过于伤感的歌, 不过如果以伤感作为评分标准, 那它得拿个95分.</p>
<p>coldplay play cold</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 30 Sep 2006 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2006-09-30-coldplayism.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>
<item>
    <title>真的要和LIUS告别了</title>
    <link>http://blog.fantasticsid.com/posts/2006-09-16-lius.html</link>
    <description><![CDATA[<!-- Post Header -->
<header class="intro-header" style="background-image: url('/static/img/tardis.jpg')" alt="" title="">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <h1>真的要和LIUS告别了</h1>
                    
                    <span class="meta">
		    
			September 16, 2006
		    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">

			<p>Live it up Shanghai.我最爱的广播节目，在停播半年多后，终于在主持人Kevin的Blog上看到了它最后熄灭的火星。“Edward Morton Jack回去了，大概再也不会回上海了。”</p>
<p>还是能在脑海里精确地播放LIUS背景音乐。大一时晚上9点开始边跑步，边听节目，那是一天里最充实的活动了。Edward的牛津口音也分外养耳，简简单单几个词语人家念出来就是好听入耳，毕竟是最正统的英语啊，羡慕到死估计也学不会了。</p>
<p>第一次听到那个节目的时候以为是两个老外在那边主持节目，听了好几天突然其中一个用街上任何一个普通人可能说出的口音说中文，惊一下，才知道原来其中一个是我们的Kevin Woo，原生的中国小青年。Kevin的口语的确了得，没有停顿，也没有什么破落的中式发音。就这样骗了我那么久，佩服！</p>
<p>www.liveitupshanghai.com病情更恶化了，原来连上去还能看到where do you want to go today?一句自问式的，有点失落感的文本，现在用google搜，看到的都是. The Requested URL was not found on this server…不过Kevin说它只是去做ICP备份的事情了，希望奇迹般地回来。</p>
<p>离别的时候我的惋惜丝毫不能给这个节目带来任何重生的机会，就简单地对这个节目的所有工作人员说谢谢了，祝在新岗位上给更多听众带来快乐。</p>	

                <hr>

                <!-- <div id="disqus_thread"></div> -->
                <!-- <script> -->
                <!--   var disqus_config = function () { -->
                <!--   this.discovery.disable_promoted = 'true'; -->
                <!--   }; -->
                <!--   (function() { // DON'T EDIT BELOW THIS LINE -->
                <!--   var d = document, s = d.createElement('script'); -->

                <!--   s.src = '//fantasticsidtheblog.disqus.com/embed.js'; -->

                <!--   s.setAttribute('data-timestamp', +new Date()); -->
                <!--   (d.head || d.body).appendChild(s); -->
                <!--   })(); -->
                <!-- </script> -->
                <!-- <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> -->

                <ul class="pager">
                    
                    
                </ul>

            </div>
        </div>
    </div>
</article>
]]></description>
    <pubDate>Sat, 16 Sep 2006 00:00:00 UT</pubDate>
    <guid>http://blog.fantasticsid.com/posts/2006-09-16-lius.html</guid>
    <dc:creator>fantasticsid</dc:creator>
</item>

    </channel>
</rss>
